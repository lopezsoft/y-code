{"version":3,"sources":["./src/app/services/general/persons.service.ts","./src/app/services/general/resolutions.service.ts","./src/app/services/companies/wineries.service.ts","./src/app/services/general/taxes.service.ts","./src/app/services/general/index.ts","./src/app/services/companies/type-organization.service.ts","./src/app/services/general/currency.service.ts","./src/app/services/companies/company.service.ts","./src/app/services/companies/index.ts","./src/app/services/general/tax-accounting-account.service.ts","./src/app/services/general/reports-header.service.ts","./src/app/services/companies/departments.service.ts","./src/app/services/general/shipping-frequency.service.ts","./src/app/services/companies/branch-office.service.ts","./src/app/services/general/currency-sys.service.ts"],"names":[],"mappings":"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","file":"default~general-general-module~sales-sales-module~shopping-shopping-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { JsonResponse } from './../../interfaces';\r\n\r\nimport { ApiServerService } from '../../utils/api-server.service';\r\nimport { TimeLimit, MeansPayment, Persons, TypePersons} from '../../models/general-model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PersonsService {\r\n  data: Persons[] = [];\r\n  constructor(\r\n    private api: ApiServerService\r\n  ){}\r\n\r\n  getData(params: any): Observable<Persons[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/persons/read', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n\r\n  }\r\n\r\n  getCustomersAll(): Observable<Persons[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/persons/customers/all')\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n\r\n  }\r\n\r\n  getCustomers(params: any): Observable<Persons[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/persons/customers', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n\r\n  }\r\n\r\n  getTypePersons(params: any): Observable<TypePersons[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/typepersons', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n\r\n  getTimeLimit(params: any): Observable<TimeLimit[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/timelimit', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n\r\n  getMeansPayment(params: any): Observable<MeansPayment[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/meanspayment', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n\r\n  getTypePersonsCustomers(params: any): Observable<TypePersons[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/typepersons/customers', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n\r\n  getProviders(params: any): Observable<Persons[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/persons/providers', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { JsonResponse } from '../../interfaces';\r\n\r\nimport { ApiServerService } from '../../utils/api-server.service';\r\nimport { AccountingDocuments } from './../../models/accounting-model';\r\nimport { Resolutions} from '../../models/general-model';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ResolutionsService {\r\n  data: Resolutions[] = [];\r\n  constructor(\r\n    private api: ApiServerService\r\n  ){}\r\n\r\n  getAccountingDocuments(params: any): Observable<AccountingDocuments[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/documenttype', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n\r\n  getData(params: any): Observable<Resolutions[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/general/resolutions/read', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { JsonResponse } from './../../interfaces';\r\n\r\n\r\nimport { ApiServerService } from '../../utils/api-server.service';\r\nimport { wineries } from './../../models/companies-model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class WineriesService {\r\n  data: wineries[] = [];\r\n  constructor(\r\n    private api: ApiServerService\r\n  ){}\r\n\r\n  getData(params: any): Observable<wineries[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/companies/wineries/read', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { JsonResponse } from './../../interfaces';\r\n\r\n\r\nimport { ApiServerService } from '../../utils/api-server.service';\r\nimport { Taxes  } from './../../models/general-model';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaxesService {\r\n  data: Taxes[] = [];\r\n  constructor(\r\n    private api: ApiServerService\r\n  ){}\r\n\r\n  getData(params: any): Observable<Taxes[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/general/taxes/read', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n}\r\n","import { from } from \"rxjs\";\r\n\r\nexport * from './currency-sys.service';\r\nexport * from './currency.service';\r\nexport * from './tax-accounting-account.service';\r\nexport * from './tax-rates.service';\r\nexport * from './taxes.service';\r\nexport * from './persons.service';\r\nexport * from './resolutions.service';\r\nexport * from './shipping-frequency.service';\r\nexport * from './reports-header.service';\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { JsonResponse } from './../../interfaces';\r\n\r\n\r\nimport { ApiServerService } from '../../utils/api-server.service';\r\nimport { TypeOrganization } from './../../models/companies-model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TypeOrganizationService {\r\n  data: TypeOrganization[] = [];\r\n  constructor(\r\n    private api: ApiServerService\r\n  ){}\r\n\r\n  getData(params: any): Observable<TypeOrganization[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/typeorganization', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { JsonResponse } from './../../interfaces';\r\n\r\nimport { ApiServerService } from '../../utils/api-server.service';\r\nimport { Currency} from './../../models/general-model';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CurrencyService {\r\n  data: Currency[] = [];\r\n  constructor(\r\n    private api: ApiServerService\r\n  ){}\r\n\r\n  getData(params: any): Observable<Currency[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/currency', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { JsonResponse } from './../../interfaces';\r\nimport { ApiServerService } from './../../utils';\r\nimport { Company } from './../../models/companies-model';\r\nimport { map } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs/internal/Observable';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CompanyService {\r\n\r\n  data: Company[] = [];\r\n  constructor(\r\n    private api: ApiServerService\r\n  ){}\r\n\r\n  getData(params: any): Observable<Company[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/company/read', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n}\r\n","export * from './type-organization.service';\r\nexport * from './wineries.service';\r\nexport * from './company.service';\r\nexport * from './departments.service';\r\nexport * from './branch-office.service';\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { JsonResponse } from './../../interfaces';\r\n\r\n\r\nimport { ApiServerService } from '../../utils/api-server.service';\r\nimport { TaxAccountingAccount  } from '../../models/general-model';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaxAccountingAccountService {\r\n  data: TaxAccountingAccount[] = [];\r\n  constructor(\r\n    private api: ApiServerService\r\n  ){}\r\n\r\n  getData(params: any): Observable<TaxAccountingAccount[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/general/TaxAccountingAccount/read', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { JsonResponse } from '../../interfaces';\r\n\r\nimport { ApiServerService } from '../../utils/api-server.service';\r\nimport { ReportsHeader} from '../../models/general-model';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ReportsHeaderService {\r\n  data: ReportsHeader[] = [];\r\n  constructor(\r\n    private api: ApiServerService\r\n  ){}\r\n\r\n  getData(params: any): Observable<ReportsHeader[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/general/reports/read', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { JsonResponse } from './../../interfaces';\r\n\r\n\r\nimport { ApiServerService } from '../../utils/api-server.service';\r\nimport { Departments } from '../../models/companies-model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DepartmentsService {\r\n\r\n  data: Departments[] = [];\r\n  constructor(\r\n    private api: ApiServerService\r\n  ){}\r\n\r\n  getData(params: any): Observable<Departments[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/companies/departments/read', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { JsonResponse } from '../../interfaces';\r\n\r\n\r\nimport { ApiServerService } from '../../utils/api-server.service';\r\nimport { ShippingFrequency  } from '../../models/general-model';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShippingFrequencyService {\r\n  data: ShippingFrequency[] = [];\r\n  constructor(\r\n    private api: ApiServerService\r\n  ){}\r\n\r\n  getData(params: any): Observable<ShippingFrequency[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/shippingfrequency', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { JsonResponse } from './../../interfaces';\r\n\r\n\r\nimport { ApiServerService } from '../../utils/api-server.service';\r\nimport { BranchOffice } from './../../models/companies-model';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BranchOfficeService {\r\n\r\n  data: BranchOffice[] = [];\r\n  constructor(\r\n    private api: ApiServerService\r\n  ){}\r\n\r\n  getData(params: any): Observable<BranchOffice[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/companies/branchoffice/read', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n\r\n  getPointsOfSale(params: any): Observable<BranchOffice[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/companies/branchoffice/read/pointofsale', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { JsonResponse } from './../../interfaces';\r\n\r\nimport { ApiServerService } from '../../utils/api-server.service';\r\nimport { CurrencySys, CurrencyChange} from './../../models/general-model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CurrencySysService {\r\n  data: CurrencySys[] = [];\r\n  constructor(\r\n    private api: ApiServerService\r\n  ){}\r\n\r\n  getData(params: any): Observable<CurrencySys[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/general/currency/read', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n\r\n    }\r\n  getChangeLocal(params: any): Observable<CurrencyChange[]> {\r\n    const ts  = this;\r\n    return ts.api.get('/general/currency/change/local', params)\r\n      .pipe( map ( (resp: JsonResponse ) => {\r\n        return resp.records;\r\n      }));\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}