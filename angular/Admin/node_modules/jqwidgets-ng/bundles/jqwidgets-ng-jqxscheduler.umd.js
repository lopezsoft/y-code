require('../jqwidgets/jqxcore');
require('../jqwidgets/jqxdata');
require('../jqwidgets/jqxdata.export');
require('../jqwidgets/jqxdate');
require('../jqwidgets/jqxbuttons');
require('../jqwidgets/jqxmenu');
require('../jqwidgets/jqxtooltip');
require('../jqwidgets/jqxscrollbar');
require('../jqwidgets/jqxradiobutton');
require('../jqwidgets/jqxcheckbox');
require('../jqwidgets/jqxwindow');
require('../jqwidgets/jqxlistbox');
require('../jqwidgets/jqxcolorpicker');
require('../jqwidgets/jqxcombobox');
require('../jqwidgets/jqxdropdownlist');
require('../jqwidgets/jqxnumberinput');
require('../jqwidgets/jqxinput');
require('../jqwidgets/globalization/globalize');
require('../jqwidgets/jqxcalendar');
require('../jqwidgets/jqxdatetimeinput');
require('../jqwidgets/jqxscheduler');
require('../jqwidgets/jqxscheduler.api');
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('jqwidgets-ng/jqxscheduler', ['exports', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['jqwidgets-ng'] = global['jqwidgets-ng'] || {}, global['jqwidgets-ng'].jqxscheduler = {}), global.ng.core));
}(this, (function (exports, core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var jqxSchedulerComponent = /** @class */ (function () {
        function jqxSchedulerComponent(containerElement) {
            this.autoCreate = true;
            this.properties = ['appointmentOpacity', 'appointmentsMinHeight', 'appointmentDataFields', 'appointmentTooltips', 'columnsHeight', 'contextMenu', 'contextMenuOpen', 'contextMenuClose', 'contextMenuItemClick', 'contextMenuCreate', 'changedAppointments', 'disabled', 'date', 'dayNameFormat', 'enableHover', 'editDialog', 'editDialogDateTimeFormatString', 'editDialogDateFormatString', 'editDialogOpen', 'editDialogCreate', 'editDialogKeyDown', 'editDialogClose', 'exportSettings', 'height', 'legendPosition', 'legendHeight', 'localization', 'min', 'max', 'ready', 'renderAppointment', 'rendering', 'rendered', 'rtl', 'resources', 'rowsHeight', 'showToolbar', 'showLegend', 'scrollBarSize', 'source', 'statuses', 'touchRowsHeight', 'theme', 'touchAppointmentsMinHeight', 'touchScrollBarSize', 'timeZone', 'touchDayNameFormat', 'toolBarRangeFormat', 'toolBarRangeFormatAbbr', 'toolbarHeight', 'views', 'view', 'width'];
            // jqxSchedulerComponent events
            this.onAppointmentChange = new core.EventEmitter();
            this.onAppointmentClick = new core.EventEmitter();
            this.onAppointmentDoubleClick = new core.EventEmitter();
            this.onAppointmentDelete = new core.EventEmitter();
            this.onAppointmentAdd = new core.EventEmitter();
            this.onBindingComplete = new core.EventEmitter();
            this.onCellClick = new core.EventEmitter();
            this.onCellDoubleClick = new core.EventEmitter();
            this.onContextMenuOpen = new core.EventEmitter();
            this.onContextMenuClose = new core.EventEmitter();
            this.onContextMenuItemClick = new core.EventEmitter();
            this.onContextMenuCreate = new core.EventEmitter();
            this.onDateChange = new core.EventEmitter();
            this.onEditRecurrenceDialogOpen = new core.EventEmitter();
            this.onEditRecurrenceDialogClose = new core.EventEmitter();
            this.onEditDialogCreate = new core.EventEmitter();
            this.onEditDialogOpen = new core.EventEmitter();
            this.onEditDialogClose = new core.EventEmitter();
            this.onViewChange = new core.EventEmitter();
            this.elementRef = containerElement;
        }
        jqxSchedulerComponent.prototype.ngOnInit = function () {
            if (this.autoCreate) {
                this.createComponent();
            }
        };
        ;
        jqxSchedulerComponent.prototype.ngOnChanges = function (changes) {
            if (this.host) {
                for (var i = 0; i < this.properties.length; i++) {
                    var attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);
                    var areEqual = false;
                    if (this[attrName] !== undefined) {
                        if (typeof this[attrName] === 'object') {
                            if (this[attrName] instanceof Array) {
                                areEqual = this.arraysEqual(this[attrName], this.host.jqxScheduler(this.properties[i]));
                            }
                            if (areEqual) {
                                return false;
                            }
                            this.host.jqxScheduler(this.properties[i], this[attrName]);
                            continue;
                        }
                        if (this[attrName] !== this.host.jqxScheduler(this.properties[i])) {
                            this.host.jqxScheduler(this.properties[i], this[attrName]);
                        }
                    }
                }
            }
        };
        jqxSchedulerComponent.prototype.arraysEqual = function (attrValue, hostValue) {
            if ((attrValue && !hostValue) || (!attrValue && hostValue)) {
                return false;
            }
            if (attrValue.length != hostValue.length) {
                return false;
            }
            for (var i = 0; i < attrValue.length; i++) {
                if (attrValue[i] !== hostValue[i]) {
                    return false;
                }
            }
            return true;
        };
        jqxSchedulerComponent.prototype.manageAttributes = function () {
            var options = {};
            for (var i = 0; i < this.properties.length; i++) {
                var attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);
                if (this[attrName] !== undefined) {
                    options[this.properties[i]] = this[attrName];
                }
            }
            return options;
        };
        jqxSchedulerComponent.prototype.moveClasses = function (parentEl, childEl) {
            var _a;
            var classes = parentEl.classList;
            if (classes.length > 0) {
                (_a = childEl.classList).add.apply(_a, __spread(classes));
            }
            parentEl.className = '';
        };
        jqxSchedulerComponent.prototype.moveStyles = function (parentEl, childEl) {
            var style = parentEl.style.cssText;
            childEl.style.cssText = style;
            parentEl.style.cssText = '';
        };
        jqxSchedulerComponent.prototype.createComponent = function (options) {
            if (this.host) {
                return;
            }
            if (options) {
                JQXLite.extend(options, this.manageAttributes());
            }
            else {
                options = this.manageAttributes();
            }
            this.host = JQXLite(this.elementRef.nativeElement.firstChild);
            this.moveClasses(this.elementRef.nativeElement, this.host[0]);
            this.moveStyles(this.elementRef.nativeElement, this.host[0]);
            this.__wireEvents__();
            this.widgetObject = jqwidgets.createInstance(this.host, 'jqxScheduler', options);
        };
        jqxSchedulerComponent.prototype.createWidget = function (options) {
            this.createComponent(options);
        };
        jqxSchedulerComponent.prototype.__updateRect__ = function () {
            if (this.host)
                this.host.css({ width: this.attrWidth, height: this.attrHeight });
        };
        jqxSchedulerComponent.prototype.setOptions = function (options) {
            this.host.jqxScheduler('setOptions', options);
        };
        // jqxSchedulerComponent properties
        jqxSchedulerComponent.prototype.appointmentOpacity = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('appointmentOpacity', arg);
            }
            else {
                return this.host.jqxScheduler('appointmentOpacity');
            }
        };
        jqxSchedulerComponent.prototype.appointmentsMinHeight = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('appointmentsMinHeight', arg);
            }
            else {
                return this.host.jqxScheduler('appointmentsMinHeight');
            }
        };
        jqxSchedulerComponent.prototype.appointmentDataFields = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('appointmentDataFields', arg);
            }
            else {
                return this.host.jqxScheduler('appointmentDataFields');
            }
        };
        jqxSchedulerComponent.prototype.appointmentTooltips = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('appointmentTooltips', arg);
            }
            else {
                return this.host.jqxScheduler('appointmentTooltips');
            }
        };
        jqxSchedulerComponent.prototype.columnsHeight = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('columnsHeight', arg);
            }
            else {
                return this.host.jqxScheduler('columnsHeight');
            }
        };
        jqxSchedulerComponent.prototype.contextMenu = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('contextMenu', arg);
            }
            else {
                return this.host.jqxScheduler('contextMenu');
            }
        };
        jqxSchedulerComponent.prototype.contextMenuOpen = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('contextMenuOpen', arg);
            }
            else {
                return this.host.jqxScheduler('contextMenuOpen');
            }
        };
        jqxSchedulerComponent.prototype.contextMenuClose = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('contextMenuClose', arg);
            }
            else {
                return this.host.jqxScheduler('contextMenuClose');
            }
        };
        jqxSchedulerComponent.prototype.contextMenuItemClick = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('contextMenuItemClick', arg);
            }
            else {
                return this.host.jqxScheduler('contextMenuItemClick');
            }
        };
        jqxSchedulerComponent.prototype.contextMenuCreate = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('contextMenuCreate', arg);
            }
            else {
                return this.host.jqxScheduler('contextMenuCreate');
            }
        };
        jqxSchedulerComponent.prototype.changedAppointments = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('changedAppointments', arg);
            }
            else {
                return this.host.jqxScheduler('changedAppointments');
            }
        };
        jqxSchedulerComponent.prototype.disabled = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('disabled', arg);
            }
            else {
                return this.host.jqxScheduler('disabled');
            }
        };
        jqxSchedulerComponent.prototype.date = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('date', arg);
            }
            else {
                return this.host.jqxScheduler('date');
            }
        };
        jqxSchedulerComponent.prototype.dayNameFormat = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('dayNameFormat', arg);
            }
            else {
                return this.host.jqxScheduler('dayNameFormat');
            }
        };
        jqxSchedulerComponent.prototype.enableHover = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('enableHover', arg);
            }
            else {
                return this.host.jqxScheduler('enableHover');
            }
        };
        jqxSchedulerComponent.prototype.editDialog = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('editDialog', arg);
            }
            else {
                return this.host.jqxScheduler('editDialog');
            }
        };
        jqxSchedulerComponent.prototype.editDialogDateTimeFormatString = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('editDialogDateTimeFormatString', arg);
            }
            else {
                return this.host.jqxScheduler('editDialogDateTimeFormatString');
            }
        };
        jqxSchedulerComponent.prototype.editDialogDateFormatString = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('editDialogDateFormatString', arg);
            }
            else {
                return this.host.jqxScheduler('editDialogDateFormatString');
            }
        };
        jqxSchedulerComponent.prototype.editDialogOpen = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('editDialogOpen', arg);
            }
            else {
                return this.host.jqxScheduler('editDialogOpen');
            }
        };
        jqxSchedulerComponent.prototype.editDialogCreate = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('editDialogCreate', arg);
            }
            else {
                return this.host.jqxScheduler('editDialogCreate');
            }
        };
        jqxSchedulerComponent.prototype.editDialogKeyDown = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('editDialogKeyDown', arg);
            }
            else {
                return this.host.jqxScheduler('editDialogKeyDown');
            }
        };
        jqxSchedulerComponent.prototype.editDialogClose = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('editDialogClose', arg);
            }
            else {
                return this.host.jqxScheduler('editDialogClose');
            }
        };
        jqxSchedulerComponent.prototype.exportSettings = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('exportSettings', arg);
            }
            else {
                return this.host.jqxScheduler('exportSettings');
            }
        };
        jqxSchedulerComponent.prototype.height = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('height', arg);
            }
            else {
                return this.host.jqxScheduler('height');
            }
        };
        jqxSchedulerComponent.prototype.legendPosition = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('legendPosition', arg);
            }
            else {
                return this.host.jqxScheduler('legendPosition');
            }
        };
        jqxSchedulerComponent.prototype.legendHeight = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('legendHeight', arg);
            }
            else {
                return this.host.jqxScheduler('legendHeight');
            }
        };
        jqxSchedulerComponent.prototype.localization = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('localization', arg);
            }
            else {
                return this.host.jqxScheduler('localization');
            }
        };
        jqxSchedulerComponent.prototype.min = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('min', arg);
            }
            else {
                return this.host.jqxScheduler('min');
            }
        };
        jqxSchedulerComponent.prototype.max = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('max', arg);
            }
            else {
                return this.host.jqxScheduler('max');
            }
        };
        jqxSchedulerComponent.prototype.ready = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('ready', arg);
            }
            else {
                return this.host.jqxScheduler('ready');
            }
        };
        jqxSchedulerComponent.prototype.renderAppointment = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('renderAppointment', arg);
            }
            else {
                return this.host.jqxScheduler('renderAppointment');
            }
        };
        jqxSchedulerComponent.prototype.rendering = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('rendering', arg);
            }
            else {
                return this.host.jqxScheduler('rendering');
            }
        };
        jqxSchedulerComponent.prototype.rendered = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('rendered', arg);
            }
            else {
                return this.host.jqxScheduler('rendered');
            }
        };
        jqxSchedulerComponent.prototype.rtl = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('rtl', arg);
            }
            else {
                return this.host.jqxScheduler('rtl');
            }
        };
        jqxSchedulerComponent.prototype.resources = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('resources', arg);
            }
            else {
                return this.host.jqxScheduler('resources');
            }
        };
        jqxSchedulerComponent.prototype.rowsHeight = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('rowsHeight', arg);
            }
            else {
                return this.host.jqxScheduler('rowsHeight');
            }
        };
        jqxSchedulerComponent.prototype.showToolbar = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('showToolbar', arg);
            }
            else {
                return this.host.jqxScheduler('showToolbar');
            }
        };
        jqxSchedulerComponent.prototype.showLegend = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('showLegend', arg);
            }
            else {
                return this.host.jqxScheduler('showLegend');
            }
        };
        jqxSchedulerComponent.prototype.scrollBarSize = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('scrollBarSize', arg);
            }
            else {
                return this.host.jqxScheduler('scrollBarSize');
            }
        };
        jqxSchedulerComponent.prototype.source = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('source', arg);
            }
            else {
                return this.host.jqxScheduler('source');
            }
        };
        jqxSchedulerComponent.prototype.statuses = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('statuses', arg);
            }
            else {
                return this.host.jqxScheduler('statuses');
            }
        };
        jqxSchedulerComponent.prototype.touchRowsHeight = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('touchRowsHeight', arg);
            }
            else {
                return this.host.jqxScheduler('touchRowsHeight');
            }
        };
        jqxSchedulerComponent.prototype.theme = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('theme', arg);
            }
            else {
                return this.host.jqxScheduler('theme');
            }
        };
        jqxSchedulerComponent.prototype.touchAppointmentsMinHeight = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('touchAppointmentsMinHeight', arg);
            }
            else {
                return this.host.jqxScheduler('touchAppointmentsMinHeight');
            }
        };
        jqxSchedulerComponent.prototype.touchScrollBarSize = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('touchScrollBarSize', arg);
            }
            else {
                return this.host.jqxScheduler('touchScrollBarSize');
            }
        };
        jqxSchedulerComponent.prototype.timeZone = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('timeZone', arg);
            }
            else {
                return this.host.jqxScheduler('timeZone');
            }
        };
        jqxSchedulerComponent.prototype.touchDayNameFormat = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('touchDayNameFormat', arg);
            }
            else {
                return this.host.jqxScheduler('touchDayNameFormat');
            }
        };
        jqxSchedulerComponent.prototype.toolBarRangeFormat = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('toolBarRangeFormat', arg);
            }
            else {
                return this.host.jqxScheduler('toolBarRangeFormat');
            }
        };
        jqxSchedulerComponent.prototype.toolBarRangeFormatAbbr = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('toolBarRangeFormatAbbr', arg);
            }
            else {
                return this.host.jqxScheduler('toolBarRangeFormatAbbr');
            }
        };
        jqxSchedulerComponent.prototype.toolbarHeight = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('toolbarHeight', arg);
            }
            else {
                return this.host.jqxScheduler('toolbarHeight');
            }
        };
        jqxSchedulerComponent.prototype.views = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('views', arg);
            }
            else {
                return this.host.jqxScheduler('views');
            }
        };
        jqxSchedulerComponent.prototype.view = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('view', arg);
            }
            else {
                return this.host.jqxScheduler('view');
            }
        };
        jqxSchedulerComponent.prototype.width = function (arg) {
            if (arg !== undefined) {
                this.host.jqxScheduler('width', arg);
            }
            else {
                return this.host.jqxScheduler('width');
            }
        };
        // jqxSchedulerComponent functions
        jqxSchedulerComponent.prototype.addAppointment = function (item) {
            this.host.jqxScheduler('addAppointment', item);
        };
        jqxSchedulerComponent.prototype.beginAppointmentsUpdate = function () {
            this.host.jqxScheduler('beginAppointmentsUpdate');
        };
        jqxSchedulerComponent.prototype.clearAppointmentsSelection = function () {
            this.host.jqxScheduler('clearAppointmentsSelection');
        };
        jqxSchedulerComponent.prototype.clearSelection = function () {
            this.host.jqxScheduler('clearSelection');
        };
        jqxSchedulerComponent.prototype.closeMenu = function () {
            this.host.jqxScheduler('closeMenu');
        };
        jqxSchedulerComponent.prototype.closeDialog = function () {
            this.host.jqxScheduler('closeDialog');
        };
        jqxSchedulerComponent.prototype.deleteAppointment = function (appointmenId) {
            this.host.jqxScheduler('deleteAppointment', appointmenId);
        };
        jqxSchedulerComponent.prototype.destroy = function () {
            this.host.jqxScheduler('destroy');
        };
        jqxSchedulerComponent.prototype.endAppointmentsUpdate = function () {
            this.host.jqxScheduler('endAppointmentsUpdate');
        };
        jqxSchedulerComponent.prototype.ensureAppointmentVisible = function (id) {
            this.host.jqxScheduler('ensureAppointmentVisible', id);
        };
        jqxSchedulerComponent.prototype.ensureVisible = function (item, resourceId) {
            this.host.jqxScheduler('ensureVisible', item, resourceId);
        };
        jqxSchedulerComponent.prototype.exportData = function (format) {
            return this.host.jqxScheduler('exportData', format);
        };
        jqxSchedulerComponent.prototype.focus = function () {
            this.host.jqxScheduler('focus');
        };
        jqxSchedulerComponent.prototype.getAppointmentProperty = function (appointmentId, name) {
            return this.host.jqxScheduler('getAppointmentProperty', appointmentId, name);
        };
        jqxSchedulerComponent.prototype.getSelection = function () {
            return this.host.jqxScheduler('getSelection');
        };
        jqxSchedulerComponent.prototype.getAppointments = function () {
            return this.host.jqxScheduler('getAppointments');
        };
        jqxSchedulerComponent.prototype.getDataAppointments = function () {
            return this.host.jqxScheduler('getDataAppointments');
        };
        jqxSchedulerComponent.prototype.hideAppointmentsByResource = function (resourcesId) {
            this.host.jqxScheduler('hideAppointmentsByResource', resourcesId);
        };
        jqxSchedulerComponent.prototype.openMenu = function (left, top) {
            this.host.jqxScheduler('openMenu', left, top);
        };
        jqxSchedulerComponent.prototype.openDialog = function (left, top) {
            this.host.jqxScheduler('openDialog', left, top);
        };
        jqxSchedulerComponent.prototype.selectAppointment = function (appointmentId) {
            this.host.jqxScheduler('selectAppointment', appointmentId);
        };
        jqxSchedulerComponent.prototype.setAppointmentProperty = function (appointmentId, name, value) {
            this.host.jqxScheduler('setAppointmentProperty', appointmentId, name, value);
        };
        jqxSchedulerComponent.prototype.selectCell = function (date, allday, resourceId) {
            this.host.jqxScheduler('selectCell', date, allday, resourceId);
        };
        jqxSchedulerComponent.prototype.showAppointmentsByResource = function (resourceId) {
            this.host.jqxScheduler('showAppointmentsByResource', resourceId);
        };
        jqxSchedulerComponent.prototype.scrollWidth = function () {
            return this.host.jqxScheduler('scrollWidth');
        };
        jqxSchedulerComponent.prototype.scrollHeight = function () {
            return this.host.jqxScheduler('scrollHeight');
        };
        jqxSchedulerComponent.prototype.scrollLeft = function (left) {
            this.host.jqxScheduler('scrollLeft', left);
        };
        jqxSchedulerComponent.prototype.scrollTop = function (top) {
            this.host.jqxScheduler('scrollTop', top);
        };
        jqxSchedulerComponent.prototype.__wireEvents__ = function () {
            var _this = this;
            this.host.on('appointmentChange', function (eventData) { _this.onAppointmentChange.emit(eventData); });
            this.host.on('appointmentClick', function (eventData) { _this.onAppointmentClick.emit(eventData); });
            this.host.on('appointmentDoubleClick', function (eventData) { _this.onAppointmentDoubleClick.emit(eventData); });
            this.host.on('appointmentDelete', function (eventData) { _this.onAppointmentDelete.emit(eventData); });
            this.host.on('appointmentAdd', function (eventData) { _this.onAppointmentAdd.emit(eventData); });
            this.host.on('bindingComplete', function (eventData) { _this.onBindingComplete.emit(eventData); });
            this.host.on('cellClick', function (eventData) { _this.onCellClick.emit(eventData); });
            this.host.on('cellDoubleClick', function (eventData) { _this.onCellDoubleClick.emit(eventData); });
            this.host.on('contextMenuOpen', function (eventData) { _this.onContextMenuOpen.emit(eventData); });
            this.host.on('contextMenuClose', function (eventData) { _this.onContextMenuClose.emit(eventData); });
            this.host.on('contextMenuItemClick', function (eventData) { _this.onContextMenuItemClick.emit(eventData); });
            this.host.on('contextMenuCreate', function (eventData) { _this.onContextMenuCreate.emit(eventData); });
            this.host.on('dateChange', function (eventData) { _this.onDateChange.emit(eventData); });
            this.host.on('editRecurrenceDialogOpen', function (eventData) { _this.onEditRecurrenceDialogOpen.emit(eventData); });
            this.host.on('editRecurrenceDialogClose', function (eventData) { _this.onEditRecurrenceDialogClose.emit(eventData); });
            this.host.on('editDialogCreate', function (eventData) { _this.onEditDialogCreate.emit(eventData); });
            this.host.on('editDialogOpen', function (eventData) { _this.onEditDialogOpen.emit(eventData); });
            this.host.on('editDialogClose', function (eventData) { _this.onEditDialogClose.emit(eventData); });
            this.host.on('viewChange', function (eventData) { _this.onViewChange.emit(eventData); });
        };
        return jqxSchedulerComponent;
    }()); //jqxSchedulerComponent
    jqxSchedulerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'jqxScheduler',
                    template: '<div><ng-content></ng-content></div>'
                },] }
    ];
    jqxSchedulerComponent.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    jqxSchedulerComponent.propDecorators = {
        attrAppointmentOpacity: [{ type: core.Input, args: ['appointmentOpacity',] }],
        attrAppointmentsMinHeight: [{ type: core.Input, args: ['appointmentsMinHeight',] }],
        attrAppointmentDataFields: [{ type: core.Input, args: ['appointmentDataFields',] }],
        attrAppointmentTooltips: [{ type: core.Input, args: ['appointmentTooltips',] }],
        attrColumnsHeight: [{ type: core.Input, args: ['columnsHeight',] }],
        attrContextMenu: [{ type: core.Input, args: ['contextMenu',] }],
        attrContextMenuOpen: [{ type: core.Input, args: ['contextMenuOpen',] }],
        attrContextMenuClose: [{ type: core.Input, args: ['contextMenuClose',] }],
        attrContextMenuItemClick: [{ type: core.Input, args: ['contextMenuItemClick',] }],
        attrContextMenuCreate: [{ type: core.Input, args: ['contextMenuCreate',] }],
        attrChangedAppointments: [{ type: core.Input, args: ['changedAppointments',] }],
        attrDisabled: [{ type: core.Input, args: ['disabled',] }],
        attrDate: [{ type: core.Input, args: ['date',] }],
        attrDayNameFormat: [{ type: core.Input, args: ['dayNameFormat',] }],
        attrEnableHover: [{ type: core.Input, args: ['enableHover',] }],
        attrEditDialog: [{ type: core.Input, args: ['editDialog',] }],
        attrEditDialogDateTimeFormatString: [{ type: core.Input, args: ['editDialogDateTimeFormatString',] }],
        attrEditDialogDateFormatString: [{ type: core.Input, args: ['editDialogDateFormatString',] }],
        attrEditDialogOpen: [{ type: core.Input, args: ['editDialogOpen',] }],
        attrEditDialogCreate: [{ type: core.Input, args: ['editDialogCreate',] }],
        attrEditDialogKeyDown: [{ type: core.Input, args: ['editDialogKeyDown',] }],
        attrEditDialogClose: [{ type: core.Input, args: ['editDialogClose',] }],
        attrExportSettings: [{ type: core.Input, args: ['exportSettings',] }],
        attrLegendPosition: [{ type: core.Input, args: ['legendPosition',] }],
        attrLegendHeight: [{ type: core.Input, args: ['legendHeight',] }],
        attrLocalization: [{ type: core.Input, args: ['localization',] }],
        attrMin: [{ type: core.Input, args: ['min',] }],
        attrMax: [{ type: core.Input, args: ['max',] }],
        attrReady: [{ type: core.Input, args: ['ready',] }],
        attrRenderAppointment: [{ type: core.Input, args: ['renderAppointment',] }],
        attrRendering: [{ type: core.Input, args: ['rendering',] }],
        attrRendered: [{ type: core.Input, args: ['rendered',] }],
        attrRtl: [{ type: core.Input, args: ['rtl',] }],
        attrResources: [{ type: core.Input, args: ['resources',] }],
        attrRowsHeight: [{ type: core.Input, args: ['rowsHeight',] }],
        attrShowToolbar: [{ type: core.Input, args: ['showToolbar',] }],
        attrShowLegend: [{ type: core.Input, args: ['showLegend',] }],
        attrScrollBarSize: [{ type: core.Input, args: ['scrollBarSize',] }],
        attrSource: [{ type: core.Input, args: ['source',] }],
        attrStatuses: [{ type: core.Input, args: ['statuses',] }],
        attrTouchRowsHeight: [{ type: core.Input, args: ['touchRowsHeight',] }],
        attrTheme: [{ type: core.Input, args: ['theme',] }],
        attrTouchAppointmentsMinHeight: [{ type: core.Input, args: ['touchAppointmentsMinHeight',] }],
        attrTouchScrollBarSize: [{ type: core.Input, args: ['touchScrollBarSize',] }],
        attrTimeZone: [{ type: core.Input, args: ['timeZone',] }],
        attrTouchDayNameFormat: [{ type: core.Input, args: ['touchDayNameFormat',] }],
        attrToolBarRangeFormat: [{ type: core.Input, args: ['toolBarRangeFormat',] }],
        attrToolBarRangeFormatAbbr: [{ type: core.Input, args: ['toolBarRangeFormatAbbr',] }],
        attrToolbarHeight: [{ type: core.Input, args: ['toolbarHeight',] }],
        attrViews: [{ type: core.Input, args: ['views',] }],
        attrView: [{ type: core.Input, args: ['view',] }],
        attrWidth: [{ type: core.Input, args: ['width',] }],
        attrHeight: [{ type: core.Input, args: ['height',] }],
        autoCreate: [{ type: core.Input, args: ['auto-create',] }],
        onAppointmentChange: [{ type: core.Output }],
        onAppointmentClick: [{ type: core.Output }],
        onAppointmentDoubleClick: [{ type: core.Output }],
        onAppointmentDelete: [{ type: core.Output }],
        onAppointmentAdd: [{ type: core.Output }],
        onBindingComplete: [{ type: core.Output }],
        onCellClick: [{ type: core.Output }],
        onCellDoubleClick: [{ type: core.Output }],
        onContextMenuOpen: [{ type: core.Output }],
        onContextMenuClose: [{ type: core.Output }],
        onContextMenuItemClick: [{ type: core.Output }],
        onContextMenuCreate: [{ type: core.Output }],
        onDateChange: [{ type: core.Output }],
        onEditRecurrenceDialogOpen: [{ type: core.Output }],
        onEditRecurrenceDialogClose: [{ type: core.Output }],
        onEditDialogCreate: [{ type: core.Output }],
        onEditDialogOpen: [{ type: core.Output }],
        onEditDialogClose: [{ type: core.Output }],
        onViewChange: [{ type: core.Output }]
    };

    var jqxSchedulerModule = /** @class */ (function () {
        function jqxSchedulerModule() {
        }
        return jqxSchedulerModule;
    }());
    jqxSchedulerModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [],
                    declarations: [jqxSchedulerComponent],
                    exports: [jqxSchedulerComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.jqxSchedulerComponent = jqxSchedulerComponent;
    exports.jqxSchedulerModule = jqxSchedulerModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
