require('../jqwidgets/jqxcore');
require('../jqwidgets/jqxdata');
require('../jqwidgets/jqxdata.export');
require('../jqwidgets/jqxdraw');
require('../jqwidgets/jqxchart.core');
require('../jqwidgets/jqxchart.api');
require('../jqwidgets/jqxchart.annotations');
require('../jqwidgets/jqxchart.rangeselector');
require('../jqwidgets/jqxchart.waterfall');
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('jqwidgets-ng/jqxchart', ['exports', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['jqwidgets-ng'] = global['jqwidgets-ng'] || {}, global['jqwidgets-ng'].jqxchart = {}), global.ng.core));
}(this, (function (exports, core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var jqxChartComponent = /** @class */ (function () {
        function jqxChartComponent(containerElement) {
            var _this = this;
            this.autoCreate = true;
            this.properties = ['title', 'description', 'source', 'showBorderLine', 'borderLineColor', 'borderLineWidth', 'backgroundColor', 'backgroundImage', 'showLegend', 'legendLayout', 'padding', 'titlePadding', 'colorScheme', 'greyScale', 'showToolTips', 'toolTipShowDelay', 'toolTipHideDelay', 'toolTipMoveDuration', 'drawBefore', 'draw', 'rtl', 'enableCrosshairs', 'crosshairsColor', 'crosshairsDashStyle', 'crosshairsLineWidth', 'columnSeriesOverlap', 'enabled', 'enableAnimations', 'animationDuration', 'enableAxisTextAnimation', 'renderEngine', 'xAxis', 'valueAxis', 'categoryAxis', 'seriesGroups'];
            // jqxChartComponent events
            this.onToggle = new core.EventEmitter();
            this.onClick = new core.EventEmitter();
            this.onRefreshBegin = new core.EventEmitter();
            this.onRefreshEnd = new core.EventEmitter();
            this.onRangeSelectionChanging = new core.EventEmitter();
            this.onRangeSelectionChanged = new core.EventEmitter();
            this.elementRef = containerElement;
            JQXLite(window).resize(function () {
                _this.__updateRect__();
            });
        }
        jqxChartComponent.prototype.ngOnInit = function () {
            if (this.autoCreate) {
                this.createComponent();
            }
        };
        ;
        jqxChartComponent.prototype.ngOnChanges = function (changes) {
            if (this.host) {
                if (changes.hasOwnProperty('attrWidth') || changes.hasOwnProperty('attrHeight')) {
                    this.__updateRect__();
                }
                for (var i = 0; i < this.properties.length; i++) {
                    var attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);
                    var areEqual = false;
                    if (this[attrName] !== undefined) {
                        if (typeof this[attrName] === 'object') {
                            if (this[attrName] instanceof Array) {
                                areEqual = this.arraysEqual(this[attrName], this.host.jqxChart(this.properties[i]));
                            }
                            if (areEqual) {
                                return false;
                            }
                            this.host.jqxChart(this.properties[i], this[attrName]);
                            continue;
                        }
                        if (this[attrName] !== this.host.jqxChart(this.properties[i])) {
                            this.host.jqxChart(this.properties[i], this[attrName]);
                        }
                    }
                }
            }
        };
        jqxChartComponent.prototype.arraysEqual = function (attrValue, hostValue) {
            if ((attrValue && !hostValue) || (!attrValue && hostValue)) {
                return false;
            }
            if (attrValue.length != hostValue.length) {
                return false;
            }
            for (var i = 0; i < attrValue.length; i++) {
                if (attrValue[i] !== hostValue[i]) {
                    return false;
                }
            }
            return true;
        };
        jqxChartComponent.prototype.manageAttributes = function () {
            var options = {};
            for (var i = 0; i < this.properties.length; i++) {
                var attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);
                if (this[attrName] !== undefined) {
                    options[this.properties[i]] = this[attrName];
                }
            }
            return options;
        };
        jqxChartComponent.prototype.moveClasses = function (parentEl, childEl) {
            var _a;
            var classes = parentEl.classList;
            if (classes.length > 0) {
                (_a = childEl.classList).add.apply(_a, __spread(classes));
            }
            parentEl.className = '';
        };
        jqxChartComponent.prototype.moveStyles = function (parentEl, childEl) {
            var style = parentEl.style.cssText;
            childEl.style.cssText = style;
            parentEl.style.cssText = '';
        };
        jqxChartComponent.prototype.createComponent = function (options) {
            if (this.host) {
                return;
            }
            if (options) {
                JQXLite.extend(options, this.manageAttributes());
            }
            else {
                options = this.manageAttributes();
            }
            this.host = JQXLite(this.elementRef.nativeElement.firstChild);
            this.moveClasses(this.elementRef.nativeElement, this.host[0]);
            this.moveStyles(this.elementRef.nativeElement, this.host[0]);
            this.__wireEvents__();
            this.widgetObject = jqwidgets.createInstance(this.host, 'jqxChart', options);
            this.__updateRect__();
        };
        jqxChartComponent.prototype.createWidget = function (options) {
            this.createComponent(options);
        };
        jqxChartComponent.prototype.__updateRect__ = function () {
            if (this.host)
                this.host.css({ width: this.attrWidth, height: this.attrHeight });
            this.refresh();
        };
        jqxChartComponent.prototype.setOptions = function (options) {
            this.host.jqxChart('setOptions', options);
        };
        // jqxChartComponent properties
        jqxChartComponent.prototype.title = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('title', arg);
            }
            else {
                return this.host.jqxChart('title');
            }
        };
        jqxChartComponent.prototype.description = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('description', arg);
            }
            else {
                return this.host.jqxChart('description');
            }
        };
        jqxChartComponent.prototype.source = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('source', arg);
            }
            else {
                return this.host.jqxChart('source');
            }
        };
        jqxChartComponent.prototype.showBorderLine = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('showBorderLine', arg);
            }
            else {
                return this.host.jqxChart('showBorderLine');
            }
        };
        jqxChartComponent.prototype.borderLineColor = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('borderLineColor', arg);
            }
            else {
                return this.host.jqxChart('borderLineColor');
            }
        };
        jqxChartComponent.prototype.borderLineWidth = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('borderLineWidth', arg);
            }
            else {
                return this.host.jqxChart('borderLineWidth');
            }
        };
        jqxChartComponent.prototype.backgroundColor = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('backgroundColor', arg);
            }
            else {
                return this.host.jqxChart('backgroundColor');
            }
        };
        jqxChartComponent.prototype.backgroundImage = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('backgroundImage', arg);
            }
            else {
                return this.host.jqxChart('backgroundImage');
            }
        };
        jqxChartComponent.prototype.showLegend = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('showLegend', arg);
            }
            else {
                return this.host.jqxChart('showLegend');
            }
        };
        jqxChartComponent.prototype.legendLayout = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('legendLayout', arg);
            }
            else {
                return this.host.jqxChart('legendLayout');
            }
        };
        jqxChartComponent.prototype.padding = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('padding', arg);
            }
            else {
                return this.host.jqxChart('padding');
            }
        };
        jqxChartComponent.prototype.titlePadding = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('titlePadding', arg);
            }
            else {
                return this.host.jqxChart('titlePadding');
            }
        };
        jqxChartComponent.prototype.colorScheme = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('colorScheme', arg);
            }
            else {
                return this.host.jqxChart('colorScheme');
            }
        };
        jqxChartComponent.prototype.greyScale = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('greyScale', arg);
            }
            else {
                return this.host.jqxChart('greyScale');
            }
        };
        jqxChartComponent.prototype.showToolTips = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('showToolTips', arg);
            }
            else {
                return this.host.jqxChart('showToolTips');
            }
        };
        jqxChartComponent.prototype.toolTipShowDelay = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('toolTipShowDelay', arg);
            }
            else {
                return this.host.jqxChart('toolTipShowDelay');
            }
        };
        jqxChartComponent.prototype.toolTipHideDelay = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('toolTipHideDelay', arg);
            }
            else {
                return this.host.jqxChart('toolTipHideDelay');
            }
        };
        jqxChartComponent.prototype.toolTipMoveDuration = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('toolTipMoveDuration', arg);
            }
            else {
                return this.host.jqxChart('toolTipMoveDuration');
            }
        };
        jqxChartComponent.prototype.drawBefore = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('drawBefore', arg);
            }
            else {
                return this.host.jqxChart('drawBefore');
            }
        };
        jqxChartComponent.prototype.draw = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('draw', arg);
            }
            else {
                return this.host.jqxChart('draw');
            }
        };
        jqxChartComponent.prototype.rtl = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('rtl', arg);
            }
            else {
                return this.host.jqxChart('rtl');
            }
        };
        jqxChartComponent.prototype.enableCrosshairs = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('enableCrosshairs', arg);
            }
            else {
                return this.host.jqxChart('enableCrosshairs');
            }
        };
        jqxChartComponent.prototype.crosshairsColor = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('crosshairsColor', arg);
            }
            else {
                return this.host.jqxChart('crosshairsColor');
            }
        };
        jqxChartComponent.prototype.crosshairsDashStyle = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('crosshairsDashStyle', arg);
            }
            else {
                return this.host.jqxChart('crosshairsDashStyle');
            }
        };
        jqxChartComponent.prototype.crosshairsLineWidth = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('crosshairsLineWidth', arg);
            }
            else {
                return this.host.jqxChart('crosshairsLineWidth');
            }
        };
        jqxChartComponent.prototype.columnSeriesOverlap = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('columnSeriesOverlap', arg);
            }
            else {
                return this.host.jqxChart('columnSeriesOverlap');
            }
        };
        jqxChartComponent.prototype.enabled = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('enabled', arg);
            }
            else {
                return this.host.jqxChart('enabled');
            }
        };
        jqxChartComponent.prototype.enableAnimations = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('enableAnimations', arg);
            }
            else {
                return this.host.jqxChart('enableAnimations');
            }
        };
        jqxChartComponent.prototype.animationDuration = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('animationDuration', arg);
            }
            else {
                return this.host.jqxChart('animationDuration');
            }
        };
        jqxChartComponent.prototype.enableAxisTextAnimation = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('enableAxisTextAnimation', arg);
            }
            else {
                return this.host.jqxChart('enableAxisTextAnimation');
            }
        };
        jqxChartComponent.prototype.renderEngine = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('renderEngine', arg);
            }
            else {
                return this.host.jqxChart('renderEngine');
            }
        };
        jqxChartComponent.prototype.xAxis = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('xAxis', arg);
            }
            else {
                return this.host.jqxChart('xAxis');
            }
        };
        jqxChartComponent.prototype.valueAxis = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('valueAxis', arg);
            }
            else {
                return this.host.jqxChart('valueAxis');
            }
        };
        jqxChartComponent.prototype.categoryAxis = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('categoryAxis', arg);
            }
            else {
                return this.host.jqxChart('categoryAxis');
            }
        };
        jqxChartComponent.prototype.seriesGroups = function (arg) {
            if (arg !== undefined) {
                this.host.jqxChart('seriesGroups', arg);
            }
            else {
                return this.host.jqxChart('seriesGroups');
            }
        };
        // jqxChartComponent functions
        jqxChartComponent.prototype.getInstance = function () {
            return this.host.jqxChart('getInstance');
        };
        jqxChartComponent.prototype.refresh = function () {
            this.host.jqxChart('refresh');
        };
        jqxChartComponent.prototype.update = function () {
            this.host.jqxChart('update');
        };
        jqxChartComponent.prototype.destroy = function () {
            this.host.jqxChart('destroy');
        };
        jqxChartComponent.prototype.addColorScheme = function (schemeName, colors) {
            this.host.jqxChart('addColorScheme', schemeName, colors);
        };
        jqxChartComponent.prototype.removeColorScheme = function (schemeName) {
            this.host.jqxChart('removeColorScheme', schemeName);
        };
        jqxChartComponent.prototype.getItemsCount = function (groupIndex, serieIndex) {
            return this.host.jqxChart('getItemsCount', groupIndex, serieIndex);
        };
        jqxChartComponent.prototype.getItemCoord = function (groupIndex, serieIndex, itemIndex) {
            return this.host.jqxChart('getItemCoord', groupIndex, serieIndex, itemIndex);
        };
        jqxChartComponent.prototype.getXAxisRect = function (groupIndex) {
            return this.host.jqxChart('getXAxisRect', groupIndex);
        };
        jqxChartComponent.prototype.getXAxisLabels = function (groupIndex) {
            return this.host.jqxChart('getXAxisLabels', groupIndex);
        };
        jqxChartComponent.prototype.getValueAxisRect = function (groupIndex) {
            return this.host.jqxChart('getValueAxisRect', groupIndex);
        };
        jqxChartComponent.prototype.getValueAxisLabels = function (groupIndex) {
            return this.host.jqxChart('getValueAxisLabels', groupIndex);
        };
        jqxChartComponent.prototype.getColorScheme = function (colorScheme) {
            return this.host.jqxChart('getColorScheme', colorScheme);
        };
        jqxChartComponent.prototype.hideSerie = function (groupIndex, serieIndex, itemIndex) {
            this.host.jqxChart('hideSerie', groupIndex, serieIndex, itemIndex);
        };
        jqxChartComponent.prototype.showSerie = function (groupIndex, serieIndex, itemIndex) {
            this.host.jqxChart('showSerie', groupIndex, serieIndex, itemIndex);
        };
        jqxChartComponent.prototype.hideToolTip = function (hideDelay) {
            this.host.jqxChart('hideToolTip', hideDelay);
        };
        jqxChartComponent.prototype.showToolTip = function (groupIndex, serieIndex, itemIndex, showDelay, hideDelay) {
            this.host.jqxChart('showToolTip', groupIndex, serieIndex, itemIndex, showDelay, hideDelay);
        };
        jqxChartComponent.prototype.saveAsJPEG = function (fileName, exportServerUrl) {
            this.host.jqxChart('saveAsJPEG', fileName, exportServerUrl);
        };
        jqxChartComponent.prototype.saveAsPNG = function (fileName, exportServerUrl) {
            this.host.jqxChart('saveAsPNG', fileName, exportServerUrl);
        };
        jqxChartComponent.prototype.saveAsPDF = function (fileName, exportServerUrl) {
            this.host.jqxChart('saveAsPDF', fileName, exportServerUrl);
        };
        jqxChartComponent.prototype.getXAxisValue = function (offset, groupIndex) {
            return this.host.jqxChart('getXAxisValue', offset, groupIndex);
        };
        jqxChartComponent.prototype.getValueAxisValue = function (offset, groupIndex) {
            return this.host.jqxChart('getValueAxisValue', offset, groupIndex);
        };
        jqxChartComponent.prototype.__wireEvents__ = function () {
            var _this = this;
            this.host.on('toggle', function (eventData) { _this.onToggle.emit(eventData); });
            this.host.on('click', function (eventData) { _this.onClick.emit(eventData); });
            this.host.on('refreshBegin', function (eventData) { _this.onRefreshBegin.emit(eventData); });
            this.host.on('refreshEnd', function (eventData) { _this.onRefreshEnd.emit(eventData); });
            this.host.on('rangeSelectionChanging', function (eventData) { _this.onRangeSelectionChanging.emit(eventData); });
            this.host.on('rangeSelectionChanged', function (eventData) { _this.onRangeSelectionChanged.emit(eventData); });
        };
        return jqxChartComponent;
    }()); //jqxChartComponent
    jqxChartComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'jqxChart',
                    template: '<div><ng-content></ng-content></div>'
                },] }
    ];
    jqxChartComponent.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    jqxChartComponent.propDecorators = {
        attrTitle: [{ type: core.Input, args: ['title',] }],
        attrDescription: [{ type: core.Input, args: ['description',] }],
        attrSource: [{ type: core.Input, args: ['source',] }],
        attrShowBorderLine: [{ type: core.Input, args: ['showBorderLine',] }],
        attrBorderLineColor: [{ type: core.Input, args: ['borderLineColor',] }],
        attrBorderLineWidth: [{ type: core.Input, args: ['borderLineWidth',] }],
        attrBackgroundColor: [{ type: core.Input, args: ['backgroundColor',] }],
        attrBackgroundImage: [{ type: core.Input, args: ['backgroundImage',] }],
        attrShowLegend: [{ type: core.Input, args: ['showLegend',] }],
        attrLegendLayout: [{ type: core.Input, args: ['legendLayout',] }],
        attrPadding: [{ type: core.Input, args: ['padding',] }],
        attrTitlePadding: [{ type: core.Input, args: ['titlePadding',] }],
        attrColorScheme: [{ type: core.Input, args: ['colorScheme',] }],
        attrGreyScale: [{ type: core.Input, args: ['greyScale',] }],
        attrShowToolTips: [{ type: core.Input, args: ['showToolTips',] }],
        attrToolTipShowDelay: [{ type: core.Input, args: ['toolTipShowDelay',] }],
        attrToolTipHideDelay: [{ type: core.Input, args: ['toolTipHideDelay',] }],
        attrToolTipMoveDuration: [{ type: core.Input, args: ['toolTipMoveDuration',] }],
        attrDrawBefore: [{ type: core.Input, args: ['drawBefore',] }],
        attrDraw: [{ type: core.Input, args: ['draw',] }],
        attrRtl: [{ type: core.Input, args: ['rtl',] }],
        attrEnableCrosshairs: [{ type: core.Input, args: ['enableCrosshairs',] }],
        attrCrosshairsColor: [{ type: core.Input, args: ['crosshairsColor',] }],
        attrCrosshairsDashStyle: [{ type: core.Input, args: ['crosshairsDashStyle',] }],
        attrCrosshairsLineWidth: [{ type: core.Input, args: ['crosshairsLineWidth',] }],
        attrColumnSeriesOverlap: [{ type: core.Input, args: ['columnSeriesOverlap',] }],
        attrEnabled: [{ type: core.Input, args: ['enabled',] }],
        attrEnableAnimations: [{ type: core.Input, args: ['enableAnimations',] }],
        attrAnimationDuration: [{ type: core.Input, args: ['animationDuration',] }],
        attrEnableAxisTextAnimation: [{ type: core.Input, args: ['enableAxisTextAnimation',] }],
        attrRenderEngine: [{ type: core.Input, args: ['renderEngine',] }],
        attrXAxis: [{ type: core.Input, args: ['xAxis',] }],
        attrValueAxis: [{ type: core.Input, args: ['valueAxis',] }],
        attrCategoryAxis: [{ type: core.Input, args: ['categoryAxis',] }],
        attrSeriesGroups: [{ type: core.Input, args: ['seriesGroups',] }],
        attrWidth: [{ type: core.Input, args: ['width',] }],
        attrHeight: [{ type: core.Input, args: ['height',] }],
        autoCreate: [{ type: core.Input, args: ['auto-create',] }],
        onToggle: [{ type: core.Output }],
        onClick: [{ type: core.Output }],
        onRefreshBegin: [{ type: core.Output }],
        onRefreshEnd: [{ type: core.Output }],
        onRangeSelectionChanging: [{ type: core.Output }],
        onRangeSelectionChanged: [{ type: core.Output }]
    };

    var jqxChartModule = /** @class */ (function () {
        function jqxChartModule() {
        }
        return jqxChartModule;
    }());
    jqxChartModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [],
                    declarations: [jqxChartComponent],
                    exports: [jqxChartComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.jqxChartComponent = jqxChartComponent;
    exports.jqxChartModule = jqxChartModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
