require('../jqwidgets/jqxcore');
require('../jqwidgets/jqxdata');
require('../jqwidgets/jqxdata.export');
require('../jqwidgets/jqxbuttons');
require('../jqwidgets/jqxbuttongroup');
require('../jqwidgets/jqxscrollbar');
require('../jqwidgets/jqxmenu');
require('../jqwidgets/jqxlistbox');
require('../jqwidgets/jqxdropdownlist');
require('../jqwidgets/jqxcombobox');
require('../jqwidgets/jqxnumberinput');
require('../jqwidgets/jqxcheckbox');
require('../jqwidgets/globalization/globalize');
require('../jqwidgets/jqxcalendar');
require('../jqwidgets/jqxdatetimeinput');
require('../jqwidgets/jqxgrid');
require('../jqwidgets/jqxgrid.edit');
require('../jqwidgets/jqxgrid.pager');
require('../jqwidgets/jqxgrid.selection');
require('../jqwidgets/jqxgrid.filter');
require('../jqwidgets/jqxgrid.sort');
require('../jqwidgets/jqxgrid.storage');
require('../jqwidgets/jqxgrid.grouping');
require('../jqwidgets/jqxgrid.export');
require('../jqwidgets/jqxgrid.columnsresize');
require('../jqwidgets/jqxgrid.columnsreorder');
require('../jqwidgets/jqxgrid.aggregates');
require('../jqwidgets/jqxgrid.chart');
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('jqwidgets-ng/jqxgrid', ['exports', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['jqwidgets-ng'] = global['jqwidgets-ng'] || {}, global['jqwidgets-ng'].jqxgrid = {}), global.ng.core));
}(this, (function (exports, core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var jqxGridComponent = /** @class */ (function () {
        function jqxGridComponent(containerElement) {
            this.autoCreate = true;
            this.properties = ['altrows', 'altstart', 'altstep', 'autoshowloadelement', 'autoshowfiltericon', 'autoshowcolumnsmenubutton', 'showcolumnlines', 'showrowlines', 'showcolumnheaderlines', 'adaptive', 'adaptivewidth', 'clipboard', 'closeablegroups', 'columnsmenuwidth', 'columnmenuopening', 'columnmenuclosing', 'cellhover', 'enablekeyboarddelete', 'enableellipsis', 'enablemousewheel', 'enableanimations', 'enabletooltips', 'enablehover', 'enablebrowserselection', 'everpresentrowposition', 'everpresentrowheight', 'everpresentrowactions', 'everpresentrowactionsmode', 'filterrowheight', 'filtermode', 'groupsrenderer', 'groupcolumnrenderer', 'groupsexpandedbydefault', 'handlekeyboardnavigation', 'pagerrenderer', 'rtl', 'showdefaultloadelement', 'showfiltercolumnbackground', 'showfiltermenuitems', 'showpinnedcolumnbackground', 'showsortcolumnbackground', 'showsortmenuitems', 'showgroupmenuitems', 'showrowdetailscolumn', 'showheader', 'showgroupsheader', 'showaggregates', 'showgroupaggregates', 'showeverpresentrow', 'showfilterrow', 'showemptyrow', 'showstatusbar', 'statusbarheight', 'showtoolbar', 'showfilterbar', 'filterbarmode', 'selectionmode', 'updatefilterconditions', 'updatefilterpanel', 'theme', 'toolbarheight', 'autoheight', 'autorowheight', 'columnsheight', 'deferreddatafields', 'groupsheaderheight', 'groupindentwidth', 'height', 'pagerheight', 'rowsheight', 'scrollbarsize', 'scrollmode', 'scrollfeedback', 'width', 'autosavestate', 'autoloadstate', 'columns', 'cardview', 'cardviewcolumns', 'cardheight', 'cardsize', 'columngroups', 'columnsmenu', 'columnsresize', 'columnsautoresize', 'columnsreorder', 'charting', 'disabled', 'editable', 'editmode', 'filter', 'filterable', 'groupable', 'groups', 'horizontalscrollbarstep', 'horizontalscrollbarlargestep', 'initrowdetails', 'keyboardnavigation', 'localization', 'pagesize', 'pagesizeoptions', 'pagermode', 'pagerbuttonscount', 'pageable', 'autofill', 'rowdetails', 'rowdetailstemplate', 'ready', 'rendered', 'renderstatusbar', 'rendertoolbar', 'rendergridrows', 'sortable', 'sortmode', 'selectedrowindex', 'selectedrowindexes', 'source', 'sorttogglestates', 'updatedelay', 'virtualmode', 'verticalscrollbarstep', 'verticalscrollbarlargestep'];
            // jqxGridComponent events
            this.onBindingcomplete = new core.EventEmitter();
            this.onColumnresized = new core.EventEmitter();
            this.onColumnreordered = new core.EventEmitter();
            this.onColumnclick = new core.EventEmitter();
            this.onCellclick = new core.EventEmitter();
            this.onCelldoubleclick = new core.EventEmitter();
            this.onCellselect = new core.EventEmitter();
            this.onCellunselect = new core.EventEmitter();
            this.onCellvaluechanged = new core.EventEmitter();
            this.onCellbeginedit = new core.EventEmitter();
            this.onCellendedit = new core.EventEmitter();
            this.onFilter = new core.EventEmitter();
            this.onGroupschanged = new core.EventEmitter();
            this.onGroupexpand = new core.EventEmitter();
            this.onGroupcollapse = new core.EventEmitter();
            this.onPagechanged = new core.EventEmitter();
            this.onPagesizechanged = new core.EventEmitter();
            this.onRowclick = new core.EventEmitter();
            this.onRowdoubleclick = new core.EventEmitter();
            this.onRowselect = new core.EventEmitter();
            this.onRowunselect = new core.EventEmitter();
            this.onRowexpand = new core.EventEmitter();
            this.onRowcollapse = new core.EventEmitter();
            this.onSort = new core.EventEmitter();
            this.elementRef = containerElement;
        }
        jqxGridComponent.prototype.ngOnInit = function () {
        };
        ;
        jqxGridComponent.prototype.ngAfterViewInit = function () {
            var children = JQXLite(this.elementRef.nativeElement.children).find('tr');
            var html = '';
            var options = {};
            if (children.length > 0) {
                this.container = document.createElement('div');
                html = this.elementRef.nativeElement.innerHTML;
                this.container.appendChild(this.elementRef.nativeElement.firstChild);
                this.elementRef.nativeElement.innerHTML = html;
                this.content = html;
                var result = JQXLite.jqx.parseSourceTag(this.container);
                if (this['attrColumns'] !== undefined) {
                    ;
                    options['source'] = result.source;
                }
                else {
                    options['source'] = result.source;
                    options['columns'] = result.columns;
                }
            }
            if (this.autoCreate) {
                this.createComponent(options);
            }
        };
        ;
        jqxGridComponent.prototype.ngAfterViewChecked = function () {
            if (this.container) {
                if (this.content !== this.container.innerHTML) {
                    this.content = this.container.innerHTML;
                    var result = JQXLite.jqx.parseSourceTag(this.container);
                    var columns = this.host.jqxGrid('columns');
                    if (columns.length === 0) {
                        this.host.jqxGrid({ source: result.source, columns: result.columns });
                    }
                    else {
                        this.host.jqxGrid({ source: result.source });
                    }
                }
            }
        };
        ;
        jqxGridComponent.prototype.ngOnChanges = function (changes) {
            if (this.host) {
                for (var i = 0; i < this.properties.length; i++) {
                    var attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);
                    var areEqual = false;
                    if (this[attrName] !== undefined) {
                        if (typeof this[attrName] === 'object') {
                            if (this[attrName] instanceof Array) {
                                areEqual = this.arraysEqual(this[attrName], this.host.jqxGrid(this.properties[i]));
                            }
                            if (areEqual) {
                                return false;
                            }
                            this.host.jqxGrid(this.properties[i], this[attrName]);
                            continue;
                        }
                        if (this[attrName] !== this.host.jqxGrid(this.properties[i])) {
                            this.host.jqxGrid(this.properties[i], this[attrName]);
                        }
                    }
                }
            }
        };
        jqxGridComponent.prototype.arraysEqual = function (attrValue, hostValue) {
            if ((attrValue && !hostValue) || (!attrValue && hostValue)) {
                return false;
            }
            if (attrValue.length != hostValue.length) {
                return false;
            }
            for (var i = 0; i < attrValue.length; i++) {
                if (attrValue[i] !== hostValue[i]) {
                    return false;
                }
            }
            return true;
        };
        jqxGridComponent.prototype.manageAttributes = function () {
            var options = {};
            for (var i = 0; i < this.properties.length; i++) {
                var attrName = 'attr' + this.properties[i].substring(0, 1).toUpperCase() + this.properties[i].substring(1);
                if (this[attrName] !== undefined) {
                    options[this.properties[i]] = this[attrName];
                }
            }
            return options;
        };
        jqxGridComponent.prototype.moveClasses = function (parentEl, childEl) {
            var _a;
            var classes = parentEl.classList;
            if (classes.length > 0) {
                (_a = childEl.classList).add.apply(_a, __spread(classes));
            }
            parentEl.className = '';
        };
        jqxGridComponent.prototype.moveStyles = function (parentEl, childEl) {
            var style = parentEl.style.cssText;
            childEl.style.cssText = style;
            parentEl.style.cssText = '';
        };
        jqxGridComponent.prototype.createComponent = function (options) {
            if (this.host) {
                return;
            }
            if (options) {
                JQXLite.extend(options, this.manageAttributes());
            }
            else {
                options = this.manageAttributes();
            }
            this.host = JQXLite(this.elementRef.nativeElement.firstChild);
            this.moveClasses(this.elementRef.nativeElement, this.host[0]);
            this.moveStyles(this.elementRef.nativeElement, this.host[0]);
            this.__wireEvents__();
            this.widgetObject = jqwidgets.createInstance(this.host, 'jqxGrid', options);
        };
        jqxGridComponent.prototype.createWidget = function (options) {
            this.createComponent(options);
        };
        jqxGridComponent.prototype.__updateRect__ = function () {
            if (this.host)
                this.host.css({ width: this.attrWidth, height: this.attrHeight });
        };
        jqxGridComponent.prototype.setOptions = function (options) {
            this.host.jqxGrid('setOptions', options);
        };
        // jqxGridComponent properties
        jqxGridComponent.prototype.altrows = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('altrows', arg);
            }
            else {
                return this.host.jqxGrid('altrows');
            }
        };
        jqxGridComponent.prototype.altstart = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('altstart', arg);
            }
            else {
                return this.host.jqxGrid('altstart');
            }
        };
        jqxGridComponent.prototype.altstep = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('altstep', arg);
            }
            else {
                return this.host.jqxGrid('altstep');
            }
        };
        jqxGridComponent.prototype.autoshowloadelement = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('autoshowloadelement', arg);
            }
            else {
                return this.host.jqxGrid('autoshowloadelement');
            }
        };
        jqxGridComponent.prototype.autoshowfiltericon = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('autoshowfiltericon', arg);
            }
            else {
                return this.host.jqxGrid('autoshowfiltericon');
            }
        };
        jqxGridComponent.prototype.autoshowcolumnsmenubutton = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('autoshowcolumnsmenubutton', arg);
            }
            else {
                return this.host.jqxGrid('autoshowcolumnsmenubutton');
            }
        };
        jqxGridComponent.prototype.showcolumnlines = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showcolumnlines', arg);
            }
            else {
                return this.host.jqxGrid('showcolumnlines');
            }
        };
        jqxGridComponent.prototype.showrowlines = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showrowlines', arg);
            }
            else {
                return this.host.jqxGrid('showrowlines');
            }
        };
        jqxGridComponent.prototype.showcolumnheaderlines = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showcolumnheaderlines', arg);
            }
            else {
                return this.host.jqxGrid('showcolumnheaderlines');
            }
        };
        jqxGridComponent.prototype.adaptive = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('adaptive', arg);
            }
            else {
                return this.host.jqxGrid('adaptive');
            }
        };
        jqxGridComponent.prototype.adaptivewidth = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('adaptivewidth', arg);
            }
            else {
                return this.host.jqxGrid('adaptivewidth');
            }
        };
        jqxGridComponent.prototype.clipboard = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('clipboard', arg);
            }
            else {
                return this.host.jqxGrid('clipboard');
            }
        };
        jqxGridComponent.prototype.closeablegroups = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('closeablegroups', arg);
            }
            else {
                return this.host.jqxGrid('closeablegroups');
            }
        };
        jqxGridComponent.prototype.columnsmenuwidth = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('columnsmenuwidth', arg);
            }
            else {
                return this.host.jqxGrid('columnsmenuwidth');
            }
        };
        jqxGridComponent.prototype.columnmenuopening = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('columnmenuopening', arg);
            }
            else {
                return this.host.jqxGrid('columnmenuopening');
            }
        };
        jqxGridComponent.prototype.columnmenuclosing = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('columnmenuclosing', arg);
            }
            else {
                return this.host.jqxGrid('columnmenuclosing');
            }
        };
        jqxGridComponent.prototype.cellhover = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('cellhover', arg);
            }
            else {
                return this.host.jqxGrid('cellhover');
            }
        };
        jqxGridComponent.prototype.enablekeyboarddelete = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('enablekeyboarddelete', arg);
            }
            else {
                return this.host.jqxGrid('enablekeyboarddelete');
            }
        };
        jqxGridComponent.prototype.enableellipsis = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('enableellipsis', arg);
            }
            else {
                return this.host.jqxGrid('enableellipsis');
            }
        };
        jqxGridComponent.prototype.enablemousewheel = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('enablemousewheel', arg);
            }
            else {
                return this.host.jqxGrid('enablemousewheel');
            }
        };
        jqxGridComponent.prototype.enableanimations = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('enableanimations', arg);
            }
            else {
                return this.host.jqxGrid('enableanimations');
            }
        };
        jqxGridComponent.prototype.enabletooltips = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('enabletooltips', arg);
            }
            else {
                return this.host.jqxGrid('enabletooltips');
            }
        };
        jqxGridComponent.prototype.enablehover = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('enablehover', arg);
            }
            else {
                return this.host.jqxGrid('enablehover');
            }
        };
        jqxGridComponent.prototype.enablebrowserselection = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('enablebrowserselection', arg);
            }
            else {
                return this.host.jqxGrid('enablebrowserselection');
            }
        };
        jqxGridComponent.prototype.everpresentrowposition = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('everpresentrowposition', arg);
            }
            else {
                return this.host.jqxGrid('everpresentrowposition');
            }
        };
        jqxGridComponent.prototype.everpresentrowheight = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('everpresentrowheight', arg);
            }
            else {
                return this.host.jqxGrid('everpresentrowheight');
            }
        };
        jqxGridComponent.prototype.everpresentrowactions = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('everpresentrowactions', arg);
            }
            else {
                return this.host.jqxGrid('everpresentrowactions');
            }
        };
        jqxGridComponent.prototype.everpresentrowactionsmode = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('everpresentrowactionsmode', arg);
            }
            else {
                return this.host.jqxGrid('everpresentrowactionsmode');
            }
        };
        jqxGridComponent.prototype.filterrowheight = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('filterrowheight', arg);
            }
            else {
                return this.host.jqxGrid('filterrowheight');
            }
        };
        jqxGridComponent.prototype.filtermode = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('filtermode', arg);
            }
            else {
                return this.host.jqxGrid('filtermode');
            }
        };
        jqxGridComponent.prototype.groupsrenderer = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('groupsrenderer', arg);
            }
            else {
                return this.host.jqxGrid('groupsrenderer');
            }
        };
        jqxGridComponent.prototype.groupcolumnrenderer = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('groupcolumnrenderer', arg);
            }
            else {
                return this.host.jqxGrid('groupcolumnrenderer');
            }
        };
        jqxGridComponent.prototype.groupsexpandedbydefault = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('groupsexpandedbydefault', arg);
            }
            else {
                return this.host.jqxGrid('groupsexpandedbydefault');
            }
        };
        jqxGridComponent.prototype.handlekeyboardnavigation = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('handlekeyboardnavigation', arg);
            }
            else {
                return this.host.jqxGrid('handlekeyboardnavigation');
            }
        };
        jqxGridComponent.prototype.pagerrenderer = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('pagerrenderer', arg);
            }
            else {
                return this.host.jqxGrid('pagerrenderer');
            }
        };
        jqxGridComponent.prototype.rtl = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('rtl', arg);
            }
            else {
                return this.host.jqxGrid('rtl');
            }
        };
        jqxGridComponent.prototype.showdefaultloadelement = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showdefaultloadelement', arg);
            }
            else {
                return this.host.jqxGrid('showdefaultloadelement');
            }
        };
        jqxGridComponent.prototype.showfiltercolumnbackground = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showfiltercolumnbackground', arg);
            }
            else {
                return this.host.jqxGrid('showfiltercolumnbackground');
            }
        };
        jqxGridComponent.prototype.showfiltermenuitems = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showfiltermenuitems', arg);
            }
            else {
                return this.host.jqxGrid('showfiltermenuitems');
            }
        };
        jqxGridComponent.prototype.showpinnedcolumnbackground = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showpinnedcolumnbackground', arg);
            }
            else {
                return this.host.jqxGrid('showpinnedcolumnbackground');
            }
        };
        jqxGridComponent.prototype.showsortcolumnbackground = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showsortcolumnbackground', arg);
            }
            else {
                return this.host.jqxGrid('showsortcolumnbackground');
            }
        };
        jqxGridComponent.prototype.showsortmenuitems = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showsortmenuitems', arg);
            }
            else {
                return this.host.jqxGrid('showsortmenuitems');
            }
        };
        jqxGridComponent.prototype.showgroupmenuitems = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showgroupmenuitems', arg);
            }
            else {
                return this.host.jqxGrid('showgroupmenuitems');
            }
        };
        jqxGridComponent.prototype.showrowdetailscolumn = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showrowdetailscolumn', arg);
            }
            else {
                return this.host.jqxGrid('showrowdetailscolumn');
            }
        };
        jqxGridComponent.prototype.showheader = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showheader', arg);
            }
            else {
                return this.host.jqxGrid('showheader');
            }
        };
        jqxGridComponent.prototype.showgroupsheader = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showgroupsheader', arg);
            }
            else {
                return this.host.jqxGrid('showgroupsheader');
            }
        };
        jqxGridComponent.prototype.showaggregates = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showaggregates', arg);
            }
            else {
                return this.host.jqxGrid('showaggregates');
            }
        };
        jqxGridComponent.prototype.showgroupaggregates = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showgroupaggregates', arg);
            }
            else {
                return this.host.jqxGrid('showgroupaggregates');
            }
        };
        jqxGridComponent.prototype.showeverpresentrow = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showeverpresentrow', arg);
            }
            else {
                return this.host.jqxGrid('showeverpresentrow');
            }
        };
        jqxGridComponent.prototype.showfilterrow = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showfilterrow', arg);
            }
            else {
                return this.host.jqxGrid('showfilterrow');
            }
        };
        jqxGridComponent.prototype.showemptyrow = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showemptyrow', arg);
            }
            else {
                return this.host.jqxGrid('showemptyrow');
            }
        };
        jqxGridComponent.prototype.showstatusbar = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showstatusbar', arg);
            }
            else {
                return this.host.jqxGrid('showstatusbar');
            }
        };
        jqxGridComponent.prototype.statusbarheight = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('statusbarheight', arg);
            }
            else {
                return this.host.jqxGrid('statusbarheight');
            }
        };
        jqxGridComponent.prototype.showtoolbar = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showtoolbar', arg);
            }
            else {
                return this.host.jqxGrid('showtoolbar');
            }
        };
        jqxGridComponent.prototype.showfilterbar = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('showfilterbar', arg);
            }
            else {
                return this.host.jqxGrid('showfilterbar');
            }
        };
        jqxGridComponent.prototype.filterbarmode = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('filterbarmode', arg);
            }
            else {
                return this.host.jqxGrid('filterbarmode');
            }
        };
        jqxGridComponent.prototype.selectionmode = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('selectionmode', arg);
            }
            else {
                return this.host.jqxGrid('selectionmode');
            }
        };
        jqxGridComponent.prototype.updatefilterconditions = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('updatefilterconditions', arg);
            }
            else {
                return this.host.jqxGrid('updatefilterconditions');
            }
        };
        jqxGridComponent.prototype.updatefilterpanel = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('updatefilterpanel', arg);
            }
            else {
                return this.host.jqxGrid('updatefilterpanel');
            }
        };
        jqxGridComponent.prototype.theme = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('theme', arg);
            }
            else {
                return this.host.jqxGrid('theme');
            }
        };
        jqxGridComponent.prototype.toolbarheight = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('toolbarheight', arg);
            }
            else {
                return this.host.jqxGrid('toolbarheight');
            }
        };
        jqxGridComponent.prototype.autoheight = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('autoheight', arg);
            }
            else {
                return this.host.jqxGrid('autoheight');
            }
        };
        jqxGridComponent.prototype.autorowheight = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('autorowheight', arg);
            }
            else {
                return this.host.jqxGrid('autorowheight');
            }
        };
        jqxGridComponent.prototype.columnsheight = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('columnsheight', arg);
            }
            else {
                return this.host.jqxGrid('columnsheight');
            }
        };
        jqxGridComponent.prototype.deferreddatafields = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('deferreddatafields', arg);
            }
            else {
                return this.host.jqxGrid('deferreddatafields');
            }
        };
        jqxGridComponent.prototype.groupsheaderheight = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('groupsheaderheight', arg);
            }
            else {
                return this.host.jqxGrid('groupsheaderheight');
            }
        };
        jqxGridComponent.prototype.groupindentwidth = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('groupindentwidth', arg);
            }
            else {
                return this.host.jqxGrid('groupindentwidth');
            }
        };
        jqxGridComponent.prototype.height = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('height', arg);
            }
            else {
                return this.host.jqxGrid('height');
            }
        };
        jqxGridComponent.prototype.pagerheight = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('pagerheight', arg);
            }
            else {
                return this.host.jqxGrid('pagerheight');
            }
        };
        jqxGridComponent.prototype.rowsheight = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('rowsheight', arg);
            }
            else {
                return this.host.jqxGrid('rowsheight');
            }
        };
        jqxGridComponent.prototype.scrollbarsize = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('scrollbarsize', arg);
            }
            else {
                return this.host.jqxGrid('scrollbarsize');
            }
        };
        jqxGridComponent.prototype.scrollmode = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('scrollmode', arg);
            }
            else {
                return this.host.jqxGrid('scrollmode');
            }
        };
        jqxGridComponent.prototype.scrollfeedback = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('scrollfeedback', arg);
            }
            else {
                return this.host.jqxGrid('scrollfeedback');
            }
        };
        jqxGridComponent.prototype.width = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('width', arg);
            }
            else {
                return this.host.jqxGrid('width');
            }
        };
        jqxGridComponent.prototype.autosavestate = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('autosavestate', arg);
            }
            else {
                return this.host.jqxGrid('autosavestate');
            }
        };
        jqxGridComponent.prototype.autoloadstate = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('autoloadstate', arg);
            }
            else {
                return this.host.jqxGrid('autoloadstate');
            }
        };
        jqxGridComponent.prototype.columns = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('columns', arg);
            }
            else {
                return this.host.jqxGrid('columns');
            }
        };
        jqxGridComponent.prototype.cardview = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('cardview', arg);
            }
            else {
                return this.host.jqxGrid('cardview');
            }
        };
        jqxGridComponent.prototype.cardviewcolumns = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('cardviewcolumns', arg);
            }
            else {
                return this.host.jqxGrid('cardviewcolumns');
            }
        };
        jqxGridComponent.prototype.cardheight = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('cardheight', arg);
            }
            else {
                return this.host.jqxGrid('cardheight');
            }
        };
        jqxGridComponent.prototype.cardsize = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('cardsize', arg);
            }
            else {
                return this.host.jqxGrid('cardsize');
            }
        };
        jqxGridComponent.prototype.columngroups = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('columngroups', arg);
            }
            else {
                return this.host.jqxGrid('columngroups');
            }
        };
        jqxGridComponent.prototype.columnsmenu = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('columnsmenu', arg);
            }
            else {
                return this.host.jqxGrid('columnsmenu');
            }
        };
        jqxGridComponent.prototype.columnsresize = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('columnsresize', arg);
            }
            else {
                return this.host.jqxGrid('columnsresize');
            }
        };
        jqxGridComponent.prototype.columnsautoresize = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('columnsautoresize', arg);
            }
            else {
                return this.host.jqxGrid('columnsautoresize');
            }
        };
        jqxGridComponent.prototype.columnsreorder = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('columnsreorder', arg);
            }
            else {
                return this.host.jqxGrid('columnsreorder');
            }
        };
        jqxGridComponent.prototype.charting = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('charting', arg);
            }
            else {
                return this.host.jqxGrid('charting');
            }
        };
        jqxGridComponent.prototype.disabled = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('disabled', arg);
            }
            else {
                return this.host.jqxGrid('disabled');
            }
        };
        jqxGridComponent.prototype.editable = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('editable', arg);
            }
            else {
                return this.host.jqxGrid('editable');
            }
        };
        jqxGridComponent.prototype.editmode = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('editmode', arg);
            }
            else {
                return this.host.jqxGrid('editmode');
            }
        };
        jqxGridComponent.prototype.filter = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('filter', arg);
            }
            else {
                return this.host.jqxGrid('filter');
            }
        };
        jqxGridComponent.prototype.filterable = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('filterable', arg);
            }
            else {
                return this.host.jqxGrid('filterable');
            }
        };
        jqxGridComponent.prototype.groupable = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('groupable', arg);
            }
            else {
                return this.host.jqxGrid('groupable');
            }
        };
        jqxGridComponent.prototype.groups = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('groups', arg);
            }
            else {
                return this.host.jqxGrid('groups');
            }
        };
        jqxGridComponent.prototype.horizontalscrollbarstep = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('horizontalscrollbarstep', arg);
            }
            else {
                return this.host.jqxGrid('horizontalscrollbarstep');
            }
        };
        jqxGridComponent.prototype.horizontalscrollbarlargestep = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('horizontalscrollbarlargestep', arg);
            }
            else {
                return this.host.jqxGrid('horizontalscrollbarlargestep');
            }
        };
        jqxGridComponent.prototype.initrowdetails = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('initrowdetails', arg);
            }
            else {
                return this.host.jqxGrid('initrowdetails');
            }
        };
        jqxGridComponent.prototype.keyboardnavigation = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('keyboardnavigation', arg);
            }
            else {
                return this.host.jqxGrid('keyboardnavigation');
            }
        };
        jqxGridComponent.prototype.localization = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('localization', arg);
            }
            else {
                return this.host.jqxGrid('localization');
            }
        };
        jqxGridComponent.prototype.pagesize = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('pagesize', arg);
            }
            else {
                return this.host.jqxGrid('pagesize');
            }
        };
        jqxGridComponent.prototype.pagesizeoptions = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('pagesizeoptions', arg);
            }
            else {
                return this.host.jqxGrid('pagesizeoptions');
            }
        };
        jqxGridComponent.prototype.pagermode = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('pagermode', arg);
            }
            else {
                return this.host.jqxGrid('pagermode');
            }
        };
        jqxGridComponent.prototype.pagerbuttonscount = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('pagerbuttonscount', arg);
            }
            else {
                return this.host.jqxGrid('pagerbuttonscount');
            }
        };
        jqxGridComponent.prototype.pageable = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('pageable', arg);
            }
            else {
                return this.host.jqxGrid('pageable');
            }
        };
        jqxGridComponent.prototype.autofill = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('autofill', arg);
            }
            else {
                return this.host.jqxGrid('autofill');
            }
        };
        jqxGridComponent.prototype.rowdetails = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('rowdetails', arg);
            }
            else {
                return this.host.jqxGrid('rowdetails');
            }
        };
        jqxGridComponent.prototype.rowdetailstemplate = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('rowdetailstemplate', arg);
            }
            else {
                return this.host.jqxGrid('rowdetailstemplate');
            }
        };
        jqxGridComponent.prototype.ready = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('ready', arg);
            }
            else {
                return this.host.jqxGrid('ready');
            }
        };
        jqxGridComponent.prototype.rendered = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('rendered', arg);
            }
            else {
                return this.host.jqxGrid('rendered');
            }
        };
        jqxGridComponent.prototype.renderstatusbar = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('renderstatusbar', arg);
            }
            else {
                return this.host.jqxGrid('renderstatusbar');
            }
        };
        jqxGridComponent.prototype.rendertoolbar = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('rendertoolbar', arg);
            }
            else {
                return this.host.jqxGrid('rendertoolbar');
            }
        };
        jqxGridComponent.prototype.rendergridrows = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('rendergridrows', arg);
            }
            else {
                return this.host.jqxGrid('rendergridrows');
            }
        };
        jqxGridComponent.prototype.sortable = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('sortable', arg);
            }
            else {
                return this.host.jqxGrid('sortable');
            }
        };
        jqxGridComponent.prototype.sortmode = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('sortmode', arg);
            }
            else {
                return this.host.jqxGrid('sortmode');
            }
        };
        jqxGridComponent.prototype.selectedrowindex = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('selectedrowindex', arg);
            }
            else {
                return this.host.jqxGrid('selectedrowindex');
            }
        };
        jqxGridComponent.prototype.selectedrowindexes = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('selectedrowindexes', arg);
            }
            else {
                return this.host.jqxGrid('selectedrowindexes');
            }
        };
        jqxGridComponent.prototype.source = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('source', arg);
            }
            else {
                return this.host.jqxGrid('source');
            }
        };
        jqxGridComponent.prototype.sorttogglestates = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('sorttogglestates', arg);
            }
            else {
                return this.host.jqxGrid('sorttogglestates');
            }
        };
        jqxGridComponent.prototype.updatedelay = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('updatedelay', arg);
            }
            else {
                return this.host.jqxGrid('updatedelay');
            }
        };
        jqxGridComponent.prototype.virtualmode = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('virtualmode', arg);
            }
            else {
                return this.host.jqxGrid('virtualmode');
            }
        };
        jqxGridComponent.prototype.verticalscrollbarstep = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('verticalscrollbarstep', arg);
            }
            else {
                return this.host.jqxGrid('verticalscrollbarstep');
            }
        };
        jqxGridComponent.prototype.verticalscrollbarlargestep = function (arg) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            if (arg !== undefined) {
                this.host.jqxGrid('verticalscrollbarlargestep', arg);
            }
            else {
                return this.host.jqxGrid('verticalscrollbarlargestep');
            }
        };
        // jqxGridComponent functions
        jqxGridComponent.prototype.autoresizecolumns = function (type) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('autoresizecolumns', type);
        };
        jqxGridComponent.prototype.autoresizecolumn = function (dataField, type) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('autoresizecolumn', dataField, type);
        };
        jqxGridComponent.prototype.beginupdate = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('beginupdate');
        };
        jqxGridComponent.prototype.clear = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('clear');
        };
        jqxGridComponent.prototype.createChart = function (type, dataSource) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('createChart', type, dataSource);
        };
        jqxGridComponent.prototype.destroy = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('destroy');
        };
        jqxGridComponent.prototype.endupdate = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('endupdate');
        };
        jqxGridComponent.prototype.ensurerowvisible = function (rowBoundIndex) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('ensurerowvisible', rowBoundIndex);
        };
        jqxGridComponent.prototype.focus = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('focus');
        };
        jqxGridComponent.prototype.getcolumnindex = function (dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getcolumnindex', dataField);
        };
        jqxGridComponent.prototype.getcolumn = function (dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getcolumn', dataField);
        };
        jqxGridComponent.prototype.getcolumnproperty = function (dataField, propertyName) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getcolumnproperty', dataField, propertyName);
        };
        jqxGridComponent.prototype.getrowid = function (rowBoundIndex) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getrowid', rowBoundIndex);
        };
        jqxGridComponent.prototype.getrowdata = function (rowBoundIndex) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getrowdata', rowBoundIndex);
        };
        jqxGridComponent.prototype.getrowdatabyid = function (rowID) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getrowdatabyid', rowID);
        };
        jqxGridComponent.prototype.getrowboundindexbyid = function (rowID) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getrowboundindexbyid', rowID);
        };
        jqxGridComponent.prototype.getrowboundindex = function (rowDisplayIndex) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getrowboundindex', rowDisplayIndex);
        };
        jqxGridComponent.prototype.getrows = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getrows');
        };
        jqxGridComponent.prototype.getboundrows = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getboundrows');
        };
        jqxGridComponent.prototype.getdisplayrows = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getdisplayrows');
        };
        jqxGridComponent.prototype.getdatainformation = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getdatainformation');
        };
        jqxGridComponent.prototype.getsortinformation = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getsortinformation');
        };
        jqxGridComponent.prototype.getpaginginformation = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getpaginginformation');
        };
        jqxGridComponent.prototype.hidecolumn = function (dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('hidecolumn', dataField);
        };
        jqxGridComponent.prototype.hideloadelement = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('hideloadelement');
        };
        jqxGridComponent.prototype.hiderowdetails = function (rowBoundIndex) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('hiderowdetails', rowBoundIndex);
        };
        jqxGridComponent.prototype.iscolumnvisible = function (dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('iscolumnvisible', dataField);
        };
        jqxGridComponent.prototype.iscolumnpinned = function (dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('iscolumnpinned', dataField);
        };
        jqxGridComponent.prototype.localizestrings = function (localizationobject) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('localizestrings', localizationobject);
        };
        jqxGridComponent.prototype.pincolumn = function (dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('pincolumn', dataField);
        };
        jqxGridComponent.prototype.refreshdata = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('refreshdata');
        };
        jqxGridComponent.prototype.refresh = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('refresh');
        };
        jqxGridComponent.prototype.render = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('render');
        };
        jqxGridComponent.prototype.scrolloffset = function (top, left) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('scrolloffset', top, left);
        };
        jqxGridComponent.prototype.scrollposition = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('scrollposition');
        };
        jqxGridComponent.prototype.showloadelement = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('showloadelement');
        };
        jqxGridComponent.prototype.showrowdetails = function (rowBoundIndex) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('showrowdetails', rowBoundIndex);
        };
        jqxGridComponent.prototype.setcolumnindex = function (dataField, index) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('setcolumnindex', dataField, index);
        };
        jqxGridComponent.prototype.setcolumnproperty = function (dataField, propertyName, propertyValue) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('setcolumnproperty', dataField, propertyName, propertyValue);
        };
        jqxGridComponent.prototype.showcolumn = function (dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('showcolumn', dataField);
        };
        jqxGridComponent.prototype.unpincolumn = function (dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('unpincolumn', dataField);
        };
        jqxGridComponent.prototype.updatebounddata = function (type) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('updatebounddata', type);
        };
        jqxGridComponent.prototype.updating = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('updating');
        };
        jqxGridComponent.prototype.getsortcolumn = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getsortcolumn');
        };
        jqxGridComponent.prototype.removesort = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('removesort');
        };
        jqxGridComponent.prototype.sortby = function (dataField, sortOrder) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('sortby', dataField, sortOrder);
        };
        jqxGridComponent.prototype.addgroup = function (dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('addgroup', dataField);
        };
        jqxGridComponent.prototype.cleargroups = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('cleargroups');
        };
        jqxGridComponent.prototype.collapsegroup = function (group) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('collapsegroup', group);
        };
        jqxGridComponent.prototype.collapseallgroups = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('collapseallgroups');
        };
        jqxGridComponent.prototype.expandallgroups = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('expandallgroups');
        };
        jqxGridComponent.prototype.expandgroup = function (group) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('expandgroup', group);
        };
        jqxGridComponent.prototype.getrootgroupscount = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getrootgroupscount');
        };
        jqxGridComponent.prototype.getgroup = function (groupIndex) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getgroup', groupIndex);
        };
        jqxGridComponent.prototype.insertgroup = function (groupIndex, dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('insertgroup', groupIndex, dataField);
        };
        jqxGridComponent.prototype.iscolumngroupable = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('iscolumngroupable');
        };
        jqxGridComponent.prototype.removegroupat = function (groupIndex) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('removegroupat', groupIndex);
        };
        jqxGridComponent.prototype.removegroup = function (dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('removegroup', dataField);
        };
        jqxGridComponent.prototype.addfilter = function (dataField, filterGroup, refreshGrid) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('addfilter', dataField, filterGroup, refreshGrid);
        };
        jqxGridComponent.prototype.applyfilters = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('applyfilters');
        };
        jqxGridComponent.prototype.clearfilters = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('clearfilters');
        };
        jqxGridComponent.prototype.getfilterinformation = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getfilterinformation');
        };
        jqxGridComponent.prototype.getcolumnat = function (index) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getcolumnat', index);
        };
        jqxGridComponent.prototype.removefilter = function (dataField, refreshGrid) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('removefilter', dataField, refreshGrid);
        };
        jqxGridComponent.prototype.refreshfilterrow = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('refreshfilterrow');
        };
        jqxGridComponent.prototype.gotopage = function (pagenumber) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('gotopage', pagenumber);
        };
        jqxGridComponent.prototype.gotoprevpage = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('gotoprevpage');
        };
        jqxGridComponent.prototype.gotonextpage = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('gotonextpage');
        };
        jqxGridComponent.prototype.addrow = function (rowIds, data, rowPosition) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('addrow', rowIds, data, rowPosition);
        };
        jqxGridComponent.prototype.begincelledit = function (rowBoundIndex, dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('begincelledit', rowBoundIndex, dataField);
        };
        jqxGridComponent.prototype.beginrowedit = function (rowBoundIndex) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('beginrowedit', rowBoundIndex);
        };
        jqxGridComponent.prototype.closemenu = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('closemenu');
        };
        jqxGridComponent.prototype.deleterow = function (rowIds) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('deleterow', rowIds);
        };
        jqxGridComponent.prototype.endcelledit = function (rowBoundIndex, dataField, confirmChanges) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('endcelledit', rowBoundIndex, dataField, confirmChanges);
        };
        jqxGridComponent.prototype.endrowedit = function (rowBoundIndex, confirmChanges) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('endrowedit', rowBoundIndex, confirmChanges);
        };
        jqxGridComponent.prototype.getcell = function (rowBoundIndex, datafield) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getcell', rowBoundIndex, datafield);
        };
        jqxGridComponent.prototype.getcellatposition = function (left, top) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getcellatposition', left, top);
        };
        jqxGridComponent.prototype.getcelltext = function (rowBoundIndex, dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getcelltext', rowBoundIndex, dataField);
        };
        jqxGridComponent.prototype.getcelltextbyid = function (rowID, dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getcelltextbyid', rowID, dataField);
        };
        jqxGridComponent.prototype.getcellvaluebyid = function (rowID, dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getcellvaluebyid', rowID, dataField);
        };
        jqxGridComponent.prototype.getcellvalue = function (rowBoundIndex, dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getcellvalue', rowBoundIndex, dataField);
        };
        jqxGridComponent.prototype.isBindingCompleted = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('isBindingCompleted');
        };
        jqxGridComponent.prototype.openmenu = function (dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('openmenu', dataField);
        };
        jqxGridComponent.prototype.setcellvalue = function (rowBoundIndex, dataField, value) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('setcellvalue', rowBoundIndex, dataField, value);
        };
        jqxGridComponent.prototype.setcellvaluebyid = function (rowID, dataField, value) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('setcellvaluebyid', rowID, dataField, value);
        };
        jqxGridComponent.prototype.showvalidationpopup = function (rowBoundIndex, dataField, validationMessage) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('showvalidationpopup', rowBoundIndex, dataField, validationMessage);
        };
        jqxGridComponent.prototype.updaterow = function (rowIds, data) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('updaterow', rowIds, data);
        };
        jqxGridComponent.prototype.clearselection = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('clearselection');
        };
        jqxGridComponent.prototype.getselectedrowindex = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getselectedrowindex');
        };
        jqxGridComponent.prototype.getselectedrowindexes = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getselectedrowindexes');
        };
        jqxGridComponent.prototype.getselectedcell = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getselectedcell');
        };
        jqxGridComponent.prototype.getselectedcells = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getselectedcells');
        };
        jqxGridComponent.prototype.selectcell = function (rowBoundIndex, dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('selectcell', rowBoundIndex, dataField);
        };
        jqxGridComponent.prototype.selectallrows = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('selectallrows');
        };
        jqxGridComponent.prototype.selectrow = function (rowBoundIndex) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('selectrow', rowBoundIndex);
        };
        jqxGridComponent.prototype.unselectrow = function (rowBoundIndex) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('unselectrow', rowBoundIndex);
        };
        jqxGridComponent.prototype.unselectcell = function (rowBoundIndex, dataField) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('unselectcell', rowBoundIndex, dataField);
        };
        jqxGridComponent.prototype.getcolumnaggregateddata = function (dataField, aggregates) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getcolumnaggregateddata', dataField, aggregates);
        };
        jqxGridComponent.prototype.refreshaggregates = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('refreshaggregates');
        };
        jqxGridComponent.prototype.renderaggregates = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('renderaggregates');
        };
        jqxGridComponent.prototype.exportdata = function (dataType, fileName, exportHeader, rows, exportHiddenColumns, serverURL, charSet) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('exportdata', dataType, fileName, exportHeader, rows, exportHiddenColumns, serverURL, charSet);
        };
        jqxGridComponent.prototype.exportview = function (dataType, fileName) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('exportview', dataType, fileName);
        };
        jqxGridComponent.prototype.openColumnChooser = function (columns, header) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('openColumnChooser', columns, header);
        };
        jqxGridComponent.prototype.getstate = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('getstate');
        };
        jqxGridComponent.prototype.loadstate = function (stateobject) {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            this.host.jqxGrid('loadstate', stateobject);
        };
        jqxGridComponent.prototype.savestate = function () {
            if (this.autoCreate && !this.host) {
                this.createComponent();
            }
            return this.host.jqxGrid('savestate');
        };
        jqxGridComponent.prototype.__wireEvents__ = function () {
            var _this = this;
            this.host.on('bindingcomplete', function (eventData) { _this.onBindingcomplete.emit(eventData); });
            this.host.on('columnresized', function (eventData) { _this.onColumnresized.emit(eventData); });
            this.host.on('columnreordered', function (eventData) { _this.onColumnreordered.emit(eventData); });
            this.host.on('columnclick', function (eventData) { _this.onColumnclick.emit(eventData); });
            this.host.on('cellclick', function (eventData) { _this.onCellclick.emit(eventData); });
            this.host.on('celldoubleclick', function (eventData) { _this.onCelldoubleclick.emit(eventData); });
            this.host.on('cellselect', function (eventData) { _this.onCellselect.emit(eventData); });
            this.host.on('cellunselect', function (eventData) { _this.onCellunselect.emit(eventData); });
            this.host.on('cellvaluechanged', function (eventData) { _this.onCellvaluechanged.emit(eventData); });
            this.host.on('cellbeginedit', function (eventData) { _this.onCellbeginedit.emit(eventData); });
            this.host.on('cellendedit', function (eventData) { _this.onCellendedit.emit(eventData); });
            this.host.on('filter', function (eventData) { _this.onFilter.emit(eventData); });
            this.host.on('groupschanged', function (eventData) { _this.onGroupschanged.emit(eventData); });
            this.host.on('groupexpand', function (eventData) { _this.onGroupexpand.emit(eventData); });
            this.host.on('groupcollapse', function (eventData) { _this.onGroupcollapse.emit(eventData); });
            this.host.on('pagechanged', function (eventData) { _this.onPagechanged.emit(eventData); });
            this.host.on('pagesizechanged', function (eventData) { _this.onPagesizechanged.emit(eventData); });
            this.host.on('rowclick', function (eventData) { _this.onRowclick.emit(eventData); });
            this.host.on('rowdoubleclick', function (eventData) { _this.onRowdoubleclick.emit(eventData); });
            this.host.on('rowselect', function (eventData) { _this.onRowselect.emit(eventData); });
            this.host.on('rowunselect', function (eventData) { _this.onRowunselect.emit(eventData); });
            this.host.on('rowexpand', function (eventData) { _this.onRowexpand.emit(eventData); });
            this.host.on('rowcollapse', function (eventData) { _this.onRowcollapse.emit(eventData); });
            this.host.on('sort', function (eventData) { _this.onSort.emit(eventData); });
        };
        return jqxGridComponent;
    }()); //jqxGridComponent
    jqxGridComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'jqxGrid',
                    template: '<div><ng-content></ng-content></div>'
                },] }
    ];
    jqxGridComponent.ctorParameters = function () { return [
        { type: core.ElementRef }
    ]; };
    jqxGridComponent.propDecorators = {
        attrAltrows: [{ type: core.Input, args: ['altrows',] }],
        attrAltstart: [{ type: core.Input, args: ['altstart',] }],
        attrAltstep: [{ type: core.Input, args: ['altstep',] }],
        attrAutoshowloadelement: [{ type: core.Input, args: ['autoshowloadelement',] }],
        attrAutoshowfiltericon: [{ type: core.Input, args: ['autoshowfiltericon',] }],
        attrAutoshowcolumnsmenubutton: [{ type: core.Input, args: ['autoshowcolumnsmenubutton',] }],
        attrShowcolumnlines: [{ type: core.Input, args: ['showcolumnlines',] }],
        attrShowrowlines: [{ type: core.Input, args: ['showrowlines',] }],
        attrShowcolumnheaderlines: [{ type: core.Input, args: ['showcolumnheaderlines',] }],
        attrAdaptive: [{ type: core.Input, args: ['adaptive',] }],
        attrAdaptivewidth: [{ type: core.Input, args: ['adaptivewidth',] }],
        attrClipboard: [{ type: core.Input, args: ['clipboard',] }],
        attrCloseablegroups: [{ type: core.Input, args: ['closeablegroups',] }],
        attrColumnsmenuwidth: [{ type: core.Input, args: ['columnsmenuwidth',] }],
        attrColumnmenuopening: [{ type: core.Input, args: ['columnmenuopening',] }],
        attrColumnmenuclosing: [{ type: core.Input, args: ['columnmenuclosing',] }],
        attrCellhover: [{ type: core.Input, args: ['cellhover',] }],
        attrEnablekeyboarddelete: [{ type: core.Input, args: ['enablekeyboarddelete',] }],
        attrEnableellipsis: [{ type: core.Input, args: ['enableellipsis',] }],
        attrEnablemousewheel: [{ type: core.Input, args: ['enablemousewheel',] }],
        attrEnableanimations: [{ type: core.Input, args: ['enableanimations',] }],
        attrEnabletooltips: [{ type: core.Input, args: ['enabletooltips',] }],
        attrEnablehover: [{ type: core.Input, args: ['enablehover',] }],
        attrEnablebrowserselection: [{ type: core.Input, args: ['enablebrowserselection',] }],
        attrEverpresentrowposition: [{ type: core.Input, args: ['everpresentrowposition',] }],
        attrEverpresentrowheight: [{ type: core.Input, args: ['everpresentrowheight',] }],
        attrEverpresentrowactions: [{ type: core.Input, args: ['everpresentrowactions',] }],
        attrEverpresentrowactionsmode: [{ type: core.Input, args: ['everpresentrowactionsmode',] }],
        attrFilterrowheight: [{ type: core.Input, args: ['filterrowheight',] }],
        attrFiltermode: [{ type: core.Input, args: ['filtermode',] }],
        attrGroupsrenderer: [{ type: core.Input, args: ['groupsrenderer',] }],
        attrGroupcolumnrenderer: [{ type: core.Input, args: ['groupcolumnrenderer',] }],
        attrGroupsexpandedbydefault: [{ type: core.Input, args: ['groupsexpandedbydefault',] }],
        attrHandlekeyboardnavigation: [{ type: core.Input, args: ['handlekeyboardnavigation',] }],
        attrPagerrenderer: [{ type: core.Input, args: ['pagerrenderer',] }],
        attrRtl: [{ type: core.Input, args: ['rtl',] }],
        attrShowdefaultloadelement: [{ type: core.Input, args: ['showdefaultloadelement',] }],
        attrShowfiltercolumnbackground: [{ type: core.Input, args: ['showfiltercolumnbackground',] }],
        attrShowfiltermenuitems: [{ type: core.Input, args: ['showfiltermenuitems',] }],
        attrShowpinnedcolumnbackground: [{ type: core.Input, args: ['showpinnedcolumnbackground',] }],
        attrShowsortcolumnbackground: [{ type: core.Input, args: ['showsortcolumnbackground',] }],
        attrShowsortmenuitems: [{ type: core.Input, args: ['showsortmenuitems',] }],
        attrShowgroupmenuitems: [{ type: core.Input, args: ['showgroupmenuitems',] }],
        attrShowrowdetailscolumn: [{ type: core.Input, args: ['showrowdetailscolumn',] }],
        attrShowheader: [{ type: core.Input, args: ['showheader',] }],
        attrShowgroupsheader: [{ type: core.Input, args: ['showgroupsheader',] }],
        attrShowaggregates: [{ type: core.Input, args: ['showaggregates',] }],
        attrShowgroupaggregates: [{ type: core.Input, args: ['showgroupaggregates',] }],
        attrShoweverpresentrow: [{ type: core.Input, args: ['showeverpresentrow',] }],
        attrShowfilterrow: [{ type: core.Input, args: ['showfilterrow',] }],
        attrShowemptyrow: [{ type: core.Input, args: ['showemptyrow',] }],
        attrShowstatusbar: [{ type: core.Input, args: ['showstatusbar',] }],
        attrStatusbarheight: [{ type: core.Input, args: ['statusbarheight',] }],
        attrShowtoolbar: [{ type: core.Input, args: ['showtoolbar',] }],
        attrShowfilterbar: [{ type: core.Input, args: ['showfilterbar',] }],
        attrFilterbarmode: [{ type: core.Input, args: ['filterbarmode',] }],
        attrSelectionmode: [{ type: core.Input, args: ['selectionmode',] }],
        attrUpdatefilterconditions: [{ type: core.Input, args: ['updatefilterconditions',] }],
        attrUpdatefilterpanel: [{ type: core.Input, args: ['updatefilterpanel',] }],
        attrTheme: [{ type: core.Input, args: ['theme',] }],
        attrToolbarheight: [{ type: core.Input, args: ['toolbarheight',] }],
        attrAutoheight: [{ type: core.Input, args: ['autoheight',] }],
        attrAutorowheight: [{ type: core.Input, args: ['autorowheight',] }],
        attrColumnsheight: [{ type: core.Input, args: ['columnsheight',] }],
        attrDeferreddatafields: [{ type: core.Input, args: ['deferreddatafields',] }],
        attrGroupsheaderheight: [{ type: core.Input, args: ['groupsheaderheight',] }],
        attrGroupindentwidth: [{ type: core.Input, args: ['groupindentwidth',] }],
        attrPagerheight: [{ type: core.Input, args: ['pagerheight',] }],
        attrRowsheight: [{ type: core.Input, args: ['rowsheight',] }],
        attrScrollbarsize: [{ type: core.Input, args: ['scrollbarsize',] }],
        attrScrollmode: [{ type: core.Input, args: ['scrollmode',] }],
        attrScrollfeedback: [{ type: core.Input, args: ['scrollfeedback',] }],
        attrAutosavestate: [{ type: core.Input, args: ['autosavestate',] }],
        attrAutoloadstate: [{ type: core.Input, args: ['autoloadstate',] }],
        attrColumns: [{ type: core.Input, args: ['columns',] }],
        attrCardview: [{ type: core.Input, args: ['cardview',] }],
        attrCardviewcolumns: [{ type: core.Input, args: ['cardviewcolumns',] }],
        attrCardheight: [{ type: core.Input, args: ['cardheight',] }],
        attrCardsize: [{ type: core.Input, args: ['cardsize',] }],
        attrColumngroups: [{ type: core.Input, args: ['columngroups',] }],
        attrColumnsmenu: [{ type: core.Input, args: ['columnsmenu',] }],
        attrColumnsresize: [{ type: core.Input, args: ['columnsresize',] }],
        attrColumnsautoresize: [{ type: core.Input, args: ['columnsautoresize',] }],
        attrColumnsreorder: [{ type: core.Input, args: ['columnsreorder',] }],
        attrCharting: [{ type: core.Input, args: ['charting',] }],
        attrDisabled: [{ type: core.Input, args: ['disabled',] }],
        attrEditable: [{ type: core.Input, args: ['editable',] }],
        attrEditmode: [{ type: core.Input, args: ['editmode',] }],
        attrFilter: [{ type: core.Input, args: ['filter',] }],
        attrFilterable: [{ type: core.Input, args: ['filterable',] }],
        attrGroupable: [{ type: core.Input, args: ['groupable',] }],
        attrGroups: [{ type: core.Input, args: ['groups',] }],
        attrHorizontalscrollbarstep: [{ type: core.Input, args: ['horizontalscrollbarstep',] }],
        attrHorizontalscrollbarlargestep: [{ type: core.Input, args: ['horizontalscrollbarlargestep',] }],
        attrInitrowdetails: [{ type: core.Input, args: ['initrowdetails',] }],
        attrKeyboardnavigation: [{ type: core.Input, args: ['keyboardnavigation',] }],
        attrLocalization: [{ type: core.Input, args: ['localization',] }],
        attrPagesize: [{ type: core.Input, args: ['pagesize',] }],
        attrPagesizeoptions: [{ type: core.Input, args: ['pagesizeoptions',] }],
        attrPagermode: [{ type: core.Input, args: ['pagermode',] }],
        attrPagerbuttonscount: [{ type: core.Input, args: ['pagerbuttonscount',] }],
        attrPageable: [{ type: core.Input, args: ['pageable',] }],
        attrAutofill: [{ type: core.Input, args: ['autofill',] }],
        attrRowdetails: [{ type: core.Input, args: ['rowdetails',] }],
        attrRowdetailstemplate: [{ type: core.Input, args: ['rowdetailstemplate',] }],
        attrReady: [{ type: core.Input, args: ['ready',] }],
        attrRendered: [{ type: core.Input, args: ['rendered',] }],
        attrRenderstatusbar: [{ type: core.Input, args: ['renderstatusbar',] }],
        attrRendertoolbar: [{ type: core.Input, args: ['rendertoolbar',] }],
        attrRendergridrows: [{ type: core.Input, args: ['rendergridrows',] }],
        attrSortable: [{ type: core.Input, args: ['sortable',] }],
        attrSortmode: [{ type: core.Input, args: ['sortmode',] }],
        attrSelectedrowindex: [{ type: core.Input, args: ['selectedrowindex',] }],
        attrSelectedrowindexes: [{ type: core.Input, args: ['selectedrowindexes',] }],
        attrSource: [{ type: core.Input, args: ['source',] }],
        attrSorttogglestates: [{ type: core.Input, args: ['sorttogglestates',] }],
        attrUpdatedelay: [{ type: core.Input, args: ['updatedelay',] }],
        attrVirtualmode: [{ type: core.Input, args: ['virtualmode',] }],
        attrVerticalscrollbarstep: [{ type: core.Input, args: ['verticalscrollbarstep',] }],
        attrVerticalscrollbarlargestep: [{ type: core.Input, args: ['verticalscrollbarlargestep',] }],
        attrWidth: [{ type: core.Input, args: ['width',] }],
        attrHeight: [{ type: core.Input, args: ['height',] }],
        autoCreate: [{ type: core.Input, args: ['auto-create',] }],
        onBindingcomplete: [{ type: core.Output }],
        onColumnresized: [{ type: core.Output }],
        onColumnreordered: [{ type: core.Output }],
        onColumnclick: [{ type: core.Output }],
        onCellclick: [{ type: core.Output }],
        onCelldoubleclick: [{ type: core.Output }],
        onCellselect: [{ type: core.Output }],
        onCellunselect: [{ type: core.Output }],
        onCellvaluechanged: [{ type: core.Output }],
        onCellbeginedit: [{ type: core.Output }],
        onCellendedit: [{ type: core.Output }],
        onFilter: [{ type: core.Output }],
        onGroupschanged: [{ type: core.Output }],
        onGroupexpand: [{ type: core.Output }],
        onGroupcollapse: [{ type: core.Output }],
        onPagechanged: [{ type: core.Output }],
        onPagesizechanged: [{ type: core.Output }],
        onRowclick: [{ type: core.Output }],
        onRowdoubleclick: [{ type: core.Output }],
        onRowselect: [{ type: core.Output }],
        onRowunselect: [{ type: core.Output }],
        onRowexpand: [{ type: core.Output }],
        onRowcollapse: [{ type: core.Output }],
        onSort: [{ type: core.Output }]
    };

    var jqxGridModule = /** @class */ (function () {
        function jqxGridModule() {
        }
        return jqxGridModule;
    }());
    jqxGridModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [],
                    declarations: [jqxGridComponent],
                    exports: [jqxGridComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.jqxGridComponent = jqxGridComponent;
    exports.jqxGridModule = jqxGridModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
