{"version":3,"sources":["ng://ng-fallimg/lib/ng-fallimg-sources.ts","ng://ng-fallimg/lib/ng-fallimg.directive.ts","ng://ng-fallimg/lib/ng-fallimg.module.ts"],"names":["NG_FALLIMG_SOURCES","NgFallimgDirective","el","fallimgSources","this","prototype","errorImgHandler","source","fallimg","Error","lastSource","src","Directive","args","selector","ElementRef","Inject","Input","HostListener","NgFallimgModule","forRoot","sources","ngModule","providers","provide","useValue","NgModule","declarations","exports"],"mappings":"kQAIA,IAAaA,EAAqB,qBCGlCC,EAAA,WAuBE,SAAAA,EACUC,EAC8BC,GAD9BC,KAAAF,GAAAA,EAC8BE,KAAAD,eAAAA,EA2B1C,OAnBUF,EAAAI,UAAAC,gBADR,eAIQC,EAASH,KAAKD,eAAgBC,KAAKI,SAAW,WAGpD,IAAKD,EACH,MAAM,IAAIE,MAAM,qBAAsBL,KAAKI,QAAO,uDAIhDD,IAAWH,KAAKM,aAGlBN,KAAKM,WAAaH,EACjBH,KAAKF,GAAgB,cAAsBS,IAAMJ,wBAhDvDK,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,4DARQC,EAAAA,8CAgCfC,EAAAA,OAAMH,KAAA,CAAEb,yCAhBViB,EAAAA,MAAKJ,KAAA,CAAC,oCAuBNK,EAAAA,aAAYL,KAAA,CAAC,YAoBhBZ,EApDA,GCPAkB,EAAA,WAIA,SAAAA,KAqBA,OAXSA,EAAAC,QAAP,SAAeC,GACb,MAAO,CACLC,SAAUH,EACVI,UAAW,CACT,CACEC,QAASxB,EACTyB,SAAUJ,0BAhBnBK,EAAAA,SAAQb,KAAA,CAAC,CACRc,aAAc,CAAC1B,GACf2B,QAAS,CAAC3B,OAmBZkB,EAzBA","sourcesContent":["/**\n * Injector token constant that contains all the fallback sources \n */\n\nexport const NG_FALLIMG_SOURCES = 'NG_FALLIMG_SOURCES';\n\n/**\n * Interface that define the object to pass to charged the fallback sources\n */\n\nexport interface IFallimgSource {\n    default: string;\n    [extraProps: string]: string\n}\n","import { Directive, ElementRef, Input, HostListener, Inject } from '@angular/core';\nimport { NG_FALLIMG_SOURCES, IFallimgSource } from './ng-fallimg-sources';\n\n/**\n * Directive for handling the default image when the main image doesn't works\n */\n\n@Directive({\n  selector: 'img[fallimg]'\n})\nexport class NgFallimgDirective {\n\n  /**\n   * Input that receive an optional key for returning the source\n   */\n\n  @Input('fallimg') public fallimg: string;\n\n  /**\n   * It contains the last source setted when the main source fails\n   */\n\n  private lastSource: string;\n\n  /**\n   * \n   * @param el ElementRef service\n   * @param fallimgSources Injector token that contains all the fallback sources\n   */\n\n  constructor(\n    private el: ElementRef,\n    @Inject( NG_FALLIMG_SOURCES ) private fallimgSources: IFallimgSource\n  ) {}\n\n  /**\n   * It handles the error when the main image doesn't load\n   */\n\n  @HostListener('error')\n  private errorImgHandler(): void {\n\n    // The chosen source\n    const source = this.fallimgSources[ this.fallimg || 'default' ];\n\n    // Verify if the key exists in all fallback sources\n    if (!source) {\n      throw new Error(`ng-fallimg error: ${ this.fallimg } doesn't exist as a source or it is an empty source`);\n    }\n\n    // it checks if the charged source is different to the actual source, this avoid the infinite bucle creation\n    if (source !== this.lastSource) {\n\n      // It saves the last source for matching when the fallback source fails and retried, that avoid an infinite bucle\n      this.lastSource = source;\n      (this.el.nativeElement as HTMLImageElement).src = source;\n      \n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgFallimgDirective } from './ng-fallimg.directive';\nimport { NG_FALLIMG_SOURCES, IFallimgSource } from './ng-fallimg-sources';\n\n@NgModule({\n  declarations: [NgFallimgDirective],\n  exports: [NgFallimgDirective]\n})\nexport class NgFallimgModule { \n  \n  /**\n   * @param sources All the fallback sources\n   */\n  \n  static forRoot(sources: IFallimgSource): ModuleWithProviders {\n    return {\n      ngModule: NgFallimgModule,\n      providers: [\n        {\n          provide: NG_FALLIMG_SOURCES,\n          useValue: sources\n        }\n      ]\n    };\n  }\n}\n"]}