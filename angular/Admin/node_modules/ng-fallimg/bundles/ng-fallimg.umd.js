(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ng-fallimg', ['exports', '@angular/core'], factory) :
    (factory((global['ng-fallimg'] = {}),global.ng.core));
}(this, (function (exports,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Injector token constant that contains all the fallback sources
     */
    /** @type {?} */
    var NG_FALLIMG_SOURCES = 'NG_FALLIMG_SOURCES';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Directive for handling the default image when the main image doesn't works
     */
    var NgFallimgDirective = /** @class */ (function () {
        /**
         *
         * @param el ElementRef service
         * @param fallimgSources Injector token that contains all the fallback sources
         */
        function NgFallimgDirective(el, fallimgSources) {
            this.el = el;
            this.fallimgSources = fallimgSources;
        }
        /**
         * It handles the error when the main image doesn't load
         */
        /**
         * It handles the error when the main image doesn't load
         * @private
         * @return {?}
         */
        NgFallimgDirective.prototype.errorImgHandler = /**
         * It handles the error when the main image doesn't load
         * @private
         * @return {?}
         */
            function () {
                // The chosen source
                /** @type {?} */
                var source = this.fallimgSources[this.fallimg || 'default'];
                // Verify if the key exists in all fallback sources
                if (!source) {
                    throw new Error("ng-fallimg error: " + this.fallimg + " doesn't exist as a source or it is an empty source");
                }
                // it checks if the charged source is different to the actual source, this avoid the infinite bucle creation
                if (source !== this.lastSource) {
                    // It saves the last source for matching when the fallback source fails and retried, that avoid an infinite bucle
                    this.lastSource = source;
                    (( /** @type {?} */(this.el.nativeElement))).src = source;
                }
            };
        NgFallimgDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'img[fallimg]'
                    },] }
        ];
        /** @nocollapse */
        NgFallimgDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: undefined, decorators: [{ type: core.Inject, args: [NG_FALLIMG_SOURCES,] }] }
            ];
        };
        NgFallimgDirective.propDecorators = {
            fallimg: [{ type: core.Input, args: ['fallimg',] }],
            errorImgHandler: [{ type: core.HostListener, args: ['error',] }]
        };
        return NgFallimgDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgFallimgModule = /** @class */ (function () {
        function NgFallimgModule() {
        }
        /**
         * @param sources All the fallback sources
         */
        /**
         * @param {?} sources All the fallback sources
         * @return {?}
         */
        NgFallimgModule.forRoot = /**
         * @param {?} sources All the fallback sources
         * @return {?}
         */
            function (sources) {
                return {
                    ngModule: NgFallimgModule,
                    providers: [
                        {
                            provide: NG_FALLIMG_SOURCES,
                            useValue: sources
                        }
                    ]
                };
            };
        NgFallimgModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgFallimgDirective],
                        exports: [NgFallimgDirective]
                    },] }
        ];
        return NgFallimgModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgFallimgModule = NgFallimgModule;
    exports.ɵb = NG_FALLIMG_SOURCES;
    exports.ɵa = NgFallimgDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ng-fallimg.umd.js.map