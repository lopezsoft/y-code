/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, HostListener, Inject } from '@angular/core';
import { NG_FALLIMG_SOURCES } from './ng-fallimg-sources';
/**
 * Directive for handling the default image when the main image doesn't works
 */
var NgFallimgDirective = /** @class */ (function () {
    /**
     *
     * @param el ElementRef service
     * @param fallimgSources Injector token that contains all the fallback sources
     */
    function NgFallimgDirective(el, fallimgSources) {
        this.el = el;
        this.fallimgSources = fallimgSources;
    }
    /**
     * It handles the error when the main image doesn't load
     */
    /**
     * It handles the error when the main image doesn't load
     * @private
     * @return {?}
     */
    NgFallimgDirective.prototype.errorImgHandler = /**
     * It handles the error when the main image doesn't load
     * @private
     * @return {?}
     */
    function () {
        // The chosen source
        /** @type {?} */
        var source = this.fallimgSources[this.fallimg || 'default'];
        // Verify if the key exists in all fallback sources
        if (!source) {
            throw new Error("ng-fallimg error: " + this.fallimg + " doesn't exist as a source or it is an empty source");
        }
        // it checks if the charged source is different to the actual source, this avoid the infinite bucle creation
        if (source !== this.lastSource) {
            // It saves the last source for matching when the fallback source fails and retried, that avoid an infinite bucle
            this.lastSource = source;
            ((/** @type {?} */ (this.el.nativeElement))).src = source;
        }
    };
    NgFallimgDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'img[fallimg]'
                },] }
    ];
    /** @nocollapse */
    NgFallimgDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [NG_FALLIMG_SOURCES,] }] }
    ]; };
    NgFallimgDirective.propDecorators = {
        fallimg: [{ type: Input, args: ['fallimg',] }],
        errorImgHandler: [{ type: HostListener, args: ['error',] }]
    };
    return NgFallimgDirective;
}());
export { NgFallimgDirective };
if (false) {
    /**
     * Input that receive an optional key for returning the source
     * @type {?}
     */
    NgFallimgDirective.prototype.fallimg;
    /**
     * It contains the last source setted when the main source fails
     * @type {?}
     * @private
     */
    NgFallimgDirective.prototype.lastSource;
    /**
     * @type {?}
     * @private
     */
    NgFallimgDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgFallimgDirective.prototype.fallimgSources;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctZmFsbGltZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZy1mYWxsaW1nLyIsInNvdXJjZXMiOlsibGliL25nLWZhbGxpbWcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRixPQUFPLEVBQUUsa0JBQWtCLEVBQWtCLE1BQU0sc0JBQXNCLENBQUM7Ozs7QUFNMUU7SUFpQkU7Ozs7T0FJRztJQUVILDRCQUNVLEVBQWMsRUFDZ0IsY0FBOEI7UUFENUQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNnQixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7SUFDbkUsQ0FBQztJQUVKOztPQUVHOzs7Ozs7SUFHSyw0Q0FBZTs7Ozs7SUFEdkI7OztZQUlRLE1BQU0sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFFLElBQUksQ0FBQyxPQUFPLElBQUksU0FBUyxDQUFFO1FBRS9ELG1EQUFtRDtRQUNuRCxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsTUFBTSxJQUFJLEtBQUssQ0FBQyx1QkFBc0IsSUFBSSxDQUFDLE9BQU8sd0RBQXNELENBQUMsQ0FBQztTQUMzRztRQUVELDRHQUE0RztRQUM1RyxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBRTlCLGlIQUFpSDtZQUNqSCxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQztZQUN6QixDQUFDLG1CQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFvQixDQUFDLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQztTQUUxRDtJQUNILENBQUM7O2dCQW5ERixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGNBQWM7aUJBQ3pCOzs7O2dCQVRtQixVQUFVO2dEQWdDekIsTUFBTSxTQUFFLGtCQUFrQjs7OzBCQWhCNUIsS0FBSyxTQUFDLFNBQVM7a0NBdUJmLFlBQVksU0FBQyxPQUFPOztJQW9CdkIseUJBQUM7Q0FBQSxBQXBERCxJQW9EQztTQWpEWSxrQkFBa0I7Ozs7OztJQU03QixxQ0FBeUM7Ozs7OztJQU16Qyx3Q0FBMkI7Ozs7O0lBU3pCLGdDQUFzQjs7Ozs7SUFDdEIsNENBQW9FIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgSG9zdExpc3RlbmVyLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5HX0ZBTExJTUdfU09VUkNFUywgSUZhbGxpbWdTb3VyY2UgfSBmcm9tICcuL25nLWZhbGxpbWctc291cmNlcyc7XG5cbi8qKlxuICogRGlyZWN0aXZlIGZvciBoYW5kbGluZyB0aGUgZGVmYXVsdCBpbWFnZSB3aGVuIHRoZSBtYWluIGltYWdlIGRvZXNuJ3Qgd29ya3NcbiAqL1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdpbWdbZmFsbGltZ10nXG59KVxuZXhwb3J0IGNsYXNzIE5nRmFsbGltZ0RpcmVjdGl2ZSB7XG5cbiAgLyoqXG4gICAqIElucHV0IHRoYXQgcmVjZWl2ZSBhbiBvcHRpb25hbCBrZXkgZm9yIHJldHVybmluZyB0aGUgc291cmNlXG4gICAqL1xuXG4gIEBJbnB1dCgnZmFsbGltZycpIHB1YmxpYyBmYWxsaW1nOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEl0IGNvbnRhaW5zIHRoZSBsYXN0IHNvdXJjZSBzZXR0ZWQgd2hlbiB0aGUgbWFpbiBzb3VyY2UgZmFpbHNcbiAgICovXG5cbiAgcHJpdmF0ZSBsYXN0U291cmNlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFxuICAgKiBAcGFyYW0gZWwgRWxlbWVudFJlZiBzZXJ2aWNlXG4gICAqIEBwYXJhbSBmYWxsaW1nU291cmNlcyBJbmplY3RvciB0b2tlbiB0aGF0IGNvbnRhaW5zIGFsbCB0aGUgZmFsbGJhY2sgc291cmNlc1xuICAgKi9cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxuICAgIEBJbmplY3QoIE5HX0ZBTExJTUdfU09VUkNFUyApIHByaXZhdGUgZmFsbGltZ1NvdXJjZXM6IElGYWxsaW1nU291cmNlXG4gICkge31cblxuICAvKipcbiAgICogSXQgaGFuZGxlcyB0aGUgZXJyb3Igd2hlbiB0aGUgbWFpbiBpbWFnZSBkb2Vzbid0IGxvYWRcbiAgICovXG5cbiAgQEhvc3RMaXN0ZW5lcignZXJyb3InKVxuICBwcml2YXRlIGVycm9ySW1nSGFuZGxlcigpOiB2b2lkIHtcblxuICAgIC8vIFRoZSBjaG9zZW4gc291cmNlXG4gICAgY29uc3Qgc291cmNlID0gdGhpcy5mYWxsaW1nU291cmNlc1sgdGhpcy5mYWxsaW1nIHx8ICdkZWZhdWx0JyBdO1xuXG4gICAgLy8gVmVyaWZ5IGlmIHRoZSBrZXkgZXhpc3RzIGluIGFsbCBmYWxsYmFjayBzb3VyY2VzXG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbmctZmFsbGltZyBlcnJvcjogJHsgdGhpcy5mYWxsaW1nIH0gZG9lc24ndCBleGlzdCBhcyBhIHNvdXJjZSBvciBpdCBpcyBhbiBlbXB0eSBzb3VyY2VgKTtcbiAgICB9XG5cbiAgICAvLyBpdCBjaGVja3MgaWYgdGhlIGNoYXJnZWQgc291cmNlIGlzIGRpZmZlcmVudCB0byB0aGUgYWN0dWFsIHNvdXJjZSwgdGhpcyBhdm9pZCB0aGUgaW5maW5pdGUgYnVjbGUgY3JlYXRpb25cbiAgICBpZiAoc291cmNlICE9PSB0aGlzLmxhc3RTb3VyY2UpIHtcblxuICAgICAgLy8gSXQgc2F2ZXMgdGhlIGxhc3Qgc291cmNlIGZvciBtYXRjaGluZyB3aGVuIHRoZSBmYWxsYmFjayBzb3VyY2UgZmFpbHMgYW5kIHJldHJpZWQsIHRoYXQgYXZvaWQgYW4gaW5maW5pdGUgYnVjbGVcbiAgICAgIHRoaXMubGFzdFNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEltYWdlRWxlbWVudCkuc3JjID0gc291cmNlO1xuICAgICAgXG4gICAgfVxuICB9XG59XG4iXX0=