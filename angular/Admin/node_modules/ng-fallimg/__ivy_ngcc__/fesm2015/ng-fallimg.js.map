{"version":3,"file":"ng-fallimg.js","sources":["ng-fallimg/lib/ng-fallimg-sources.ts","ng-fallimg/lib/ng-fallimg.directive.ts","ng-fallimg/lib/ng-fallimg.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Injector token constant that contains all the fallback sources \n */\n\nexport const NG_FALLIMG_SOURCES = 'NG_FALLIMG_SOURCES';\n\n/**\n * Interface that define the object to pass to charged the fallback sources\n */\n\nexport interface IFallimgSource {\n    default: string;\n    [extraProps: string]: string\n}\n","import { Directive, ElementRef, Input, HostListener, Inject } from '@angular/core';\nimport { NG_FALLIMG_SOURCES, IFallimgSource } from './ng-fallimg-sources';\n\n/**\n * Directive for handling the default image when the main image doesn't works\n */\n\n@Directive({\n  selector: 'img[fallimg]'\n})\nexport class NgFallimgDirective {\n\n  /**\n   * Input that receive an optional key for returning the source\n   */\n\n  @Input('fallimg') public fallimg: string;\n\n  /**\n   * It contains the last source setted when the main source fails\n   */\n\n  private lastSource: string;\n\n  /**\n   * \n   * @param el ElementRef service\n   * @param fallimgSources Injector token that contains all the fallback sources\n   */\n\n  constructor(\n    private el: ElementRef,\n    @Inject( NG_FALLIMG_SOURCES ) private fallimgSources: IFallimgSource\n  ) {}\n\n  /**\n   * It handles the error when the main image doesn't load\n   */\n\n  @HostListener('error')\n  private errorImgHandler(): void {\n\n    // The chosen source\n    const source = this.fallimgSources[ this.fallimg || 'default' ];\n\n    // Verify if the key exists in all fallback sources\n    if (!source) {\n      throw new Error(`ng-fallimg error: ${ this.fallimg } doesn't exist as a source or it is an empty source`);\n    }\n\n    // it checks if the charged source is different to the actual source, this avoid the infinite bucle creation\n    if (source !== this.lastSource) {\n\n      // It saves the last source for matching when the fallback source fails and retried, that avoid an infinite bucle\n      this.lastSource = source;\n      (this.el.nativeElement as HTMLImageElement).src = source;\n      \n    }\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { NgFallimgDirective } from './ng-fallimg.directive';\nimport { NG_FALLIMG_SOURCES, IFallimgSource } from './ng-fallimg-sources';\n\n@NgModule({\n  declarations: [NgFallimgDirective],\n  exports: [NgFallimgDirective]\n})\nexport class NgFallimgModule { \n  \n  /**\n   * @param sources All the fallback sources\n   */\n  \n  static forRoot(sources: IFallimgSource): ModuleWithProviders {\n    return {\n      ngModule: NgFallimgModule,\n      providers: [\n        {\n          provide: NG_FALLIMG_SOURCES,\n          useValue: sources\n        }\n      ]\n    };\n  }\n}\n"]}