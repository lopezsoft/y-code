{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{TT0I:function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.d(__webpack_exports__,\"a\",function(){return CurrencyMaskDirective}),__webpack_require__.d(__webpack_exports__,\"b\",function(){return NgxCurrencyModule});var _angular_core__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(\"fXoL\"),_angular_forms__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(\"3Pt+\"),_angular_common__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(\"ofXK\"),CurrencyMaskInputMode=function(CurrencyMaskInputMode){return CurrencyMaskInputMode[CurrencyMaskInputMode.FINANCIAL=0]=\"FINANCIAL\",CurrencyMaskInputMode[CurrencyMaskInputMode.NATURAL=1]=\"NATURAL\",CurrencyMaskInputMode}({});let CURRENCY_MASK_CONFIG=new _angular_core__WEBPACK_IMPORTED_MODULE_0__.t(\"currency.mask.config\");class InputManager{constructor(htmlInputElement){this.htmlInputElement=htmlInputElement}setCursorAt(position){if(this.htmlInputElement.setSelectionRange)this.htmlInputElement.focus(),this.htmlInputElement.setSelectionRange(position,position);else if(this.htmlInputElement.createTextRange){let textRange=this.htmlInputElement.createTextRange();textRange.collapse(!0),textRange.moveEnd(\"character\",position),textRange.moveStart(\"character\",position),textRange.select()}}updateValueAndCursor(newRawValue,oldLength,selectionStart){this.rawValue=newRawValue,this.setCursorAt(selectionStart-=oldLength-newRawValue.length)}get canInputMoreNumbers(){let haventReachedMaxLength=!(this.rawValue.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g,\"\").length>=this.htmlInputElement.maxLength&&this.htmlInputElement.maxLength>=0),selectionStart=this.inputSelection.selectionStart,selectionEnd=this.inputSelection.selectionEnd,haveNumberSelected=!(selectionStart==selectionEnd||!this.htmlInputElement.value.substring(selectionStart,selectionEnd).match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/)),startWithZero=\"0\"==this.htmlInputElement.value.substring(0,1);return haventReachedMaxLength||haveNumberSelected||startWithZero}get inputSelection(){let selectionStart=0,selectionEnd=0;if(\"number\"==typeof this.htmlInputElement.selectionStart&&\"number\"==typeof this.htmlInputElement.selectionEnd)selectionStart=this.htmlInputElement.selectionStart,selectionEnd=this.htmlInputElement.selectionEnd;else{let range=document.selection.createRange();if(range&&range.parentElement()==this.htmlInputElement){let lenght=this.htmlInputElement.value.length,normalizedValue=this.htmlInputElement.value.replace(/\\r\\n/g,\"\\n\"),startRange=this.htmlInputElement.createTextRange();startRange.moveToBookmark(range.getBookmark());let endRange=this.htmlInputElement.createTextRange();endRange.collapse(!1),startRange.compareEndPoints(\"StartToEnd\",endRange)>-1?selectionStart=selectionEnd=lenght:(selectionStart=-startRange.moveStart(\"character\",-lenght),selectionStart+=normalizedValue.slice(0,selectionStart).split(\"\\n\").length-1,startRange.compareEndPoints(\"EndToEnd\",endRange)>-1?selectionEnd=lenght:(selectionEnd=-startRange.moveEnd(\"character\",-lenght),selectionEnd+=normalizedValue.slice(0,selectionEnd).split(\"\\n\").length-1))}}return{selectionStart:selectionStart,selectionEnd:selectionEnd}}get rawValue(){return this.htmlInputElement&&this.htmlInputElement.value}set rawValue(value){this._storedRawValue=value,this.htmlInputElement&&(this.htmlInputElement.value=value)}get storedRawValue(){return this._storedRawValue||\"\"}}class InputService{constructor(htmlInputElement,options){this.htmlInputElement=htmlInputElement,this.options=options,this.SINGLE_DIGIT_REGEX=new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/),this.ONLY_NUMBERS_REGEX=new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g),this.PER_AR_NUMBER=new Map,this.inputManager=new InputManager(htmlInputElement),this.initialize()}initialize(){this.PER_AR_NUMBER.set(\"۰\",\"0\"),this.PER_AR_NUMBER.set(\"۱\",\"1\"),this.PER_AR_NUMBER.set(\"۲\",\"2\"),this.PER_AR_NUMBER.set(\"۳\",\"3\"),this.PER_AR_NUMBER.set(\"۴\",\"4\"),this.PER_AR_NUMBER.set(\"۵\",\"5\"),this.PER_AR_NUMBER.set(\"۶\",\"6\"),this.PER_AR_NUMBER.set(\"۷\",\"7\"),this.PER_AR_NUMBER.set(\"۸\",\"8\"),this.PER_AR_NUMBER.set(\"۹\",\"9\"),this.PER_AR_NUMBER.set(\"٠\",\"0\"),this.PER_AR_NUMBER.set(\"١\",\"1\"),this.PER_AR_NUMBER.set(\"٢\",\"2\"),this.PER_AR_NUMBER.set(\"٣\",\"3\"),this.PER_AR_NUMBER.set(\"٤\",\"4\"),this.PER_AR_NUMBER.set(\"٥\",\"5\"),this.PER_AR_NUMBER.set(\"٦\",\"6\"),this.PER_AR_NUMBER.set(\"٧\",\"7\"),this.PER_AR_NUMBER.set(\"٨\",\"8\"),this.PER_AR_NUMBER.set(\"٩\",\"9\")}addNumber(keyCode){const{decimal:decimal,precision:precision,inputMode:inputMode}=this.options;let keyChar=String.fromCharCode(keyCode);const isDecimalChar=keyChar===this.options.decimal;if(this.rawValue){let selectionStart=this.inputSelection.selectionStart,selectionEnd=this.inputSelection.selectionEnd;const rawValueStart=this.rawValue.substring(0,selectionStart);let rawValueEnd=this.rawValue.substring(selectionEnd,this.rawValue.length);const inDecimalPortion=-1!==rawValueStart.indexOf(decimal);inputMode===CurrencyMaskInputMode.NATURAL&&inDecimalPortion&&selectionStart===selectionEnd&&(rawValueEnd=rawValueEnd.substring(1));const newValue=rawValueStart+keyChar+rawValueEnd;let nextSelectionStart=selectionStart+1;if(!isDecimalChar&&keyChar!==this.options.thousands||keyChar!==rawValueEnd[0]){if(!this.SINGLE_DIGIT_REGEX.test(keyChar))return}else nextSelectionStart++;this.rawValue=newValue,this.updateFieldValue(nextSelectionStart)}else{let selectionStart;this.rawValue=this.applyMask(!1,keyChar),inputMode===CurrencyMaskInputMode.NATURAL&&precision>0&&(selectionStart=this.rawValue.indexOf(decimal),isDecimalChar&&selectionStart++),this.updateFieldValue(selectionStart)}}applyMask(isNumber,rawValue,disablePadAndTrim=!1){let{allowNegative:allowNegative,decimal:decimal,precision:precision,prefix:prefix,suffix:suffix,thousands:thousands,min:min,max:max,inputMode:inputMode}=this.options,onlyNumbers=(rawValue=isNumber?new Number(rawValue).toFixed(precision):rawValue).replace(this.ONLY_NUMBERS_REGEX,\"\");if(!onlyNumbers&&rawValue!==decimal)return\"\";inputMode!==CurrencyMaskInputMode.NATURAL||isNumber||disablePadAndTrim||(onlyNumbers=(rawValue=this.padOrTrimPrecision(rawValue)).replace(this.ONLY_NUMBERS_REGEX,\"\"));let integerPart=onlyNumbers.slice(0,onlyNumbers.length-precision).replace(/^\\u0660*/g,\"\").replace(/^\\u06F0*/g,\"\").replace(/^0*/g,\"\");\"\"==integerPart&&(integerPart=\"0\");let integerValue=parseInt(integerPart);integerPart=integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g,thousands),thousands&&integerPart.startsWith(thousands)&&(integerPart=integerPart.substring(1));let newRawValue=integerPart,decimalPart=onlyNumbers.slice(onlyNumbers.length-precision),decimalValue=parseInt(decimalPart)||0,isNegative=rawValue.indexOf(\"-\")>-1;max=this.isNullOrUndefined(max)||this.isNullOrUndefined(min)?max:Math.max(max,min);let newValue=integerValue+decimalValue/100;return newValue=isNegative?-newValue:newValue,!this.isNullOrUndefined(max)&&newValue>max?this.applyMask(!0,max+\"\"):!this.isNullOrUndefined(min)&&newValue<min?this.applyMask(!0,min+\"\"):(precision>0&&(newRawValue+=\"0\"==newRawValue&&decimalPart.length<precision?decimal+\"0\".repeat(precision-1)+decimalPart:decimal+decimalPart),(isNegative&&allowNegative&&0!=newValue?\"-\":\"\")+prefix+newRawValue+suffix)}padOrTrimPrecision(rawValue){let{decimal:decimal,precision:precision}=this.options,decimalIndex=rawValue.lastIndexOf(decimal);-1===decimalIndex&&(decimalIndex=rawValue.length,rawValue+=decimal);let decimalPortion=rawValue.substring(decimalIndex).replace(this.ONLY_NUMBERS_REGEX,\"\");const actualPrecision=decimalPortion.length;if(actualPrecision<precision)for(let i=actualPrecision;i<precision;i++)decimalPortion+=\"0\";else actualPrecision>precision&&(decimalPortion=decimalPortion.substring(0,decimalPortion.length+precision-actualPrecision));return rawValue.substring(0,decimalIndex)+decimal+decimalPortion}clearMask(rawValue){if(this.isNullable()&&\"\"===rawValue)return null;let value=(rawValue||\"0\").replace(this.options.prefix,\"\").replace(this.options.suffix,\"\");return this.options.thousands&&(value=value.replace(new RegExp(\"\\\\\"+this.options.thousands,\"g\"),\"\")),this.options.decimal&&(value=value.replace(this.options.decimal,\".\")),this.PER_AR_NUMBER.forEach((val,key)=>{const re=new RegExp(key,\"g\");value=value.replace(re,val)}),parseFloat(value)}changeToNegative(){this.options.allowNegative&&\"\"!=this.rawValue&&\"-\"!=this.rawValue.charAt(0)&&0!=this.value&&(this.rawValue=this.applyMask(!1,\"-\"+this.rawValue))}changeToPositive(){this.rawValue=this.applyMask(!1,this.rawValue.replace(\"-\",\"\"))}removeNumber(keyCode){let{decimal:decimal,thousands:thousands,prefix:prefix,suffix:suffix,inputMode:inputMode}=this.options;if(this.isNullable()&&0==this.value)return void(this.rawValue=null);let selectionEnd=this.inputSelection.selectionEnd,selectionStart=this.inputSelection.selectionStart;const suffixStart=this.rawValue.length-suffix.length;if(selectionEnd=Math.min(suffixStart,Math.max(selectionEnd,prefix.length)),selectionStart=Math.min(suffixStart,Math.max(selectionStart,prefix.length)),selectionStart===selectionEnd&&this.inputSelection.selectionStart!==this.inputSelection.selectionEnd)return void this.updateFieldValue(selectionStart);let decimalIndex=this.rawValue.indexOf(decimal);-1===decimalIndex&&(decimalIndex=this.rawValue.length);let shiftSelection=0,insertChars=\"\";const isCursorInDecimals=decimalIndex<selectionEnd,isCursorImmediatelyAfterDecimalPoint=decimalIndex+1===selectionEnd;if(selectionEnd===selectionStart)if(8==keyCode){if(selectionStart<=prefix.length)return;selectionStart--,this.rawValue.substr(selectionStart,1).match(/\\d/)||selectionStart--,inputMode===CurrencyMaskInputMode.NATURAL&&isCursorInDecimals&&(shiftSelection=-1,isCursorImmediatelyAfterDecimalPoint&&this.value<10&&this.value>-10&&(insertChars+=\"0\"))}else if(46==keyCode||63272==keyCode){if(selectionStart===suffixStart)return;selectionEnd++,this.rawValue.substr(selectionStart,1).match(/\\d/)||(selectionStart++,selectionEnd++)}if(inputMode===CurrencyMaskInputMode.NATURAL&&selectionStart>decimalIndex){const replacedDecimalCount=selectionEnd-selectionStart;for(let i=0;i<replacedDecimalCount;i++)insertChars+=\"0\"}let selectionFromEnd=this.rawValue.length-selectionEnd;this.rawValue=this.rawValue.substring(0,selectionStart)+insertChars+this.rawValue.substring(selectionEnd),this.rawValue.substr(prefix.length,1)===thousands&&(this.rawValue=this.rawValue.substring(0,prefix.length)+this.rawValue.substring(prefix.length+1),selectionFromEnd=Math.min(selectionFromEnd,this.rawValue.length-prefix.length)),this.updateFieldValue(this.rawValue.length-selectionFromEnd+shiftSelection,!0)}updateFieldValue(selectionStart,disablePadAndTrim=!1){let newRawValue=this.applyMask(!1,this.rawValue||\"\",disablePadAndTrim);selectionStart=null==selectionStart?this.rawValue.length:selectionStart,selectionStart=Math.max(this.options.prefix.length,Math.min(selectionStart,this.rawValue.length-this.options.suffix.length)),this.inputManager.updateValueAndCursor(newRawValue,this.rawValue.length,selectionStart)}updateOptions(options){let value=this.value;this.options=options,this.value=value}prefixLength(){return this.options.prefix.length}suffixLength(){return this.options.suffix.length}isNullable(){return this.options.nullable}get canInputMoreNumbers(){return this.inputManager.canInputMoreNumbers}get inputSelection(){return this.inputManager.inputSelection}get rawValue(){return this.inputManager.rawValue}set rawValue(value){this.inputManager.rawValue=value}get storedRawValue(){return this.inputManager.storedRawValue}get value(){return this.clearMask(this.rawValue)}set value(value){this.rawValue=this.applyMask(!0,\"\"+value)}isNullOrUndefined(value){return null==value}}class InputHandler{constructor(htmlInputElement,options){this.inputService=new InputService(htmlInputElement,options)}handleCut(event){setTimeout(()=>{this.inputService.updateFieldValue(),this.setValue(this.inputService.value),this.onModelChange(this.inputService.value)},0)}handleInput(event){let selectionStart=this.inputService.inputSelection.selectionStart,keyCode=this.inputService.rawValue.charCodeAt(selectionStart-1),rawValueLength=this.inputService.rawValue.length,storedRawValueLength=this.inputService.storedRawValue.length;if(1!=Math.abs(rawValueLength-storedRawValueLength))return this.inputService.updateFieldValue(selectionStart),void this.onModelChange(this.inputService.value);this.inputService.rawValue=this.inputService.storedRawValue,rawValueLength<storedRawValueLength&&this.timer(()=>{this.inputService.updateFieldValue(selectionStart+1),this.inputService.removeNumber(8),this.onModelChange(this.inputService.value)},0),rawValueLength>storedRawValueLength&&(this.inputService.updateFieldValue(selectionStart-1),this.handleKeypressImpl(keyCode))}handleKeydown(event){let keyCode=event.which||event.charCode||event.keyCode;8!=keyCode&&46!=keyCode&&63272!=keyCode||(event.preventDefault(),this.inputService.inputSelection.selectionStart<=this.inputService.prefixLength()&&this.inputService.inputSelection.selectionEnd>=this.inputService.rawValue.length-this.inputService.suffixLength()?this.clearValue():(this.inputService.removeNumber(keyCode),this.onModelChange(this.inputService.value)))}clearValue(){this.setValue(this.inputService.isNullable()?null:0),this.onModelChange(this.inputService.value)}handleKeypress(event){let keyCode=event.which||event.charCode||event.keyCode;event.preventDefault(),97===keyCode&&event.ctrlKey||this.handleKeypressImpl(keyCode)}handleKeypressImpl(keyCode){switch(keyCode){case void 0:case 9:case 13:return;case 43:this.inputService.changeToPositive();break;case 45:this.inputService.changeToNegative();break;default:this.inputService.canInputMoreNumbers&&(Math.abs(this.inputService.inputSelection.selectionEnd-this.inputService.inputSelection.selectionStart)==this.inputService.rawValue.length&&this.setValue(null),this.inputService.addNumber(keyCode))}this.onModelChange(this.inputService.value)}handlePaste(event){setTimeout(()=>{this.inputService.updateFieldValue(),this.setValue(this.inputService.value),this.onModelChange(this.inputService.value)},1)}updateOptions(options){this.inputService.updateOptions(options)}getOnModelChange(){return this.onModelChange}setOnModelChange(callbackFunction){this.onModelChange=callbackFunction}getOnModelTouched(){return this.onModelTouched}setOnModelTouched(callbackFunction){this.onModelTouched=callbackFunction}setValue(value){this.inputService.value=value}timer(callback,delayMillis){setTimeout(callback,delayMillis)}}const CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR={provide:_angular_forms__WEBPACK_IMPORTED_MODULE_1__.n,useExisting:Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__.bb)(()=>CurrencyMaskDirective),multi:!0};let CurrencyMaskDirective=(()=>{class CurrencyMaskDirective{constructor(currencyMaskConfig,elementRef,keyValueDiffers){this.currencyMaskConfig=currencyMaskConfig,this.elementRef=elementRef,this.keyValueDiffers=keyValueDiffers,this.options={},this.optionsTemplate={align:\"right\",allowNegative:!0,allowZero:!0,decimal:\".\",precision:2,prefix:\"$ \",suffix:\"\",thousands:\",\",nullable:!1,inputMode:CurrencyMaskInputMode.FINANCIAL},currencyMaskConfig&&(this.optionsTemplate=currencyMaskConfig),this.keyValueDiffer=keyValueDiffers.find({}).create()}ngAfterViewInit(){this.elementRef.nativeElement.style.textAlign=this.options&&this.options.align?this.options.align:this.optionsTemplate.align}ngDoCheck(){this.keyValueDiffer.diff(this.options)&&(this.elementRef.nativeElement.style.textAlign=this.options.align?this.options.align:this.optionsTemplate.align,this.inputHandler.updateOptions(Object.assign({},this.optionsTemplate,this.options)))}ngOnInit(){this.inputHandler=new InputHandler(this.elementRef.nativeElement,Object.assign({},this.optionsTemplate,this.options))}handleBlur(event){this.inputHandler.getOnModelTouched().apply(event)}handleCut(event){this.isChromeAndroid()||!this.isReadOnly()&&this.inputHandler.handleCut(event)}handleInput(event){this.isChromeAndroid()&&!this.isReadOnly()&&this.inputHandler.handleInput(event)}handleKeydown(event){this.isChromeAndroid()||!this.isReadOnly()&&this.inputHandler.handleKeydown(event)}handleKeypress(event){this.isChromeAndroid()||!this.isReadOnly()&&this.inputHandler.handleKeypress(event)}handlePaste(event){this.isChromeAndroid()||!this.isReadOnly()&&this.inputHandler.handlePaste(event)}handleDrop(event){this.isChromeAndroid()||event.preventDefault()}isChromeAndroid(){return/chrome/i.test(navigator.userAgent)&&/android/i.test(navigator.userAgent)}isReadOnly(){return this.elementRef.nativeElement.hasAttribute(\"readonly\")}registerOnChange(callbackFunction){this.inputHandler.setOnModelChange(callbackFunction)}registerOnTouched(callbackFunction){this.inputHandler.setOnModelTouched(callbackFunction)}setDisabledState(value){this.elementRef.nativeElement.disabled=value}writeValue(value){this.inputHandler.setValue(value)}}return CurrencyMaskDirective.ɵfac=function(t){return new(t||CurrencyMaskDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__.Wb(CURRENCY_MASK_CONFIG,8),_angular_core__WEBPACK_IMPORTED_MODULE_0__.Wb(_angular_core__WEBPACK_IMPORTED_MODULE_0__.n),_angular_core__WEBPACK_IMPORTED_MODULE_0__.Wb(_angular_core__WEBPACK_IMPORTED_MODULE_0__.x))},CurrencyMaskDirective.ɵdir=_angular_core__WEBPACK_IMPORTED_MODULE_0__.Rb({type:CurrencyMaskDirective,selectors:[[\"\",\"currencyMask\",\"\"]],hostBindings:function(rf,ctx){1&rf&&_angular_core__WEBPACK_IMPORTED_MODULE_0__.mc(\"blur\",function($event){return ctx.handleBlur($event)})(\"cut\",function($event){return ctx.handleCut($event)})(\"input\",function($event){return ctx.handleInput($event)})(\"keydown\",function($event){return ctx.handleKeydown($event)})(\"keypress\",function($event){return ctx.handleKeypress($event)})(\"paste\",function($event){return ctx.handlePaste($event)})(\"drop\",function($event){return ctx.handleDrop($event)})},inputs:{options:\"options\"},features:[_angular_core__WEBPACK_IMPORTED_MODULE_0__.Hb([CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR])]}),CurrencyMaskDirective})(),NgxCurrencyModule=(()=>{class NgxCurrencyModule{static forRoot(config){return{ngModule:NgxCurrencyModule,providers:[{provide:CURRENCY_MASK_CONFIG,useValue:config}]}}}return NgxCurrencyModule.ɵfac=function(t){return new(t||NgxCurrencyModule)},NgxCurrencyModule.ɵmod=_angular_core__WEBPACK_IMPORTED_MODULE_0__.Ub({type:NgxCurrencyModule}),NgxCurrencyModule.ɵinj=_angular_core__WEBPACK_IMPORTED_MODULE_0__.Tb({imports:[[_angular_common__WEBPACK_IMPORTED_MODULE_2__.c,_angular_forms__WEBPACK_IMPORTED_MODULE_1__.j]]}),NgxCurrencyModule})()},zrcO:function(module,__webpack_exports__,__webpack_require__){\"use strict\";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,\"customCurrencyMaskConfig\",function(){return customCurrencyMaskConfig}),__webpack_require__.d(__webpack_exports__,\"UsersModule\",function(){return users_module_UsersModule});var common=__webpack_require__(\"ofXK\"),core=__webpack_require__(\"fXoL\"),Subject=__webpack_require__(\"oXA7\");__webpack_require__(\"KOvq\"),__webpack_require__(\"X/DG\"),__webpack_require__(\"bk9D\"),__webpack_require__(\"mrSG\");let swimlane_ngx_datatable_ScrollbarHelper=(()=>{class ScrollbarHelper{constructor(document){this.document=document,this.width=this.getWidth()}getWidth(){const outer=this.document.createElement(\"div\");outer.style.visibility=\"hidden\",outer.style.width=\"100px\",outer.style.msOverflowStyle=\"scrollbar\",this.document.body.appendChild(outer);const widthNoScroll=outer.offsetWidth;outer.style.overflow=\"scroll\";const inner=this.document.createElement(\"div\");inner.style.width=\"100%\",outer.appendChild(inner);const widthWithScroll=inner.offsetWidth;return outer.parentNode.removeChild(outer),widthNoScroll-widthWithScroll}}return ScrollbarHelper.ɵfac=function(t){return new(t||ScrollbarHelper)(core.jc(common.e))},ScrollbarHelper.ɵprov=core.Sb({token:ScrollbarHelper,factory:ScrollbarHelper.ɵfac}),ScrollbarHelper})(),swimlane_ngx_datatable_DimensionsHelper=(()=>{class DimensionsHelper{getDimensions(element){return element.getBoundingClientRect()}}return DimensionsHelper.ɵfac=function(t){return new(t||DimensionsHelper)},DimensionsHelper.ɵprov=core.Sb({token:DimensionsHelper,factory:DimensionsHelper.ɵfac}),DimensionsHelper})(),swimlane_ngx_datatable_ColumnChangesService=(()=>{class ColumnChangesService{constructor(){this.columnInputChanges=new Subject.a}get columnInputChanges$(){return this.columnInputChanges.asObservable()}onInputChange(){this.columnInputChanges.next()}}return ColumnChangesService.ɵfac=function(t){return new(t||ColumnChangesService)},ColumnChangesService.ɵprov=core.Sb({token:ColumnChangesService,factory:ColumnChangesService.ɵfac}),ColumnChangesService})();const cache={},testStyle=\"undefined\"!=typeof document?document.createElement(\"div\").style:void 0,prefix=function(){const styles=\"undefined\"!=typeof window?window.getComputedStyle(document.documentElement,\"\"):void 0,match=void 0!==styles?Array.prototype.slice.call(styles).join(\"\").match(/-(moz|webkit|ms)-/):null,pre=null!==match?match[1]:void 0,dom=void 0!==pre?\"WebKit|Moz|MS|O\".match(new RegExp(\"(\"+pre+\")\",\"i\"))[1]:void 0;return dom?{dom:dom,lowercase:pre,css:`-${pre}-`,js:pre[0].toUpperCase()+pre.substr(1)}:void 0}();function getVendorPrefixedName(property){const name=property.replace(/[^a-zA-Z0-9 ]/g,\" \").replace(/([a-z](?=[A-Z]))/g,\"$1 \").replace(/([^a-zA-Z0-9 ])|^[0-9]+/g,\"\").trim().toLowerCase().replace(/([ 0-9]+)([a-zA-Z])/g,function(a,b,c){return b.trim()+c.toUpperCase()});return cache[name]||(void 0!==prefix&&void 0!==testStyle[prefix.css+property]?cache[name]=prefix.css+property:void 0!==testStyle[property]&&(cache[name]=property)),cache[name]}\"undefined\"!=typeof window&&getVendorPrefixedName(\"transform\"),\"undefined\"!=typeof window&&getVendorPrefixedName(\"backfaceVisibility\"),\"undefined\"!=typeof window&&getVendorPrefixedName(\"transform\"),\"undefined\"!=typeof window&&getVendorPrefixedName(\"perspective\");const ua=\"undefined\"!=typeof window?window.navigator.userAgent:\"Chrome\";/Safari\\//.test(ua)&&/Chrome\\//.test(ua);let swimlane_ngx_datatable_NgxDatatableModule=(()=>{class NgxDatatableModule{static forRoot(configuration){return{ngModule:NgxDatatableModule,providers:[{provide:\"configuration\",useValue:configuration}]}}}return NgxDatatableModule.ɵfac=function(t){return new(t||NgxDatatableModule)},NgxDatatableModule.ɵmod=core.Ub({type:NgxDatatableModule}),NgxDatatableModule.ɵinj=core.Tb({providers:[swimlane_ngx_datatable_ScrollbarHelper,swimlane_ngx_datatable_DimensionsHelper,swimlane_ngx_datatable_ColumnChangesService],imports:[[common.c]]}),NgxDatatableModule})();\"undefined\"==typeof document||document.elementsFromPoint||(document.elementsFromPoint=function(x,y){const elements=[],previousPointerEvents=[];let current,i,d;for(;(current=document.elementFromPoint(x,y))&&-1===elements.indexOf(current)&&null!=current;)elements.push(current),previousPointerEvents.push({value:current.style.getPropertyValue(\"pointer-events\"),priority:current.style.getPropertyPriority(\"pointer-events\")}),current.style.setProperty(\"pointer-events\",\"none\",\"important\");for(i=previousPointerEvents.length;d=previousPointerEvents[--i];)elements[i].style.setProperty(\"pointer-events\",d.value?d.value:\"\",d.priority);return elements});var fesm2015_forms=__webpack_require__(\"3Pt+\"),ng_select_ng_select=__webpack_require__(\"ZOsW\"),jqwidgets_ng_jqxgrid=__webpack_require__(\"aSZe\"),jqwidgets_ng_jqxmenu=__webpack_require__(\"7M0M\"),ng_fallimg=__webpack_require__(\"wjyA\"),ng_bootstrap=__webpack_require__(\"1kSV\"),ngx_currency=__webpack_require__(\"TT0I\"),ngx_spinner=__webpack_require__(\"JqCM\"),core_module=__webpack_require__(\"pKmL\"),ngx_translate_core=__webpack_require__(\"sYmb\"),fesm2015_http=__webpack_require__(\"tk/3\"),ngx_translate_http_loader=__webpack_require__(\"mqiu\"),ui_switch_es2015=__webpack_require__(\"S2BM\"),fesm2015_router=__webpack_require__(\"tyNb\");let users_component_UsersComponent=(()=>{class UsersComponent{}return UsersComponent.ɵfac=function(t){return new(t||UsersComponent)},UsersComponent.ɵcmp=core.Qb({type:UsersComponent,selectors:[[\"app-users\"]],decls:1,vars:0,template:function(rf,ctx){1&rf&&core.Xb(0,\"router-outlet\")},directives:[fesm2015_router.g],encapsulation:2}),UsersComponent})();var jqx_custom_grid_component=__webpack_require__(\"py8Q\"),utils=__webpack_require__(\"YMfE\");const users_list_component_c0=[\"customGrid\"],users_list_component_c1=[\"searchField\"];function UsersListComponent_div_66_Template(rf,ctx){if(1&rf){const _r5=core.dc();core.cc(0,\"div\"),core.cc(1,\"button\",21),core.mc(\"click\",function(){return core.Lc(_r5),core.oc().importData()}),core.Xb(2,\"i\",33),core.Uc(3),core.pc(4,\"translate\"),core.bc(),core.bc()}if(2&rf){const ctx_r1=core.oc();core.Ib(1),core.vc(\"disabled\",ctx_r1.loading),core.Ib(2),core.Wc(\" \",core.qc(4,2,\"buttons.import\"),\" \")}}let users_list_component_UsersListComponent=(()=>{class UsersListComponent extends jqx_custom_grid_component.a{constructor(msg,api,router,translate,aRouter){super(msg,api,router,translate,aRouter),this.msg=msg,this.api=api,this.router=router,this.translate=translate,this.aRouter=aRouter,this.title=\"Lista de usuarios\"}ngOnInit(){this.changeLanguage(this.activeLang)}ngAfterViewInit(){const ts=this;ts.crudApi={create:\"/users/create\",read:\"/users/read\",update:\"/users/update/\",delete:\"/users/delete/\"},ts.showActions=!0,ts.showRowNumber=!0,ts.pagesize=10,ts.datafields=[{name:\"active\",type:\"bool\"},{name:\"logo\",type:\"string\"},{name:\"email\",type:\"string\"},{name:\"first_name\",type:\"string\"},{name:\"last_name\",type:\"string\"},{name:\"user_type\",type:\"string\"},{name:\"type_id\",type:\"number\"},{name:\"id\",type:\"number\"}],ts.sourceColumns=[{text:\"Nombre\",datafield:\"first_name\",align:\"center\",cellsalign:\"left\",minWidth:200},{text:\"Apeillido\",datafield:\"last_name\",align:\"center\",cellsalign:\"left\",minWidth:200},{text:\"Usuario\",align:\"center\",datafield:\"email\",minWidth:150,width:200},{text:\"Tipo\",align:\"center\",datafield:\"user_type\",minWidth:100,width:150},{text:\"Activo\",align:\"center\",datafield:\"active\",minWidth:50,width:90,columntype:\"checkbox\",threestatecheckbox:!0}],this.prepareGrid()}createData(){super.createData(),this.goRoute(\"users/create\")}editData(data){super.editData(data),this.goRoute(`users/edit/${data.id}`)}}return UsersListComponent.ɵfac=function(t){return new(t||UsersListComponent)(core.Wb(utils.b),core.Wb(utils.a),core.Wb(fesm2015_router.c),core.Wb(ngx_translate_core.d),core.Wb(fesm2015_router.a))},UsersListComponent.ɵcmp=core.Qb({type:UsersListComponent,selectors:[[\"app-users-list\"]],viewQuery:function(rf,ctx){if(1&rf&&(core.Zc(users_list_component_c0,1),core.Zc(users_list_component_c1,1)),2&rf){let _t;core.Hc(_t=core.nc())&&(ctx.customGrid=_t.first),core.Hc(_t=core.nc())&&(ctx.searchField=_t.first)}},features:[core.Fb],decls:77,vars:38,consts:[[1,\"card\"],[1,\"card-header\"],[1,\"card-title\"],[1,\"menuExport\"],[1,\"space-right\"],[1,\"btn\",\"btn-danger\",\"round\",\"mr-1\",\"mb-1\",3,\"disabled\",\"click\"],[1,\"fa\",\"fa-sync\",\"mr-1\",\"fas-fa-22\"],[1,\"myMenu\",\"space-right\"],[1,\"clearColor\",3,\"height\",\"onItemclick\"],[\"myMenu\",\"\"],[\"id\",\"Exports\"],[1,\"fas\",\"fa-cog\",\"fas-fa-22\",\"fas-fa-red\"],[\"href\",\"javascript:void(0)\"],[2,\"width\",\"200px\"],[1,\"fas\",\"fa-file-excel\",\"fas-fa-xls\"],[1,\"fas\",\"fa-file-csv\",\"fas-fa-xls\"],[\"type\",\"separator\"],[1,\"fas\",\"fa-file-pdf\",\"fas-fa-pdf\"],[1,\"fas\",\"fa-file-code\",\"fas-fa-code\"],[1,\"fas\",\"fa-print\",\"fas-fa-print\"],[1,\"margin-left\",\"space-right\"],[1,\"btn\",\"btn-success\",\"round\",\"mr-1\",\"mb-1\",3,\"disabled\",\"click\"],[1,\"fa\",\"fa-plus\",\"mr-1\",\"fas-fa-22\"],[4,\"ngIf\"],[1,\"container-fluid\"],[1,\"input-group\"],[\"type\",\"text\",\"autofocus\",\"\",1,\"form-control\",3,\"placeholder\",\"keyup\"],[\"searchField\",\"\"],[1,\"input-group-append\"],[1,\"btn\",\"btn-primary\",3,\"disabled\",\"click\"],[1,\"fa\",\"fa-search\"],[\"width\",\"100%\",3,\"disabled\",\"auto-create\",\"onCellselect\",\"onBindingcomplete\"],[\"customGrid\",\"\"],[1,\"fa\",\"fa-upload\",\"mr-1\",\"fas-fa-22\"]],template:function(rf,ctx){1&rf&&(core.cc(0,\"div\",0),core.cc(1,\"div\",1),core.cc(2,\"h4\",2),core.Uc(3),core.pc(4,\"uppercase\"),core.bc(),core.bc(),core.cc(5,\"div\",0),core.cc(6,\"div\",3),core.cc(7,\"div\",4),core.cc(8,\"button\",5),core.mc(\"click\",function(){return ctx.searchQuery()}),core.Xb(9,\"i\",6),core.bc(),core.bc(),core.cc(10,\"div\",7),core.cc(11,\"jqxMenu\",8,9),core.mc(\"onItemclick\",function($event){return ctx.itemclick($event)}),core.cc(13,\"ul\"),core.cc(14,\"li\",10),core.Xb(15,\"i\",11),core.Xb(16,\"a\",12),core.cc(17,\"ul\",13),core.cc(18,\"li\"),core.cc(19,\"a\",12),core.Xb(20,\"i\",14),core.Uc(21),core.pc(22,\"translate\"),core.bc(),core.bc(),core.cc(23,\"li\"),core.cc(24,\"a\",12),core.Xb(25,\"i\",15),core.Uc(26),core.pc(27,\"translate\"),core.bc(),core.bc(),core.cc(28,\"li\"),core.cc(29,\"a\",12),core.Xb(30,\"i\",14),core.Uc(31),core.pc(32,\"translate\"),core.bc(),core.bc(),core.Xb(33,\"li\",16),core.cc(34,\"li\"),core.cc(35,\"a\",12),core.Xb(36,\"i\",17),core.Uc(37),core.pc(38,\"translate\"),core.bc(),core.bc(),core.Xb(39,\"li\",16),core.cc(40,\"li\"),core.cc(41,\"a\",12),core.Xb(42,\"i\",18),core.Uc(43),core.pc(44,\"translate\"),core.bc(),core.bc(),core.cc(45,\"li\"),core.cc(46,\"a\",12),core.Xb(47,\"i\",18),core.Uc(48),core.pc(49,\"translate\"),core.bc(),core.bc(),core.cc(50,\"li\"),core.cc(51,\"a\",12),core.Xb(52,\"i\",18),core.Uc(53),core.pc(54,\"translate\"),core.bc(),core.bc(),core.Xb(55,\"li\",16),core.cc(56,\"li\"),core.cc(57,\"a\",12),core.Xb(58,\"i\",19),core.Uc(59),core.pc(60,\"translate\"),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.cc(61,\"div\",20),core.cc(62,\"button\",21),core.mc(\"click\",function(){return ctx.createData()}),core.Xb(63,\"i\",22),core.Uc(64),core.pc(65,\"translate\"),core.bc(),core.bc(),core.Sc(66,UsersListComponent_div_66_Template,5,4,\"div\",23),core.bc(),core.cc(67,\"div\",24),core.cc(68,\"fieldset\"),core.cc(69,\"div\",25),core.cc(70,\"input\",26,27),core.mc(\"keyup\",function($event){return ctx.inputKey($event)}),core.bc(),core.cc(72,\"div\",28),core.cc(73,\"button\",29),core.mc(\"click\",function(){return ctx.searchQuery()}),core.Xb(74,\"i\",30),core.bc(),core.bc(),core.bc(),core.bc(),core.cc(75,\"jqxGrid\",31,32),core.mc(\"onCellselect\",function($event){return ctx.cellClick($event)})(\"onBindingcomplete\",function($event){return ctx.Bindingcomplete($event)}),core.bc(),core.bc(),core.bc(),core.bc()),2&rf&&(core.Ib(3),core.Vc(core.qc(4,18,ctx.title)),core.Ib(5),core.vc(\"disabled\",ctx.loading),core.Ib(3),core.vc(\"height\",36),core.Ib(10),core.Vc(core.qc(22,20,\"export.excel\")),core.Ib(5),core.Vc(core.qc(27,22,\"export.csv\")),core.Ib(5),core.Vc(core.qc(32,24,\"export.xml\")),core.Ib(6),core.Vc(core.qc(38,26,\"export.pdf\")),core.Ib(6),core.Vc(core.qc(44,28,\"export.html\")),core.Ib(5),core.Vc(core.qc(49,30,\"export.json\")),core.Ib(5),core.Vc(core.qc(54,32,\"export.tsv\")),core.Ib(6),core.Vc(core.qc(60,34,\"export.print\")),core.Ib(3),core.vc(\"disabled\",ctx.loading),core.Ib(2),core.Wc(\" \",core.qc(65,36,\"buttons.new\"),\" \"),core.Ib(2),core.vc(\"ngIf\",ctx.useImport),core.Ib(4),core.vc(\"placeholder\",ctx.placeholderSearch),core.Ib(3),core.vc(\"disabled\",ctx.loading),core.Ib(2),core.vc(\"disabled\",ctx.loading)(\"auto-create\",!1))},directives:[jqwidgets_ng_jqxmenu.a,common.n,jqwidgets_ng_jqxgrid.a],pipes:[common.v,ngx_translate_core.c],encapsulation:2}),UsersListComponent})();var form_component=__webpack_require__(\"TK7J\"),map=__webpack_require__(\"rdQv\"),api_server_service=__webpack_require__(\"C6Ca\");let users_service_UsersService=(()=>{class UsersService{constructor(api){this.api=api}getUserTpes(){return this.api.get(\"/users/types\").pipe(Object(map.a)(resp=>resp.records))}getProfile(){return this.api.get(\"/users/profile\").pipe(Object(map.a)(resp=>resp.records))}getData(params){return this.api.get(\"/users/read\",params).pipe(Object(map.a)(resp=>resp.records))}}return UsersService.ɵfac=function(t){return new(t||UsersService)(core.jc(api_server_service.a))},UsersService.ɵprov=core.Sb({token:UsersService,factory:UsersService.ɵfac,providedIn:\"root\"}),UsersService})();var footer_form_component=__webpack_require__(\"uHPU\");const users_edit_component_c0=[\"uploadFile\"],users_edit_component_c1=[\"imgUp\"],users_edit_component_c2=[\"focusElement\"];function UsersEditComponent_ng_option_44_Template(rf,ctx){if(1&rf&&(core.cc(0,\"ng-option\",35),core.Uc(1),core.bc()),2&rf){const item_r3=ctx.$implicit;core.vc(\"value\",item_r3.id),core.Ib(1),core.Wc(\" \",item_r3.user_type_name,\" \")}}let users_edit_component_UsersEditComponent=(()=>{class UsersEditComponent extends form_component.a{constructor(fb,api,msg,router,translate,aRouter,spinner,usersSer){super(fb,msg,api,router,translate,aRouter,spinner),this.fb=fb,this.api=api,this.msg=msg,this.router=router,this.translate=translate,this.aRouter=aRouter,this.spinner=spinner,this.usersSer=usersSer,this.userTypes=[],this.title=\"Editar usuario\",this.customForm=this.fb.group({type_id:[1,[fesm2015_forms.y.required]],first_name:[\"\",[fesm2015_forms.y.required]],last_name:[\"\",[fesm2015_forms.y.required]],active:[!0,[fesm2015_forms.y.required]],email:[\"\",[fesm2015_forms.y.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$\")]]})}get invalidEmail(){return this.isInvalid(\"email\")}get invalidLastName(){return this.isInvalid(\"last_name\")}get invalidFirstName(){return this.isInvalid(\"first_name\")}ngOnInit(){super.ngOnInit();const ts=this;ts.PutURL=\"/users/update/\",ts.PostURL=\"/users/create\",ts.showSpinner(),ts.usersSer.getUserTpes().subscribe(resp=>{ts.userTypes=resp})}ngAfterViewInit(){super.ngAfterViewInit(),this.hideSpinner()}loadData(id=0){super.loadData(id);const ts=this,frm=ts.customForm;ts.editing=!0,ts.usersSer.getData({uid:id}).subscribe(resp=>{ts.hideSpinner(),frm.setValue({type_id:resp[0].type_id,last_name:resp[0].last_name,first_name:resp[0].first_name,active:resp[0].active,email:resp[0].email}),ts.imgData=resp[0].avatar?resp[0].avatar:\"\"},()=>ts.hideSpinner())}onResetForm(){let frm=this.customForm;super.onResetForm(frm),frm.setValue({type_id:1,first_name:\"\",last_name:\"\",active:!0,email:\"\"}),this.imgData=\"\"}}return UsersEditComponent.ɵfac=function(t){return new(t||UsersEditComponent)(core.Wb(fesm2015_forms.e),core.Wb(utils.a),core.Wb(utils.b),core.Wb(fesm2015_router.c),core.Wb(ngx_translate_core.d),core.Wb(fesm2015_router.a),core.Wb(ngx_spinner.c),core.Wb(users_service_UsersService))},UsersEditComponent.ɵcmp=core.Qb({type:UsersEditComponent,selectors:[[\"app-users-edit\"]],viewQuery:function(rf,ctx){if(1&rf&&(core.Zc(users_edit_component_c0,1),core.Zc(users_edit_component_c1,1),core.Zc(users_edit_component_c2,1)),2&rf){let _t;core.Hc(_t=core.nc())&&(ctx.uploadFile=_t.first),core.Hc(_t=core.nc())&&(ctx.imgUp=_t.first),core.Hc(_t=core.nc())&&(ctx.focusElement=_t.first)}},features:[core.Fb],decls:52,vars:14,consts:[[1,\"users-edit\"],[1,\"row\"],[1,\"col-12\"],[1,\"card\"],[1,\"card-content\"],[1,\"card-header\"],[1,\"card-body\"],[\"id\",\"account\",1,\"mt-2\"],[1,\"media\"],[\"alt\",\"Avatar\",\"height\",\"64\",\"width\",\"64\",\"fallimg\",\"\",1,\"users-avatar-shadow\",\"avatar\",\"mr-3\",\"rounded-circle\",3,\"src\"],[1,\"media-body\"],[1,\"d-flex\",\"flex-sm-row\",\"flex-column\",\"justify-content-start\",\"px-0\",\"mb-sm-2\"],[1,\"form-group\"],[\"type\",\"file\",\"id\",\"file\",1,\"form-control-file\",3,\"change\"],[\"uploadFile\",\"\"],[3,\"formGroup\"],[1,\"col-12\",\"col-md-6\"],[1,\"controls\"],[\"for\",\"users-edit-username\"],[\"type\",\"email\",\"id\",\"users-edit-username\",\"required\",\"\",\"aria-invalid\",\"false\",\"formControlName\",\"email\",1,\"form-control\",3,\"readOnly\"],[\"focusElement\",\"\"],[1,\"col-12\",\"col-md-3\"],[\"for\",\"first-name\"],[\"type\",\"text\",\"id\",\"first-name\",\"required\",\"\",\"aria-invalid\",\"false\",\"formControlName\",\"first_name\",1,\"form-control\"],[\"for\",\"last-name\"],[\"type\",\"text\",\"id\",\"last-name\",\"required\",\"\",\"aria-invalid\",\"false\",\"formControlName\",\"last_name\",1,\"form-control\"],[1,\"col-12\",\"col-md-8\"],[\"formControlName\",\"type_id\",3,\"readonly\"],[3,\"value\",4,\"ngFor\",\"ngForOf\"],[1,\"col-12\",\"col-md-4\"],[1,\"form-group\",\"custom-control-inline\",\"mb-1\",\"mb-xl-0\",\"switchery-success\",\"align-items-center\"],[\"checked\",\"\",\"size\",\"large\",\"formControlName\",\"active\",1,\"switchery\"],[\"for\",\"switchery\",1,\"ml-2\"],[1,\"card-footer\"],[3,\"saveAClose\",\"closeEvent\",\"saveAndCreateEvent\",\"saveAndCloseEvent\"],[3,\"value\"]],template:function(rf,ctx){1&rf&&(core.cc(0,\"section\",0),core.cc(1,\"div\",1),core.cc(2,\"div\",2),core.cc(3,\"div\",3),core.cc(4,\"div\",4),core.cc(5,\"div\",5),core.cc(6,\"h4\"),core.cc(7,\"strong\"),core.Uc(8),core.bc(),core.bc(),core.bc(),core.cc(9,\"div\",6),core.cc(10,\"div\",7),core.cc(11,\"div\",8),core.Xb(12,\"img\",9),core.cc(13,\"div\",10),core.cc(14,\"h4\"),core.Uc(15,\"Avatar\"),core.bc(),core.cc(16,\"div\",11),core.cc(17,\"div\",12),core.cc(18,\"input\",13,14),core.mc(\"change\",function($event){return ctx.uploadImage($event)}),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.cc(20,\"form\",15),core.cc(21,\"div\",1),core.cc(22,\"div\",16),core.cc(23,\"div\",12),core.cc(24,\"div\",17),core.cc(25,\"label\",18),core.Uc(26,\"Nombre de usuario\"),core.bc(),core.Xb(27,\"input\",19,20),core.bc(),core.bc(),core.bc(),core.cc(29,\"div\",21),core.cc(30,\"div\",12),core.cc(31,\"div\",17),core.cc(32,\"label\",22),core.Uc(33,\"Nombre\"),core.bc(),core.Xb(34,\"input\",23),core.bc(),core.bc(),core.bc(),core.cc(35,\"div\",21),core.cc(36,\"div\",12),core.cc(37,\"div\",17),core.cc(38,\"label\",24),core.Uc(39,\"Apellido\"),core.bc(),core.Xb(40,\"input\",25),core.bc(),core.bc(),core.bc(),core.bc(),core.cc(41,\"div\",1),core.cc(42,\"div\",26),core.cc(43,\"ng-select\",27),core.Sc(44,UsersEditComponent_ng_option_44_Template,2,2,\"ng-option\",28),core.bc(),core.bc(),core.cc(45,\"div\",29),core.cc(46,\"div\",30),core.Xb(47,\"ui-switch\",31),core.cc(48,\"label\",32),core.Uc(49,\"Activo\"),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.cc(50,\"div\",33),core.cc(51,\"app-footer-form\",34),core.mc(\"closeEvent\",function(){return ctx.cancel()})(\"saveAndCreateEvent\",function(){return ctx.saveAndCreate()})(\"saveAndCloseEvent\",function(){return ctx.saveAndClose()}),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.bc()),2&rf&&(core.Ib(8),core.Wc(\" \",ctx.title,\" \"),core.Ib(4),core.vc(\"src\",ctx.imgData,core.Oc),core.Ib(8),core.vc(\"formGroup\",ctx.customForm),core.Ib(7),core.Ob(\"is-invalid\",ctx.invalidEmail),core.vc(\"readOnly\",ctx.editing),core.Ib(7),core.Ob(\"is-invalid\",ctx.invalidFirstName),core.Ib(6),core.Ob(\"is-invalid\",ctx.invalidLastName),core.Ib(3),core.vc(\"readonly\",ctx.editing),core.Ib(1),core.vc(\"ngForOf\",ctx.userTypes),core.Ib(7),core.vc(\"saveAClose\",ctx.saveAClose)(\"saveAClose\",ctx.saveAClose))},directives:[ng_fallimg.b,fesm2015_forms.z,fesm2015_forms.q,fesm2015_forms.h,fesm2015_forms.c,fesm2015_forms.w,fesm2015_forms.p,fesm2015_forms.g,ng_select_ng_select.a,common.m,ui_switch_es2015.a,footer_form_component.a,ng_select_ng_select.d],styles:[\"\"]}),UsersEditComponent})();const profile_component_c0=[\"uploadFile\"],profile_component_c1=[\"imgUp\"],profile_component_c2=[\"focusElement\"];function ProfileComponent_ng_option_44_Template(rf,ctx){if(1&rf&&(core.cc(0,\"ng-option\",35),core.Uc(1),core.bc()),2&rf){const item_r3=ctx.$implicit;core.vc(\"value\",item_r3.id),core.Ib(1),core.Wc(\" \",item_r3.user_type_name,\" \")}}const routes=[{path:\"\",component:users_component_UsersComponent,children:[{path:\"list\",component:users_list_component_UsersListComponent},{path:\"create\",component:users_edit_component_UsersEditComponent},{path:\"edit/:id\",component:users_edit_component_UsersEditComponent},{path:\"profile\",component:(()=>{class ProfileComponent extends form_component.a{constructor(fb,api,msg,router,translate,aRouter,spinner,usersSer){super(fb,msg,api,router,translate,aRouter,spinner),this.fb=fb,this.api=api,this.msg=msg,this.router=router,this.translate=translate,this.aRouter=aRouter,this.spinner=spinner,this.usersSer=usersSer,this.userTypes=[],this.title=\"Perfil de usuario\",this.customForm=this.fb.group({type_id:[1,[fesm2015_forms.y.required]],first_name:[\"\",[fesm2015_forms.y.required]],last_name:[\"\",[fesm2015_forms.y.required]],active:new fesm2015_forms.f({value:\"true\",disabled:!0},fesm2015_forms.y.required),email:[\"\",[fesm2015_forms.y.pattern(\"^[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$\")]]})}get invalidEmail(){return this.isInvalid(\"email\")}get invalidLastName(){return this.isInvalid(\"last_name\")}get invalidFirstName(){return this.isInvalid(\"first_name\")}ngOnInit(){super.ngOnInit();const ts=this;ts.PutURL=\"/users/update/\",ts.PostURL=\"/users/create\",ts.showSpinner(),ts.usersSer.getUserTpes().subscribe(resp=>{ts.userTypes=resp}),ts.loadData()}loadData(id=0){super.loadData(id);const ts=this,frm=ts.customForm;ts.usersSer.getProfile().subscribe(resp=>{localStorage.setItem(\"oldRoute\",\"/\"),ts.editing=!0,ts.hideSpinner(),ts.uid=resp[0].id,frm.setValue({type_id:resp[0].type_id,last_name:resp[0].last_name,first_name:resp[0].first_name,active:resp[0].active,email:resp[0].email}),ts.imgData=resp[0].avatar?resp[0].avatar:\"\"})}onResetForm(){let frm=this.customForm;super.onResetForm(frm),frm.setValue({type_id:1,first_name:\"\",last_name:\"\",active:!0,email:\"\"}),this.imgData=\"\"}}return ProfileComponent.ɵfac=function(t){return new(t||ProfileComponent)(core.Wb(fesm2015_forms.e),core.Wb(utils.a),core.Wb(utils.b),core.Wb(fesm2015_router.c),core.Wb(ngx_translate_core.d),core.Wb(fesm2015_router.a),core.Wb(ngx_spinner.c),core.Wb(users_service_UsersService))},ProfileComponent.ɵcmp=core.Qb({type:ProfileComponent,selectors:[[\"app-profile\"]],viewQuery:function(rf,ctx){if(1&rf&&(core.Zc(profile_component_c0,1),core.Zc(profile_component_c1,1),core.Zc(profile_component_c2,1)),2&rf){let _t;core.Hc(_t=core.nc())&&(ctx.uploadFile=_t.first),core.Hc(_t=core.nc())&&(ctx.imgUp=_t.first),core.Hc(_t=core.nc())&&(ctx.focusElement=_t.first)}},features:[core.Fb],decls:52,vars:13,consts:[[1,\"users-edit\"],[1,\"row\"],[1,\"col-12\"],[1,\"card\"],[1,\"card-content\"],[1,\"card-header\"],[1,\"card-body\"],[\"id\",\"account\",1,\"mt-2\"],[1,\"media\"],[\"alt\",\"Avatar\",\"height\",\"64\",\"width\",\"64\",\"fallimg\",\"\",1,\"users-avatar-shadow\",\"avatar\",\"mr-3\",\"rounded-circle\",3,\"src\"],[1,\"media-body\"],[1,\"d-flex\",\"flex-sm-row\",\"flex-column\",\"justify-content-start\",\"px-0\",\"mb-sm-2\"],[1,\"form-group\"],[\"type\",\"file\",\"id\",\"file\",1,\"form-control-file\",3,\"change\"],[\"uploadFile\",\"\"],[3,\"formGroup\"],[1,\"col-12\",\"col-md-6\"],[1,\"controls\"],[\"for\",\"users-edit-username\"],[\"type\",\"email\",\"id\",\"users-edit-username\",\"required\",\"\",\"aria-invalid\",\"false\",\"formControlName\",\"email\",1,\"form-control\",3,\"readOnly\"],[\"focusElement\",\"\"],[1,\"col-12\",\"col-md-3\"],[\"for\",\"users-edit-name\"],[\"type\",\"text\",\"id\",\"users-edit-name\",\"required\",\"\",\"aria-invalid\",\"false\",\"formControlName\",\"first_name\",1,\"form-control\"],[\"for\",\"last-name\"],[\"type\",\"text\",\"id\",\"last-name\",\"required\",\"\",\"aria-invalid\",\"false\",\"formControlName\",\"last_name\",1,\"form-control\"],[1,\"col-12\",\"col-md-8\"],[\"formControlName\",\"type_id\",3,\"readonly\"],[3,\"value\",4,\"ngFor\",\"ngForOf\"],[1,\"col-12\",\"col-md-4\"],[1,\"form-group\",\"custom-control-inline\",\"mb-1\",\"mb-xl-0\",\"switchery-success\",\"align-items-center\"],[\"checked\",\"\",\"size\",\"large\",\"formControlName\",\"active\",1,\"switchery\"],[\"for\",\"switchery\",1,\"ml-2\"],[1,\"card-footer\"],[3,\"showAaveACreate\",\"saveAClose\",\"closeEvent\",\"saveAndCreateEvent\",\"saveAndCloseEvent\"],[3,\"value\"]],template:function(rf,ctx){1&rf&&(core.cc(0,\"section\",0),core.cc(1,\"div\",1),core.cc(2,\"div\",2),core.cc(3,\"div\",3),core.cc(4,\"div\",4),core.cc(5,\"div\",5),core.cc(6,\"h4\"),core.cc(7,\"strong\"),core.Uc(8),core.bc(),core.bc(),core.bc(),core.cc(9,\"div\",6),core.cc(10,\"div\",7),core.cc(11,\"div\",8),core.Xb(12,\"img\",9),core.cc(13,\"div\",10),core.cc(14,\"h4\"),core.Uc(15,\"Avatar\"),core.bc(),core.cc(16,\"div\",11),core.cc(17,\"div\",12),core.cc(18,\"input\",13,14),core.mc(\"change\",function($event){return ctx.uploadImage($event)}),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.cc(20,\"form\",15),core.cc(21,\"div\",1),core.cc(22,\"div\",16),core.cc(23,\"div\",12),core.cc(24,\"div\",17),core.cc(25,\"label\",18),core.Uc(26,\"Nombre de usuario\"),core.bc(),core.Xb(27,\"input\",19,20),core.bc(),core.bc(),core.bc(),core.cc(29,\"div\",21),core.cc(30,\"div\",12),core.cc(31,\"div\",17),core.cc(32,\"label\",22),core.Uc(33,\"Nombre\"),core.bc(),core.Xb(34,\"input\",23),core.bc(),core.bc(),core.bc(),core.cc(35,\"div\",21),core.cc(36,\"div\",12),core.cc(37,\"div\",17),core.cc(38,\"label\",24),core.Uc(39,\"Apellido\"),core.bc(),core.Xb(40,\"input\",25),core.bc(),core.bc(),core.bc(),core.bc(),core.cc(41,\"div\",1),core.cc(42,\"div\",26),core.cc(43,\"ng-select\",27),core.Sc(44,ProfileComponent_ng_option_44_Template,2,2,\"ng-option\",28),core.bc(),core.bc(),core.cc(45,\"div\",29),core.cc(46,\"div\",30),core.Xb(47,\"ui-switch\",31),core.cc(48,\"label\",32),core.Uc(49,\"Activo\"),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.cc(50,\"div\",33),core.cc(51,\"app-footer-form\",34),core.mc(\"closeEvent\",function(){return ctx.cancel()})(\"saveAndCreateEvent\",function(){return ctx.saveAndCreate()})(\"saveAndCloseEvent\",function(){return ctx.saveAndClose()}),core.bc(),core.bc(),core.bc(),core.bc(),core.bc(),core.bc()),2&rf&&(core.Ib(8),core.Wc(\" \",ctx.title,\" \"),core.Ib(4),core.vc(\"src\",ctx.imgData,core.Oc),core.Ib(8),core.vc(\"formGroup\",ctx.customForm),core.Ib(7),core.vc(\"readOnly\",ctx.editing),core.Ib(7),core.Ob(\"is-invalid\",ctx.invalidFirstName),core.Ib(6),core.Ob(\"is-invalid\",ctx.invalidLastName),core.Ib(3),core.vc(\"readonly\",ctx.editing),core.Ib(1),core.vc(\"ngForOf\",ctx.userTypes),core.Ib(7),core.vc(\"showAaveACreate\",!1)(\"saveAClose\",ctx.saveAClose)(\"saveAClose\",ctx.saveAClose))},directives:[ng_fallimg.b,fesm2015_forms.z,fesm2015_forms.q,fesm2015_forms.h,fesm2015_forms.c,fesm2015_forms.w,fesm2015_forms.p,fesm2015_forms.g,ng_select_ng_select.a,common.m,ui_switch_es2015.a,footer_form_component.a,ng_select_ng_select.d],styles:[\"\"]}),ProfileComponent})()}]}];let users_routing_module_UsersRoutingModule=(()=>{class UsersRoutingModule{}return UsersRoutingModule.ɵfac=function(t){return new(t||UsersRoutingModule)},UsersRoutingModule.ɵmod=core.Ub({type:UsersRoutingModule}),UsersRoutingModule.ɵinj=core.Tb({imports:[[fesm2015_router.f.forChild(routes)],fesm2015_router.f]}),UsersRoutingModule})();const customCurrencyMaskConfig={align:\"right\",allowNegative:!0,allowZero:!0,decimal:\".\",precision:2,prefix:\"$ \",suffix:\"\",thousands:\",\",nullable:!0};let users_module_UsersModule=(()=>{class UsersModule{}return UsersModule.ɵfac=function(t){return new(t||UsersModule)},UsersModule.ɵmod=core.Ub({type:UsersModule}),UsersModule.ɵinj=core.Tb({imports:[[common.c,core_module.a,swimlane_ngx_datatable_NgxDatatableModule,ui_switch_es2015.b,ng_bootstrap.t,ng_bootstrap.C,ngx_currency.b.forRoot(customCurrencyMaskConfig),ngx_spinner.b,jqwidgets_ng_jqxmenu.b,users_routing_module_UsersRoutingModule,jqwidgets_ng_jqxgrid.b,fesm2015_forms.v,ng_fallimg.a,ng_select_ng_select.c,ngx_translate_core.b.forRoot({loader:{provide:ngx_translate_core.a,useFactory:http=>new ngx_translate_http_loader.a(http),deps:[fesm2015_http.b]}})]]}),UsersModule})()}}]);","name":"21-es2015.312cf27cd50c238b7482.js","input":"(window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || []).push([[21],{\n\n/***/ \"TT0I\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* unused harmony export CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return CurrencyMaskDirective; });\n/* unused harmony export CurrencyMaskInputMode */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return NgxCurrencyModule; });\n/* unused harmony export ɵa */\n/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\"fXoL\");\n/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(\"3Pt+\");\n/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(\"ofXK\");\n\n\n\n\nvar CurrencyMaskInputMode = /*@__PURE__*/ (function (CurrencyMaskInputMode) {\n    CurrencyMaskInputMode[CurrencyMaskInputMode[\"FINANCIAL\"] = 0] = \"FINANCIAL\";\n    CurrencyMaskInputMode[CurrencyMaskInputMode[\"NATURAL\"] = 1] = \"NATURAL\";\n    return CurrencyMaskInputMode;\n})({});\nlet CURRENCY_MASK_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* InjectionToken */ \"t\"](\"currency.mask.config\");\nclass InputManager {\n    constructor(htmlInputElement) {\n        this.htmlInputElement = htmlInputElement;\n    }\n    setCursorAt(position) {\n        if (this.htmlInputElement.setSelectionRange) {\n            this.htmlInputElement.focus();\n            this.htmlInputElement.setSelectionRange(position, position);\n        }\n        else if (this.htmlInputElement.createTextRange) {\n            let textRange = this.htmlInputElement.createTextRange();\n            textRange.collapse(true);\n            textRange.moveEnd(\"character\", position);\n            textRange.moveStart(\"character\", position);\n            textRange.select();\n        }\n    }\n    updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n        this.rawValue = newRawValue;\n        let newLength = newRawValue.length;\n        selectionStart = selectionStart - (oldLength - newLength);\n        this.setCursorAt(selectionStart);\n    }\n    get canInputMoreNumbers() {\n        let onlyNumbers = this.rawValue.replace(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g, \"\");\n        let haventReachedMaxLength = !(onlyNumbers.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let haveNumberSelected = !!(selectionStart != selectionEnd &&\n            this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/));\n        let startWithZero = (this.htmlInputElement.value.substring(0, 1) == \"0\");\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n    get inputSelection() {\n        let selectionStart = 0;\n        let selectionEnd = 0;\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n            selectionStart = this.htmlInputElement.selectionStart;\n            selectionEnd = this.htmlInputElement.selectionEnd;\n        }\n        else {\n            let range = document.selection.createRange();\n            if (range && range.parentElement() == this.htmlInputElement) {\n                let lenght = this.htmlInputElement.value.length;\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n                let startRange = this.htmlInputElement.createTextRange();\n                startRange.moveToBookmark(range.getBookmark());\n                let endRange = this.htmlInputElement.createTextRange();\n                endRange.collapse(false);\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n                    selectionStart = selectionEnd = lenght;\n                }\n                else {\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n                        selectionEnd = lenght;\n                    }\n                    else {\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n                    }\n                }\n            }\n        }\n        return {\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd\n        };\n    }\n    get rawValue() {\n        return this.htmlInputElement && this.htmlInputElement.value;\n    }\n    set rawValue(value) {\n        this._storedRawValue = value;\n        if (this.htmlInputElement) {\n            this.htmlInputElement.value = value;\n        }\n    }\n    get storedRawValue() {\n        return this._storedRawValue || '';\n    }\n}\nclass InputService {\n    constructor(htmlInputElement, options) {\n        this.htmlInputElement = htmlInputElement;\n        this.options = options;\n        this.SINGLE_DIGIT_REGEX = new RegExp(/^[0-9\\u0660-\\u0669\\u06F0-\\u06F9]$/);\n        this.ONLY_NUMBERS_REGEX = new RegExp(/[^0-9\\u0660-\\u0669\\u06F0-\\u06F9]/g);\n        this.PER_AR_NUMBER = new Map();\n        this.inputManager = new InputManager(htmlInputElement);\n        this.initialize();\n    }\n    initialize() {\n        this.PER_AR_NUMBER.set(\"\\u06F0\", \"0\");\n        this.PER_AR_NUMBER.set(\"\\u06F1\", \"1\");\n        this.PER_AR_NUMBER.set(\"\\u06F2\", \"2\");\n        this.PER_AR_NUMBER.set(\"\\u06F3\", \"3\");\n        this.PER_AR_NUMBER.set(\"\\u06F4\", \"4\");\n        this.PER_AR_NUMBER.set(\"\\u06F5\", \"5\");\n        this.PER_AR_NUMBER.set(\"\\u06F6\", \"6\");\n        this.PER_AR_NUMBER.set(\"\\u06F7\", \"7\");\n        this.PER_AR_NUMBER.set(\"\\u06F8\", \"8\");\n        this.PER_AR_NUMBER.set(\"\\u06F9\", \"9\");\n        this.PER_AR_NUMBER.set(\"\\u0660\", \"0\");\n        this.PER_AR_NUMBER.set(\"\\u0661\", \"1\");\n        this.PER_AR_NUMBER.set(\"\\u0662\", \"2\");\n        this.PER_AR_NUMBER.set(\"\\u0663\", \"3\");\n        this.PER_AR_NUMBER.set(\"\\u0664\", \"4\");\n        this.PER_AR_NUMBER.set(\"\\u0665\", \"5\");\n        this.PER_AR_NUMBER.set(\"\\u0666\", \"6\");\n        this.PER_AR_NUMBER.set(\"\\u0667\", \"7\");\n        this.PER_AR_NUMBER.set(\"\\u0668\", \"8\");\n        this.PER_AR_NUMBER.set(\"\\u0669\", \"9\");\n    }\n    addNumber(keyCode) {\n        const { decimal, precision, inputMode } = this.options;\n        let keyChar = String.fromCharCode(keyCode);\n        const isDecimalChar = keyChar === this.options.decimal;\n        if (!this.rawValue) {\n            this.rawValue = this.applyMask(false, keyChar);\n            let selectionStart = undefined;\n            if (inputMode === CurrencyMaskInputMode.NATURAL && precision > 0) {\n                selectionStart = this.rawValue.indexOf(decimal);\n                if (isDecimalChar) {\n                    selectionStart++;\n                }\n            }\n            this.updateFieldValue(selectionStart);\n        }\n        else {\n            let selectionStart = this.inputSelection.selectionStart;\n            let selectionEnd = this.inputSelection.selectionEnd;\n            const rawValueStart = this.rawValue.substring(0, selectionStart);\n            let rawValueEnd = this.rawValue.substring(selectionEnd, this.rawValue.length);\n            // In natural mode, replace decimals instead of shifting them.\n            const inDecimalPortion = rawValueStart.indexOf(decimal) !== -1;\n            if (inputMode === CurrencyMaskInputMode.NATURAL && inDecimalPortion && selectionStart === selectionEnd) {\n                rawValueEnd = rawValueEnd.substring(1);\n            }\n            const newValue = rawValueStart + keyChar + rawValueEnd;\n            let nextSelectionStart = selectionStart + 1;\n            const isDecimalOrThousands = isDecimalChar || keyChar === this.options.thousands;\n            if (isDecimalOrThousands && keyChar === rawValueEnd[0]) {\n                // If the cursor is just before the decimal or thousands separator and the user types the\n                // decimal or thousands separator, move the cursor past it.\n                nextSelectionStart++;\n            }\n            else if (!this.SINGLE_DIGIT_REGEX.test(keyChar)) {\n                // Ignore other non-numbers.\n                return;\n            }\n            this.rawValue = newValue;\n            this.updateFieldValue(nextSelectionStart);\n        }\n    }\n    applyMask(isNumber, rawValue, disablePadAndTrim = false) {\n        let { allowNegative, decimal, precision, prefix, suffix, thousands, min, max, inputMode } = this.options;\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n        let onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n        if (!onlyNumbers && rawValue !== decimal) {\n            return \"\";\n        }\n        if (inputMode === CurrencyMaskInputMode.NATURAL && !isNumber && !disablePadAndTrim) {\n            rawValue = this.padOrTrimPrecision(rawValue);\n            onlyNumbers = rawValue.replace(this.ONLY_NUMBERS_REGEX, \"\");\n        }\n        let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision)\n            .replace(/^\\u0660*/g, \"\")\n            .replace(/^\\u06F0*/g, \"\")\n            .replace(/^0*/g, \"\");\n        if (integerPart == \"\") {\n            integerPart = \"0\";\n        }\n        let integerValue = parseInt(integerPart);\n        integerPart = integerPart.replace(/\\B(?=([0-9\\u0660-\\u0669\\u06F0-\\u06F9]{3})+(?![0-9\\u0660-\\u0669\\u06F0-\\u06F9]))/g, thousands);\n        if (thousands && integerPart.startsWith(thousands)) {\n            integerPart = integerPart.substring(1);\n        }\n        let newRawValue = integerPart;\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n        let decimalValue = parseInt(decimalPart) || 0;\n        let isNegative = rawValue.indexOf(\"-\") > -1;\n        // Ensure max is at least as large as min.\n        max = (this.isNullOrUndefined(max) || this.isNullOrUndefined(min)) ? max : Math.max(max, min);\n        // Restrict to the min and max values.\n        let newValue = integerValue + (decimalValue / 100);\n        newValue = isNegative ? -newValue : newValue;\n        if (!this.isNullOrUndefined(max) && newValue > max) {\n            return this.applyMask(true, max + '');\n        }\n        else if (!this.isNullOrUndefined(min) && newValue < min) {\n            return this.applyMask(true, min + '');\n        }\n        if (precision > 0) {\n            if (newRawValue == \"0\" && decimalPart.length < precision) {\n                newRawValue += decimal + \"0\".repeat(precision - 1) + decimalPart;\n            }\n            else {\n                newRawValue += decimal + decimalPart;\n            }\n        }\n        let isZero = newValue == 0;\n        let operator = (isNegative && allowNegative && !isZero) ? \"-\" : \"\";\n        return operator + prefix + newRawValue + suffix;\n    }\n    padOrTrimPrecision(rawValue) {\n        let { decimal, precision } = this.options;\n        let decimalIndex = rawValue.lastIndexOf(decimal);\n        if (decimalIndex === -1) {\n            decimalIndex = rawValue.length;\n            rawValue += decimal;\n        }\n        let decimalPortion = rawValue.substring(decimalIndex).replace(this.ONLY_NUMBERS_REGEX, \"\");\n        const actualPrecision = decimalPortion.length;\n        if (actualPrecision < precision) {\n            for (let i = actualPrecision; i < precision; i++) {\n                decimalPortion += '0';\n            }\n        }\n        else if (actualPrecision > precision) {\n            decimalPortion = decimalPortion.substring(0, decimalPortion.length + precision - actualPrecision);\n        }\n        return rawValue.substring(0, decimalIndex) + decimal + decimalPortion;\n    }\n    clearMask(rawValue) {\n        if (this.isNullable() && rawValue === \"\")\n            return null;\n        let value = (rawValue || \"0\").replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n        if (this.options.thousands) {\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n        }\n        if (this.options.decimal) {\n            value = value.replace(this.options.decimal, \".\");\n        }\n        this.PER_AR_NUMBER.forEach((val, key) => {\n            const re = new RegExp(key, \"g\");\n            value = value.replace(re, val);\n        });\n        return parseFloat(value);\n    }\n    changeToNegative() {\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n            // Apply the mask to ensure the min and max values are enforced.\n            this.rawValue = this.applyMask(false, \"-\" + this.rawValue);\n        }\n    }\n    changeToPositive() {\n        // Apply the mask to ensure the min and max values are enforced.\n        this.rawValue = this.applyMask(false, this.rawValue.replace(\"-\", \"\"));\n    }\n    removeNumber(keyCode) {\n        let { decimal, thousands, prefix, suffix, inputMode } = this.options;\n        if (this.isNullable() && this.value == 0) {\n            this.rawValue = null;\n            return;\n        }\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let selectionStart = this.inputSelection.selectionStart;\n        const suffixStart = this.rawValue.length - suffix.length;\n        selectionEnd = Math.min(suffixStart, Math.max(selectionEnd, prefix.length));\n        selectionStart = Math.min(suffixStart, Math.max(selectionStart, prefix.length));\n        // Check if selection was entirely in the prefix or suffix. \n        if (selectionStart === selectionEnd &&\n            this.inputSelection.selectionStart !== this.inputSelection.selectionEnd) {\n            this.updateFieldValue(selectionStart);\n            return;\n        }\n        let decimalIndex = this.rawValue.indexOf(decimal);\n        if (decimalIndex === -1) {\n            decimalIndex = this.rawValue.length;\n        }\n        let shiftSelection = 0;\n        let insertChars = '';\n        const isCursorInDecimals = decimalIndex < selectionEnd;\n        const isCursorImmediatelyAfterDecimalPoint = decimalIndex + 1 === selectionEnd;\n        if (selectionEnd === selectionStart) {\n            if (keyCode == 8) {\n                if (selectionStart <= prefix.length) {\n                    return;\n                }\n                selectionStart--;\n                // If previous char isn't a number, go back one more.\n                if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n                    selectionStart--;\n                }\n                // In natural mode, jump backwards when in decimal portion of number.\n                if (inputMode === CurrencyMaskInputMode.NATURAL && isCursorInDecimals) {\n                    shiftSelection = -1;\n                    // when removing a single whole number, replace it with 0\n                    if (isCursorImmediatelyAfterDecimalPoint && this.value < 10 && this.value > -10) {\n                        insertChars += '0';\n                    }\n                }\n            }\n            else if (keyCode == 46 || keyCode == 63272) {\n                if (selectionStart === suffixStart) {\n                    return;\n                }\n                selectionEnd++;\n                // If next char isn't a number, go one more.\n                if (!this.rawValue.substr(selectionStart, 1).match(/\\d/)) {\n                    selectionStart++;\n                    selectionEnd++;\n                }\n            }\n        }\n        // In natural mode, replace decimals with 0s.\n        if (inputMode === CurrencyMaskInputMode.NATURAL && selectionStart > decimalIndex) {\n            const replacedDecimalCount = selectionEnd - selectionStart;\n            for (let i = 0; i < replacedDecimalCount; i++) {\n                insertChars += '0';\n            }\n        }\n        let selectionFromEnd = this.rawValue.length - selectionEnd;\n        this.rawValue = this.rawValue.substring(0, selectionStart) + insertChars + this.rawValue.substring(selectionEnd);\n        // Remove leading thousand separator from raw value.\n        const startChar = this.rawValue.substr(prefix.length, 1);\n        if (startChar === thousands) {\n            this.rawValue = this.rawValue.substring(0, prefix.length) + this.rawValue.substring(prefix.length + 1);\n            selectionFromEnd = Math.min(selectionFromEnd, this.rawValue.length - prefix.length);\n        }\n        this.updateFieldValue(this.rawValue.length - selectionFromEnd + shiftSelection, true);\n    }\n    updateFieldValue(selectionStart, disablePadAndTrim = false) {\n        let newRawValue = this.applyMask(false, this.rawValue || \"\", disablePadAndTrim);\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n        selectionStart = Math.max(this.options.prefix.length, Math.min(selectionStart, this.rawValue.length - this.options.suffix.length));\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n    }\n    updateOptions(options) {\n        let value = this.value;\n        this.options = options;\n        this.value = value;\n    }\n    prefixLength() {\n        return this.options.prefix.length;\n    }\n    suffixLength() {\n        return this.options.suffix.length;\n    }\n    isNullable() {\n        return this.options.nullable;\n    }\n    get canInputMoreNumbers() {\n        return this.inputManager.canInputMoreNumbers;\n    }\n    get inputSelection() {\n        return this.inputManager.inputSelection;\n    }\n    get rawValue() {\n        return this.inputManager.rawValue;\n    }\n    set rawValue(value) {\n        this.inputManager.rawValue = value;\n    }\n    get storedRawValue() {\n        return this.inputManager.storedRawValue;\n    }\n    get value() {\n        return this.clearMask(this.rawValue);\n    }\n    set value(value) {\n        this.rawValue = this.applyMask(true, \"\" + value);\n    }\n    isNullOrUndefined(value) {\n        return value === null || value === undefined;\n    }\n}\nclass InputHandler {\n    constructor(htmlInputElement, options) {\n        this.inputService = new InputService(htmlInputElement, options);\n    }\n    handleCut(event) {\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 0);\n    }\n    handleInput(event) {\n        let selectionStart = this.inputService.inputSelection.selectionStart;\n        let keyCode = this.inputService.rawValue.charCodeAt(selectionStart - 1);\n        let rawValueLength = this.inputService.rawValue.length;\n        let storedRawValueLength = this.inputService.storedRawValue.length;\n        if (Math.abs(rawValueLength - storedRawValueLength) != 1) {\n            this.inputService.updateFieldValue(selectionStart);\n            this.onModelChange(this.inputService.value);\n            return;\n        }\n        // Restore the old value.\n        this.inputService.rawValue = this.inputService.storedRawValue;\n        if (rawValueLength < storedRawValueLength) {\n            // Chrome Android seems to move the cursor in response to a backspace AFTER processing the\n            // input event, so we need to wrap this in a timeout.\n            this.timer(() => {\n                // Move the cursor to just after the deleted value.\n                this.inputService.updateFieldValue(selectionStart + 1);\n                // Then backspace it.\n                this.inputService.removeNumber(8);\n                this.onModelChange(this.inputService.value);\n            }, 0);\n        }\n        if (rawValueLength > storedRawValueLength) {\n            // Move the cursor to just before the new value.\n            this.inputService.updateFieldValue(selectionStart - 1);\n            // Process the character like a keypress.\n            this.handleKeypressImpl(keyCode);\n        }\n    }\n    handleKeydown(event) {\n        let keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n            event.preventDefault();\n            if (this.inputService.inputSelection.selectionStart <= this.inputService.prefixLength() &&\n                this.inputService.inputSelection.selectionEnd >= this.inputService.rawValue.length - this.inputService.suffixLength()) {\n                this.clearValue();\n            }\n            else {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n        }\n    }\n    clearValue() {\n        this.setValue(this.inputService.isNullable() ? null : 0);\n        this.onModelChange(this.inputService.value);\n    }\n    handleKeypress(event) {\n        let keyCode = event.which || event.charCode || event.keyCode;\n        event.preventDefault();\n        if (keyCode === 97 && event.ctrlKey) {\n            return;\n        }\n        this.handleKeypressImpl(keyCode);\n    }\n    handleKeypressImpl(keyCode) {\n        switch (keyCode) {\n            case undefined:\n            case 9:\n            case 13:\n                return;\n            case 43:\n                this.inputService.changeToPositive();\n                break;\n            case 45:\n                this.inputService.changeToNegative();\n                break;\n            default:\n                if (this.inputService.canInputMoreNumbers) {\n                    let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n                    if (selectionRangeLength == this.inputService.rawValue.length) {\n                        this.setValue(null);\n                    }\n                    this.inputService.addNumber(keyCode);\n                }\n                break;\n        }\n        this.onModelChange(this.inputService.value);\n    }\n    handlePaste(event) {\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 1);\n    }\n    updateOptions(options) {\n        this.inputService.updateOptions(options);\n    }\n    getOnModelChange() {\n        return this.onModelChange;\n    }\n    setOnModelChange(callbackFunction) {\n        this.onModelChange = callbackFunction;\n    }\n    getOnModelTouched() {\n        return this.onModelTouched;\n    }\n    setOnModelTouched(callbackFunction) {\n        this.onModelTouched = callbackFunction;\n    }\n    setValue(value) {\n        this.inputService.value = value;\n    }\n    /**\n     * Passthrough to setTimeout that can be stubbed out in tests.\n     */\n    timer(callback, delayMillis) {\n        setTimeout(callback, delayMillis);\n    }\n}\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__[/* NG_VALUE_ACCESSOR */ \"n\"],\n    useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* forwardRef */ \"bb\"])(() => CurrencyMaskDirective),\n    multi: true,\n};\nlet CurrencyMaskDirective = /*@__PURE__*/ (() => {\n    class CurrencyMaskDirective {\n        constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n            this.currencyMaskConfig = currencyMaskConfig;\n            this.elementRef = elementRef;\n            this.keyValueDiffers = keyValueDiffers;\n            this.options = {};\n            this.optionsTemplate = {\n                align: \"right\",\n                allowNegative: true,\n                allowZero: true,\n                decimal: \".\",\n                precision: 2,\n                prefix: \"$ \",\n                suffix: \"\",\n                thousands: \",\",\n                nullable: false,\n                inputMode: CurrencyMaskInputMode.FINANCIAL\n            };\n            if (currencyMaskConfig) {\n                this.optionsTemplate = currencyMaskConfig;\n            }\n            this.keyValueDiffer = keyValueDiffers.find({}).create();\n        }\n        ngAfterViewInit() {\n            this.elementRef.nativeElement.style.textAlign = this.options && this.options.align ? this.options.align : this.optionsTemplate.align;\n        }\n        ngDoCheck() {\n            if (this.keyValueDiffer.diff(this.options)) {\n                this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n                this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n            }\n        }\n        ngOnInit() {\n            this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n        }\n        handleBlur(event) {\n            this.inputHandler.getOnModelTouched().apply(event);\n        }\n        handleCut(event) {\n            if (!this.isChromeAndroid()) {\n                !this.isReadOnly() && this.inputHandler.handleCut(event);\n            }\n        }\n        handleInput(event) {\n            if (this.isChromeAndroid()) {\n                !this.isReadOnly() && this.inputHandler.handleInput(event);\n            }\n        }\n        handleKeydown(event) {\n            if (!this.isChromeAndroid()) {\n                !this.isReadOnly() && this.inputHandler.handleKeydown(event);\n            }\n        }\n        handleKeypress(event) {\n            if (!this.isChromeAndroid()) {\n                !this.isReadOnly() && this.inputHandler.handleKeypress(event);\n            }\n        }\n        handlePaste(event) {\n            if (!this.isChromeAndroid()) {\n                !this.isReadOnly() && this.inputHandler.handlePaste(event);\n            }\n        }\n        handleDrop(event) {\n            if (!this.isChromeAndroid()) {\n                event.preventDefault();\n            }\n        }\n        isChromeAndroid() {\n            return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n        }\n        isReadOnly() {\n            return this.elementRef.nativeElement.hasAttribute('readonly');\n        }\n        registerOnChange(callbackFunction) {\n            this.inputHandler.setOnModelChange(callbackFunction);\n        }\n        registerOnTouched(callbackFunction) {\n            this.inputHandler.setOnModelTouched(callbackFunction);\n        }\n        setDisabledState(value) {\n            this.elementRef.nativeElement.disabled = value;\n        }\n        writeValue(value) {\n            this.inputHandler.setValue(value);\n        }\n    }\n    CurrencyMaskDirective.ɵfac = function CurrencyMaskDirective_Factory(t) { return new (t || CurrencyMaskDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdirectiveInject */ \"Wb\"](CURRENCY_MASK_CONFIG, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdirectiveInject */ \"Wb\"](_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ElementRef */ \"n\"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdirectiveInject */ \"Wb\"](_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* KeyValueDiffers */ \"x\"])); };\n    CurrencyMaskDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdefineDirective */ \"Rb\"]({ type: CurrencyMaskDirective, selectors: [[\"\", \"currencyMask\", \"\"]], hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) {\n            if (rf & 1) {\n                _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵlistener */ \"mc\"](\"blur\", function CurrencyMaskDirective_blur_HostBindingHandler($event) { return ctx.handleBlur($event); })(\"cut\", function CurrencyMaskDirective_cut_HostBindingHandler($event) { return ctx.handleCut($event); })(\"input\", function CurrencyMaskDirective_input_HostBindingHandler($event) { return ctx.handleInput($event); })(\"keydown\", function CurrencyMaskDirective_keydown_HostBindingHandler($event) { return ctx.handleKeydown($event); })(\"keypress\", function CurrencyMaskDirective_keypress_HostBindingHandler($event) { return ctx.handleKeypress($event); })(\"paste\", function CurrencyMaskDirective_paste_HostBindingHandler($event) { return ctx.handlePaste($event); })(\"drop\", function CurrencyMaskDirective_drop_HostBindingHandler($event) { return ctx.handleDrop($event); });\n            }\n        }, inputs: { options: \"options\" }, features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵProvidersFeature */ \"Hb\"]([CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR])] });\n    return CurrencyMaskDirective;\n})();\nlet NgxCurrencyModule = /*@__PURE__*/ (() => {\n    class NgxCurrencyModule {\n        static forRoot(config) {\n            return {\n                ngModule: NgxCurrencyModule,\n                providers: [{\n                        provide: CURRENCY_MASK_CONFIG,\n                        useValue: config,\n                    }]\n            };\n        }\n    }\n    NgxCurrencyModule.ɵfac = function NgxCurrencyModule_Factory(t) { return new (t || NgxCurrencyModule)(); };\n    NgxCurrencyModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdefineNgModule */ \"Ub\"]({ type: NgxCurrencyModule });\n    NgxCurrencyModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵdefineInjector */ \"Tb\"]({ imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_2__[/* CommonModule */ \"c\"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__[/* FormsModule */ \"j\"]]] });\n    return NgxCurrencyModule;\n})();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__[/* ɵɵsetNgModuleScope */ \"Pc\"](NgxCurrencyModule, { declarations: function () { return [CurrencyMaskDirective]; }, imports: function () { return [_angular_common__WEBPACK_IMPORTED_MODULE_2__[/* CommonModule */ \"c\"], _angular_forms__WEBPACK_IMPORTED_MODULE_1__[/* FormsModule */ \"j\"]]; }, exports: function () { return [CurrencyMaskDirective]; } }); })();\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=ngx-currency.js.map\n\n\n/***/ }),\n\n/***/ \"zrcO\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"customCurrencyMaskConfig\", function() { return /* binding */ customCurrencyMaskConfig; });\n__webpack_require__.d(__webpack_exports__, \"UsersModule\", function() { return /* binding */ users_module_UsersModule; });\n\n// EXTERNAL MODULE: ./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js\nvar common = __webpack_require__(\"ofXK\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js\nvar core = __webpack_require__(\"fXoL\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/Subject.js + 1 modules\nvar Subject = __webpack_require__(\"oXA7\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js\nvar fromEvent = __webpack_require__(\"KOvq\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/BehaviorSubject.js\nvar BehaviorSubject = __webpack_require__(\"X/DG\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js\nvar takeUntil = __webpack_require__(\"bk9D\");\n\n// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.js\nvar tslib_es6 = __webpack_require__(\"mrSG\");\n\n// CONCATENATED MODULE: ./node_modules/@swimlane/ngx-datatable/__ivy_ngcc__/fesm2015/swimlane-ngx-datatable.js\n\n\n\n\n\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\n\n\nconst _c0 = [\"*\"];\nfunction DataTableBodyComponent_datatable_progress_0_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Xb\" /* ɵɵelement */](0, \"datatable-progress\");\n    }\n}\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_1_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Xb\" /* ɵɵelement */](0, \"datatable-summary-row\", 9);\n    }\n    if (rf & 2) {\n        const ctx_r4 = core[\"oc\" /* ɵɵnextContext */](2);\n        core[\"vc\" /* ɵɵproperty */](\"rowHeight\", ctx_r4.summaryHeight)(\"offsetX\", ctx_r4.offsetX)(\"innerWidth\", ctx_r4.innerWidth)(\"rows\", ctx_r4.rows)(\"columns\", ctx_r4.columns);\n    }\n}\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r14 = core[\"dc\" /* ɵɵgetCurrentView */]();\n        core[\"cc\" /* ɵɵelementStart */](0, \"datatable-body-row\", 13);\n        core[\"mc\" /* ɵɵlistener */](\"treeAction\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template_datatable_body_row_treeAction_0_listener() { core[\"Lc\" /* ɵɵrestoreView */](_r14); const group_r7 = core[\"oc\" /* ɵɵnextContext */]().$implicit; const ctx_r12 = core[\"oc\" /* ɵɵnextContext */](2); return ctx_r12.onTreeAction(group_r7); })(\"activate\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template_datatable_body_row_activate_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r14); const i_r8 = core[\"oc\" /* ɵɵnextContext */]().index; const ctx_r15 = core[\"oc\" /* ɵɵnextContext */](2); const _r1 = core[\"Ic\" /* ɵɵreference */](2); return _r1.onActivate($event, ctx_r15.indexes.first + i_r8); });\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const group_r7 = core[\"oc\" /* ɵɵnextContext */]().$implicit;\n        const ctx_r9 = core[\"oc\" /* ɵɵnextContext */](2);\n        const _r1 = core[\"Ic\" /* ɵɵreference */](2);\n        core[\"vc\" /* ɵɵproperty */](\"isSelected\", _r1.getRowSelected(group_r7))(\"innerWidth\", ctx_r9.innerWidth)(\"offsetX\", ctx_r9.offsetX)(\"columns\", ctx_r9.columns)(\"rowHeight\", ctx_r9.getRowHeight(group_r7))(\"row\", group_r7)(\"rowIndex\", ctx_r9.getRowIndex(group_r7))(\"expanded\", ctx_r9.getRowExpanded(group_r7))(\"rowClass\", ctx_r9.rowClass)(\"displayCheck\", ctx_r9.displayCheck)(\"treeStatus\", group_r7 && group_r7.treeStatus);\n    }\n}\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r22 = core[\"dc\" /* ɵɵgetCurrentView */]();\n        core[\"cc\" /* ɵɵelementStart */](0, \"datatable-body-row\", 15);\n        core[\"mc\" /* ɵɵlistener */](\"activate\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template_datatable_body_row_activate_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r22); const i_r20 = ctx.index; core[\"oc\" /* ɵɵnextContext */](4); const _r1 = core[\"Ic\" /* ɵɵreference */](2); return _r1.onActivate($event, i_r20); });\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const row_r19 = ctx.$implicit;\n        const group_r7 = core[\"oc\" /* ɵɵnextContext */](2).$implicit;\n        const ctx_r18 = core[\"oc\" /* ɵɵnextContext */](2);\n        const _r1 = core[\"Ic\" /* ɵɵreference */](2);\n        core[\"vc\" /* ɵɵproperty */](\"isSelected\", _r1.getRowSelected(row_r19))(\"innerWidth\", ctx_r18.innerWidth)(\"offsetX\", ctx_r18.offsetX)(\"columns\", ctx_r18.columns)(\"rowHeight\", ctx_r18.getRowHeight(row_r19))(\"row\", row_r19)(\"group\", group_r7.value)(\"rowIndex\", ctx_r18.getRowIndex(row_r19))(\"expanded\", ctx_r18.getRowExpanded(row_r19))(\"rowClass\", ctx_r18.rowClass);\n    }\n}\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Sc\" /* ɵɵtemplate */](0, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template, 1, 10, \"datatable-body-row\", 14);\n    }\n    if (rf & 2) {\n        const group_r7 = core[\"oc\" /* ɵɵnextContext */]().$implicit;\n        const ctx_r11 = core[\"oc\" /* ɵɵnextContext */](2);\n        core[\"vc\" /* ɵɵproperty */](\"ngForOf\", group_r7.value)(\"ngForTrackBy\", ctx_r11.rowTrackingFn);\n    }\n}\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r26 = core[\"dc\" /* ɵɵgetCurrentView */]();\n        core[\"cc\" /* ɵɵelementStart */](0, \"datatable-row-wrapper\", 10);\n        core[\"mc\" /* ɵɵlistener */](\"rowContextmenu\", function DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template_datatable_row_wrapper_rowContextmenu_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r26); const ctx_r25 = core[\"oc\" /* ɵɵnextContext */](2); return ctx_r25.rowContextmenu.emit($event); });\n        core[\"Sc\" /* ɵɵtemplate */](1, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template, 1, 11, \"datatable-body-row\", 11);\n        core[\"Sc\" /* ɵɵtemplate */](2, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_Template, 1, 2, \"ng-template\", null, 12, core[\"Tc\" /* ɵɵtemplateRefExtractor */]);\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const group_r7 = ctx.$implicit;\n        const i_r8 = ctx.index;\n        const _r10 = core[\"Ic\" /* ɵɵreference */](3);\n        const ctx_r5 = core[\"oc\" /* ɵɵnextContext */](2);\n        core[\"vc\" /* ɵɵproperty */](\"groupedRows\", ctx_r5.groupedRows)(\"innerWidth\", ctx_r5.innerWidth)(\"ngStyle\", ctx_r5.getRowsStyles(group_r7))(\"rowDetail\", ctx_r5.rowDetail)(\"groupHeader\", ctx_r5.groupHeader)(\"offsetX\", ctx_r5.offsetX)(\"detailRowHeight\", ctx_r5.getDetailRowHeight(group_r7 && group_r7[i_r8], i_r8))(\"row\", group_r7)(\"expanded\", ctx_r5.getRowExpanded(group_r7))(\"rowIndex\", ctx_r5.getRowIndex(group_r7 && group_r7[i_r8]));\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"ngIf\", !ctx_r5.groupedRows)(\"ngIfElse\", _r10);\n    }\n}\nfunction DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_3_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Xb\" /* ɵɵelement */](0, \"datatable-summary-row\", 16);\n    }\n    if (rf & 2) {\n        const ctx_r6 = core[\"oc\" /* ɵɵnextContext */](2);\n        core[\"vc\" /* ɵɵproperty */](\"ngStyle\", ctx_r6.getBottomSummaryRowStyles())(\"rowHeight\", ctx_r6.summaryHeight)(\"offsetX\", ctx_r6.offsetX)(\"innerWidth\", ctx_r6.innerWidth)(\"rows\", ctx_r6.rows)(\"columns\", ctx_r6.columns);\n    }\n}\nfunction DataTableBodyComponent_datatable_scroller_3_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r28 = core[\"dc\" /* ɵɵgetCurrentView */]();\n        core[\"cc\" /* ɵɵelementStart */](0, \"datatable-scroller\", 5);\n        core[\"mc\" /* ɵɵlistener */](\"scroll\", function DataTableBodyComponent_datatable_scroller_3_Template_datatable_scroller_scroll_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r28); const ctx_r27 = core[\"oc\" /* ɵɵnextContext */](); return ctx_r27.onBodyScroll($event); });\n        core[\"Sc\" /* ɵɵtemplate */](1, DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_1_Template, 1, 5, \"datatable-summary-row\", 6);\n        core[\"Sc\" /* ɵɵtemplate */](2, DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template, 4, 12, \"datatable-row-wrapper\", 7);\n        core[\"Sc\" /* ɵɵtemplate */](3, DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_3_Template, 1, 6, \"datatable-summary-row\", 8);\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r2 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"vc\" /* ɵɵproperty */](\"scrollbarV\", ctx_r2.scrollbarV)(\"scrollbarH\", ctx_r2.scrollbarH)(\"scrollHeight\", ctx_r2.scrollHeight)(\"scrollWidth\", ctx_r2.columnGroupWidths == null ? null : ctx_r2.columnGroupWidths.total);\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx_r2.summaryRow && ctx_r2.summaryPosition === \"top\");\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"ngForOf\", ctx_r2.temp)(\"ngForTrackBy\", ctx_r2.rowTrackingFn);\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx_r2.summaryRow && ctx_r2.summaryPosition === \"bottom\");\n    }\n}\nfunction DataTableBodyComponent_div_4_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Xb\" /* ɵɵelement */](0, \"div\", 17);\n    }\n    if (rf & 2) {\n        const ctx_r3 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"vc\" /* ɵɵproperty */](\"innerHTML\", ctx_r3.emptyMessage, core[\"Mc\" /* ɵɵsanitizeHtml */]);\n    }\n}\nfunction DataTableHeaderComponent_div_1_datatable_header_cell_1_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r5 = core[\"dc\" /* ɵɵgetCurrentView */]();\n        core[\"cc\" /* ɵɵelementStart */](0, \"datatable-header-cell\", 4);\n        core[\"mc\" /* ɵɵlistener */](\"resize\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_resize_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r5); const column_r3 = ctx.$implicit; const ctx_r4 = core[\"oc\" /* ɵɵnextContext */](2); return ctx_r4.onColumnResized($event, column_r3); })(\"longPressStart\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_longPressStart_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r5); const ctx_r6 = core[\"oc\" /* ɵɵnextContext */](2); return ctx_r6.onLongPressStart($event); })(\"longPressEnd\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_longPressEnd_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r5); const ctx_r7 = core[\"oc\" /* ɵɵnextContext */](2); return ctx_r7.onLongPressEnd($event); })(\"sort\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_sort_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r5); const ctx_r8 = core[\"oc\" /* ɵɵnextContext */](2); return ctx_r8.onSort($event); })(\"select\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_select_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r5); const ctx_r9 = core[\"oc\" /* ɵɵnextContext */](2); return ctx_r9.select.emit($event); })(\"columnContextmenu\", function DataTableHeaderComponent_div_1_datatable_header_cell_1_Template_datatable_header_cell_columnContextmenu_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r5); const ctx_r10 = core[\"oc\" /* ɵɵnextContext */](2); return ctx_r10.columnContextmenu.emit($event); });\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const column_r3 = ctx.$implicit;\n        const ctx_r2 = core[\"oc\" /* ɵɵnextContext */](2);\n        core[\"vc\" /* ɵɵproperty */](\"resizeEnabled\", column_r3.resizeable)(\"pressModel\", column_r3)(\"pressEnabled\", ctx_r2.reorderable && column_r3.draggable)(\"dragX\", ctx_r2.reorderable && column_r3.draggable && column_r3.dragging)(\"dragY\", false)(\"dragModel\", column_r3)(\"dragEventTarget\", ctx_r2.dragEventTarget)(\"headerHeight\", ctx_r2.headerHeight)(\"isTarget\", column_r3.isTarget)(\"targetMarkerTemplate\", ctx_r2.targetMarkerTemplate)(\"targetMarkerContext\", column_r3.targetMarkerContext)(\"column\", column_r3)(\"sortType\", ctx_r2.sortType)(\"sorts\", ctx_r2.sorts)(\"selectionType\", ctx_r2.selectionType)(\"sortAscendingIcon\", ctx_r2.sortAscendingIcon)(\"sortDescendingIcon\", ctx_r2.sortDescendingIcon)(\"sortUnsetIcon\", ctx_r2.sortUnsetIcon)(\"allRowsSelected\", ctx_r2.allRowsSelected);\n    }\n}\nfunction DataTableHeaderComponent_div_1_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"cc\" /* ɵɵelementStart */](0, \"div\", 2);\n        core[\"Sc\" /* ɵɵtemplate */](1, DataTableHeaderComponent_div_1_datatable_header_cell_1_Template, 1, 19, \"datatable-header-cell\", 3);\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const colGroup_r1 = ctx.$implicit;\n        const ctx_r0 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"Kb\" /* ɵɵclassMap */](\"datatable-row-\" + colGroup_r1.type);\n        core[\"vc\" /* ɵɵproperty */](\"ngStyle\", ctx_r0._styleByGroup[colGroup_r1.type]);\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"ngForOf\", colGroup_r1.columns)(\"ngForTrackBy\", ctx_r0.columnTrackingFn);\n    }\n}\nfunction DatatableComponent_datatable_header_1_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r3 = core[\"dc\" /* ɵɵgetCurrentView */]();\n        core[\"cc\" /* ɵɵelementStart */](0, \"datatable-header\", 4);\n        core[\"mc\" /* ɵɵlistener */](\"sort\", function DatatableComponent_datatable_header_1_Template_datatable_header_sort_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r3); const ctx_r2 = core[\"oc\" /* ɵɵnextContext */](); return ctx_r2.onColumnSort($event); })(\"resize\", function DatatableComponent_datatable_header_1_Template_datatable_header_resize_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r3); const ctx_r4 = core[\"oc\" /* ɵɵnextContext */](); return ctx_r4.onColumnResize($event); })(\"reorder\", function DatatableComponent_datatable_header_1_Template_datatable_header_reorder_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r3); const ctx_r5 = core[\"oc\" /* ɵɵnextContext */](); return ctx_r5.onColumnReorder($event); })(\"select\", function DatatableComponent_datatable_header_1_Template_datatable_header_select_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r3); const ctx_r6 = core[\"oc\" /* ɵɵnextContext */](); return ctx_r6.onHeaderSelect($event); })(\"columnContextmenu\", function DatatableComponent_datatable_header_1_Template_datatable_header_columnContextmenu_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r3); const ctx_r7 = core[\"oc\" /* ɵɵnextContext */](); return ctx_r7.onColumnContextmenu($event); });\n        core[\"pc\" /* ɵɵpipe */](1, \"async\");\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r0 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"vc\" /* ɵɵproperty */](\"sorts\", ctx_r0.sorts)(\"sortType\", ctx_r0.sortType)(\"scrollbarH\", ctx_r0.scrollbarH)(\"innerWidth\", ctx_r0._innerWidth)(\"offsetX\", core[\"qc\" /* ɵɵpipeBind1 */](1, 15, ctx_r0._offsetX))(\"dealsWithGroup\", ctx_r0.groupedRows !== undefined)(\"columns\", ctx_r0._internalColumns)(\"headerHeight\", ctx_r0.headerHeight)(\"reorderable\", ctx_r0.reorderable)(\"targetMarkerTemplate\", ctx_r0.targetMarkerTemplate)(\"sortAscendingIcon\", ctx_r0.cssClasses.sortAscending)(\"sortDescendingIcon\", ctx_r0.cssClasses.sortDescending)(\"sortUnsetIcon\", ctx_r0.cssClasses.sortUnset)(\"allRowsSelected\", ctx_r0.allRowsSelected)(\"selectionType\", ctx_r0.selectionType);\n    }\n}\nfunction DatatableComponent_datatable_footer_4_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r9 = core[\"dc\" /* ɵɵgetCurrentView */]();\n        core[\"cc\" /* ɵɵelementStart */](0, \"datatable-footer\", 5);\n        core[\"mc\" /* ɵɵlistener */](\"page\", function DatatableComponent_datatable_footer_4_Template_datatable_footer_page_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r9); const ctx_r8 = core[\"oc\" /* ɵɵnextContext */](); return ctx_r8.onFooterPage($event); });\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r1 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"vc\" /* ɵɵproperty */](\"rowCount\", ctx_r1.rowCount)(\"pageSize\", ctx_r1.pageSize)(\"offset\", ctx_r1.offset)(\"footerHeight\", ctx_r1.footerHeight)(\"footerTemplate\", ctx_r1.footer)(\"totalMessage\", ctx_r1.messages.totalMessage)(\"pagerLeftArrowIcon\", ctx_r1.cssClasses.pagerLeftArrow)(\"pagerRightArrowIcon\", ctx_r1.cssClasses.pagerRightArrow)(\"pagerPreviousIcon\", ctx_r1.cssClasses.pagerPrevious)(\"selectedCount\", ctx_r1.selected.length)(\"selectedMessage\", !!ctx_r1.selectionType && ctx_r1.messages.selectedMessage)(\"pagerNextIcon\", ctx_r1.cssClasses.pagerNext);\n    }\n}\nfunction DataTableHeaderCellComponent_1_ng_template_0_Template(rf, ctx) { }\nfunction DataTableHeaderCellComponent_1_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Sc\" /* ɵɵtemplate */](0, DataTableHeaderCellComponent_1_ng_template_0_Template, 0, 0, \"ng-template\", 5);\n    }\n    if (rf & 2) {\n        const ctx_r0 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"vc\" /* ɵɵproperty */](\"ngTemplateOutlet\", ctx_r0.targetMarkerTemplate)(\"ngTemplateOutletContext\", ctx_r0.targetMarkerContext);\n    }\n}\nfunction DataTableHeaderCellComponent_label_2_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r6 = core[\"dc\" /* ɵɵgetCurrentView */]();\n        core[\"cc\" /* ɵɵelementStart */](0, \"label\", 6);\n        core[\"cc\" /* ɵɵelementStart */](1, \"input\", 7);\n        core[\"mc\" /* ɵɵlistener */](\"change\", function DataTableHeaderCellComponent_label_2_Template_input_change_1_listener() { core[\"Lc\" /* ɵɵrestoreView */](_r6); const ctx_r5 = core[\"oc\" /* ɵɵnextContext */](); return ctx_r5.select.emit(!ctx_r5.allRowsSelected); });\n        core[\"bc\" /* ɵɵelementEnd */]();\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r1 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"checked\", ctx_r1.allRowsSelected);\n    }\n}\nfunction DataTableHeaderCellComponent_span_3_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r8 = core[\"dc\" /* ɵɵgetCurrentView */]();\n        core[\"cc\" /* ɵɵelementStart */](0, \"span\", 8);\n        core[\"cc\" /* ɵɵelementStart */](1, \"span\", 9);\n        core[\"mc\" /* ɵɵlistener */](\"click\", function DataTableHeaderCellComponent_span_3_Template_span_click_1_listener() { core[\"Lc\" /* ɵɵrestoreView */](_r8); const ctx_r7 = core[\"oc\" /* ɵɵnextContext */](); return ctx_r7.onSort(); });\n        core[\"bc\" /* ɵɵelementEnd */]();\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r2 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"innerHTML\", ctx_r2.name, core[\"Mc\" /* ɵɵsanitizeHtml */]);\n    }\n}\nfunction DataTableHeaderCellComponent_4_ng_template_0_Template(rf, ctx) { }\nfunction DataTableHeaderCellComponent_4_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Sc\" /* ɵɵtemplate */](0, DataTableHeaderCellComponent_4_ng_template_0_Template, 0, 0, \"ng-template\", 5);\n    }\n    if (rf & 2) {\n        const ctx_r3 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"vc\" /* ɵɵproperty */](\"ngTemplateOutlet\", ctx_r3.column.headerTemplate)(\"ngTemplateOutletContext\", ctx_r3.cellContext);\n    }\n}\nfunction DataTableFooterComponent_1_ng_template_0_Template(rf, ctx) { }\nconst _c1 = function (a0, a1, a2, a3, a4) { return { rowCount: a0, pageSize: a1, selectedCount: a2, curPage: a3, offset: a4 }; };\nfunction DataTableFooterComponent_1_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Sc\" /* ɵɵtemplate */](0, DataTableFooterComponent_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\n    }\n    if (rf & 2) {\n        const ctx_r0 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"vc\" /* ɵɵproperty */](\"ngTemplateOutlet\", ctx_r0.footerTemplate.template)(\"ngTemplateOutletContext\", core[\"Ec\" /* ɵɵpureFunction5 */](2, _c1, ctx_r0.rowCount, ctx_r0.pageSize, ctx_r0.selectedCount, ctx_r0.curPage, ctx_r0.offset));\n    }\n}\nfunction DataTableFooterComponent_div_2_span_1_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"cc\" /* ɵɵelementStart */](0, \"span\");\n        core[\"Uc\" /* ɵɵtext */](1);\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r4 = core[\"oc\" /* ɵɵnextContext */](2);\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"Xc\" /* ɵɵtextInterpolate2 */](\" \", ctx_r4.selectedCount == null ? null : ctx_r4.selectedCount.toLocaleString(), \" \", ctx_r4.selectedMessage, \" / \");\n    }\n}\nfunction DataTableFooterComponent_div_2_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"cc\" /* ɵɵelementStart */](0, \"div\", 5);\n        core[\"Sc\" /* ɵɵtemplate */](1, DataTableFooterComponent_div_2_span_1_Template, 2, 2, \"span\", 1);\n        core[\"Uc\" /* ɵɵtext */](2);\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r1 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx_r1.selectedMessage);\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"Xc\" /* ɵɵtextInterpolate2 */](\" \", ctx_r1.rowCount == null ? null : ctx_r1.rowCount.toLocaleString(), \" \", ctx_r1.totalMessage, \" \");\n    }\n}\nfunction DataTableFooterComponent_datatable_pager_3_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r6 = core[\"dc\" /* ɵɵgetCurrentView */]();\n        core[\"cc\" /* ɵɵelementStart */](0, \"datatable-pager\", 6);\n        core[\"mc\" /* ɵɵlistener */](\"change\", function DataTableFooterComponent_datatable_pager_3_Template_datatable_pager_change_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r6); const ctx_r5 = core[\"oc\" /* ɵɵnextContext */](); return ctx_r5.page.emit($event); });\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r2 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"vc\" /* ɵɵproperty */](\"pagerLeftArrowIcon\", ctx_r2.pagerLeftArrowIcon)(\"pagerRightArrowIcon\", ctx_r2.pagerRightArrowIcon)(\"pagerPreviousIcon\", ctx_r2.pagerPreviousIcon)(\"pagerNextIcon\", ctx_r2.pagerNextIcon)(\"page\", ctx_r2.curPage)(\"size\", ctx_r2.pageSize)(\"count\", ctx_r2.rowCount)(\"hidden\", !ctx_r2.isVisible);\n    }\n}\nconst _c2 = function (a0) { return { \"selected-count\": a0 }; };\nfunction DataTablePagerComponent_li_7_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r3 = core[\"dc\" /* ɵɵgetCurrentView */]();\n        core[\"cc\" /* ɵɵelementStart */](0, \"li\", 6);\n        core[\"cc\" /* ɵɵelementStart */](1, \"a\", 7);\n        core[\"mc\" /* ɵɵlistener */](\"click\", function DataTablePagerComponent_li_7_Template_a_click_1_listener() { core[\"Lc\" /* ɵɵrestoreView */](_r3); const pg_r1 = ctx.$implicit; const ctx_r2 = core[\"oc\" /* ɵɵnextContext */](); return ctx_r2.selectPage(pg_r1.number); });\n        core[\"Uc\" /* ɵɵtext */](2);\n        core[\"bc\" /* ɵɵelementEnd */]();\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const pg_r1 = ctx.$implicit;\n        const ctx_r0 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"Ob\" /* ɵɵclassProp */](\"active\", pg_r1.number === ctx_r0.page);\n        core[\"Jb\" /* ɵɵattribute */](\"aria-label\", \"page \" + pg_r1.number);\n        core[\"Ib\" /* ɵɵadvance */](2);\n        core[\"Wc\" /* ɵɵtextInterpolate1 */](\" \", pg_r1.text, \" \");\n    }\n}\nfunction DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r7 = core[\"dc\" /* ɵɵgetCurrentView */]();\n        core[\"cc\" /* ɵɵelementStart */](0, \"datatable-body-cell\", 3);\n        core[\"mc\" /* ɵɵlistener */](\"activate\", function DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template_datatable_body_cell_activate_0_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r7); const ii_r5 = ctx.index; const ctx_r6 = core[\"oc\" /* ɵɵnextContext */](2); return ctx_r6.onActivate($event, ii_r5); })(\"treeAction\", function DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template_datatable_body_cell_treeAction_0_listener() { core[\"Lc\" /* ɵɵrestoreView */](_r7); const ctx_r8 = core[\"oc\" /* ɵɵnextContext */](2); return ctx_r8.onTreeAction(); });\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const column_r4 = ctx.$implicit;\n        const ctx_r3 = core[\"oc\" /* ɵɵnextContext */](2);\n        core[\"vc\" /* ɵɵproperty */](\"row\", ctx_r3.row)(\"group\", ctx_r3.group)(\"expanded\", ctx_r3.expanded)(\"isSelected\", ctx_r3.isSelected)(\"rowIndex\", ctx_r3.rowIndex)(\"column\", column_r4)(\"rowHeight\", ctx_r3.rowHeight)(\"displayCheck\", ctx_r3.displayCheck)(\"treeStatus\", ctx_r3.treeStatus);\n    }\n}\nfunction DataTableBodyRowComponent_div_0_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"cc\" /* ɵɵelementStart */](0, \"div\", 1);\n        core[\"Sc\" /* ɵɵtemplate */](1, DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template, 1, 9, \"datatable-body-cell\", 2);\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const colGroup_r1 = ctx.$implicit;\n        const ctx_r0 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"Lb\" /* ɵɵclassMapInterpolate1 */](\"datatable-row-\", colGroup_r1.type, \" datatable-row-group\");\n        core[\"vc\" /* ɵɵproperty */](\"ngStyle\", ctx_r0._groupStyles[colGroup_r1.type]);\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"ngForOf\", colGroup_r1.columns)(\"ngForTrackBy\", ctx_r0.columnTrackingFn);\n    }\n}\nfunction DataTableRowWrapperComponent_div_0_1_ng_template_0_Template(rf, ctx) { }\nfunction DataTableRowWrapperComponent_div_0_1_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Sc\" /* ɵɵtemplate */](0, DataTableRowWrapperComponent_div_0_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\n    }\n    if (rf & 2) {\n        const ctx_r3 = core[\"oc\" /* ɵɵnextContext */](2);\n        core[\"vc\" /* ɵɵproperty */](\"ngTemplateOutlet\", ctx_r3.groupHeader.template)(\"ngTemplateOutletContext\", ctx_r3.groupContext);\n    }\n}\nfunction DataTableRowWrapperComponent_div_0_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"cc\" /* ɵɵelementStart */](0, \"div\", 3);\n        core[\"Sc\" /* ɵɵtemplate */](1, DataTableRowWrapperComponent_div_0_1_Template, 1, 2, undefined, 1);\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r0 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"vc\" /* ɵɵproperty */](\"ngStyle\", ctx_r0.getGroupHeaderStyle());\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx_r0.groupHeader && ctx_r0.groupHeader.template);\n    }\n}\nfunction DataTableRowWrapperComponent_ng_content_1_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"tc\" /* ɵɵprojection */](0, 0, [\"*ngIf\", \"(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template\"]);\n    }\n}\nfunction DataTableRowWrapperComponent_div_2_1_ng_template_0_Template(rf, ctx) { }\nfunction DataTableRowWrapperComponent_div_2_1_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Sc\" /* ɵɵtemplate */](0, DataTableRowWrapperComponent_div_2_1_ng_template_0_Template, 0, 0, \"ng-template\", 4);\n    }\n    if (rf & 2) {\n        const ctx_r5 = core[\"oc\" /* ɵɵnextContext */](2);\n        core[\"vc\" /* ɵɵproperty */](\"ngTemplateOutlet\", ctx_r5.rowDetail.template)(\"ngTemplateOutletContext\", ctx_r5.rowContext);\n    }\n}\nfunction DataTableRowWrapperComponent_div_2_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"cc\" /* ɵɵelementStart */](0, \"div\", 5);\n        core[\"Sc\" /* ɵɵtemplate */](1, DataTableRowWrapperComponent_div_2_1_Template, 1, 2, undefined, 1);\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r2 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"Qc\" /* ɵɵstyleProp */](\"height\", ctx_r2.detailRowHeight, \"px\");\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx_r2.rowDetail && ctx_r2.rowDetail.template);\n    }\n}\nconst _c3 = [\"cellTemplate\"];\nfunction DataTableBodyCellComponent_label_1_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r5 = core[\"dc\" /* ɵɵgetCurrentView */]();\n        core[\"cc\" /* ɵɵelementStart */](0, \"label\", 4);\n        core[\"cc\" /* ɵɵelementStart */](1, \"input\", 5);\n        core[\"mc\" /* ɵɵlistener */](\"click\", function DataTableBodyCellComponent_label_1_Template_input_click_1_listener($event) { core[\"Lc\" /* ɵɵrestoreView */](_r5); const ctx_r4 = core[\"oc\" /* ɵɵnextContext */](); return ctx_r4.onCheckboxChange($event); });\n        core[\"bc\" /* ɵɵelementEnd */]();\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r0 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"checked\", ctx_r0.isSelected);\n    }\n}\nfunction DataTableBodyCellComponent_ng_container_2_button_1_i_2_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Xb\" /* ɵɵelement */](0, \"i\", 11);\n    }\n}\nfunction DataTableBodyCellComponent_ng_container_2_button_1_i_3_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Xb\" /* ɵɵelement */](0, \"i\", 12);\n    }\n}\nfunction DataTableBodyCellComponent_ng_container_2_button_1_i_4_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Xb\" /* ɵɵelement */](0, \"i\", 13);\n    }\n}\nfunction DataTableBodyCellComponent_ng_container_2_button_1_Template(rf, ctx) {\n    if (rf & 1) {\n        const _r12 = core[\"dc\" /* ɵɵgetCurrentView */]();\n        core[\"cc\" /* ɵɵelementStart */](0, \"button\", 7);\n        core[\"mc\" /* ɵɵlistener */](\"click\", function DataTableBodyCellComponent_ng_container_2_button_1_Template_button_click_0_listener() { core[\"Lc\" /* ɵɵrestoreView */](_r12); const ctx_r11 = core[\"oc\" /* ɵɵnextContext */](2); return ctx_r11.onTreeAction(); });\n        core[\"cc\" /* ɵɵelementStart */](1, \"span\");\n        core[\"Sc\" /* ɵɵtemplate */](2, DataTableBodyCellComponent_ng_container_2_button_1_i_2_Template, 1, 0, \"i\", 8);\n        core[\"Sc\" /* ɵɵtemplate */](3, DataTableBodyCellComponent_ng_container_2_button_1_i_3_Template, 1, 0, \"i\", 9);\n        core[\"Sc\" /* ɵɵtemplate */](4, DataTableBodyCellComponent_ng_container_2_button_1_i_4_Template, 1, 0, \"i\", 10);\n        core[\"bc\" /* ɵɵelementEnd */]();\n        core[\"bc\" /* ɵɵelementEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r6 = core[\"oc\" /* ɵɵnextContext */](2);\n        core[\"vc\" /* ɵɵproperty */](\"disabled\", ctx_r6.treeStatus === \"disabled\");\n        core[\"Ib\" /* ɵɵadvance */](2);\n        core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx_r6.treeStatus === \"loading\");\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx_r6.treeStatus === \"collapsed\");\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx_r6.treeStatus === \"expanded\" || ctx_r6.treeStatus === \"disabled\");\n    }\n}\nfunction DataTableBodyCellComponent_ng_container_2_2_ng_template_0_Template(rf, ctx) { }\nconst _c4 = function (a0) { return { cellContext: a0 }; };\nfunction DataTableBodyCellComponent_ng_container_2_2_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Sc\" /* ɵɵtemplate */](0, DataTableBodyCellComponent_ng_container_2_2_ng_template_0_Template, 0, 0, \"ng-template\", 14);\n    }\n    if (rf & 2) {\n        const ctx_r7 = core[\"oc\" /* ɵɵnextContext */](2);\n        core[\"vc\" /* ɵɵproperty */](\"ngTemplateOutlet\", ctx_r7.column.treeToggleTemplate)(\"ngTemplateOutletContext\", core[\"Ac\" /* ɵɵpureFunction1 */](2, _c4, ctx_r7.cellContext));\n    }\n}\nfunction DataTableBodyCellComponent_ng_container_2_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"ac\" /* ɵɵelementContainerStart */](0);\n        core[\"Sc\" /* ɵɵtemplate */](1, DataTableBodyCellComponent_ng_container_2_button_1_Template, 5, 4, \"button\", 6);\n        core[\"Sc\" /* ɵɵtemplate */](2, DataTableBodyCellComponent_ng_container_2_2_Template, 1, 4, undefined, 2);\n        core[\"Zb\" /* ɵɵelementContainerEnd */]();\n    }\n    if (rf & 2) {\n        const ctx_r1 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"ngIf\", !ctx_r1.column.treeToggleTemplate);\n        core[\"Ib\" /* ɵɵadvance */](1);\n        core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx_r1.column.treeToggleTemplate);\n    }\n}\nfunction DataTableBodyCellComponent_span_3_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Xb\" /* ɵɵelement */](0, \"span\", 15);\n    }\n    if (rf & 2) {\n        const ctx_r2 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"vc\" /* ɵɵproperty */](\"title\", ctx_r2.sanitizedValue)(\"innerHTML\", ctx_r2.value, core[\"Mc\" /* ɵɵsanitizeHtml */]);\n    }\n}\nfunction DataTableBodyCellComponent_4_ng_template_0_Template(rf, ctx) { }\nfunction DataTableBodyCellComponent_4_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Sc\" /* ɵɵtemplate */](0, DataTableBodyCellComponent_4_ng_template_0_Template, 0, 0, \"ng-template\", 14, 16, core[\"Tc\" /* ɵɵtemplateRefExtractor */]);\n    }\n    if (rf & 2) {\n        const ctx_r3 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"vc\" /* ɵɵproperty */](\"ngTemplateOutlet\", ctx_r3.column.cellTemplate)(\"ngTemplateOutletContext\", ctx_r3.cellContext);\n    }\n}\nfunction DataTableSummaryRowComponent_datatable_body_row_0_Template(rf, ctx) {\n    if (rf & 1) {\n        core[\"Xb\" /* ɵɵelement */](0, \"datatable-body-row\", 1);\n    }\n    if (rf & 2) {\n        const ctx_r0 = core[\"oc\" /* ɵɵnextContext */]();\n        core[\"vc\" /* ɵɵproperty */](\"innerWidth\", ctx_r0.innerWidth)(\"offsetX\", ctx_r0.offsetX)(\"columns\", ctx_r0._internalColumns)(\"rowHeight\", ctx_r0.rowHeight)(\"row\", ctx_r0.summaryRow)(\"rowIndex\", -1);\n    }\n}\nlet swimlane_ngx_datatable_ScrollbarHelper = /*@__PURE__*/ (() => {\n    class ScrollbarHelper {\n        constructor(document) {\n            this.document = document;\n            this.width = this.getWidth();\n        }\n        getWidth() {\n            const outer = this.document.createElement('div');\n            outer.style.visibility = 'hidden';\n            outer.style.width = '100px';\n            outer.style.msOverflowStyle = 'scrollbar';\n            this.document.body.appendChild(outer);\n            const widthNoScroll = outer.offsetWidth;\n            outer.style.overflow = 'scroll';\n            const inner = this.document.createElement('div');\n            inner.style.width = '100%';\n            outer.appendChild(inner);\n            const widthWithScroll = inner.offsetWidth;\n            outer.parentNode.removeChild(outer);\n            return widthNoScroll - widthWithScroll;\n        }\n    }\n    ScrollbarHelper.ɵfac = function ScrollbarHelper_Factory(t) { return new (t || ScrollbarHelper)(core[\"jc\" /* ɵɵinject */](common[\"e\" /* DOCUMENT */])); };\n    ScrollbarHelper.ɵprov = core[\"Sb\" /* ɵɵdefineInjectable */]({ token: ScrollbarHelper, factory: ScrollbarHelper.ɵfac });\n    return ScrollbarHelper;\n})();\nlet swimlane_ngx_datatable_DimensionsHelper = /*@__PURE__*/ (() => {\n    class DimensionsHelper {\n        getDimensions(element) {\n            return element.getBoundingClientRect();\n        }\n    }\n    DimensionsHelper.ɵfac = function DimensionsHelper_Factory(t) { return new (t || DimensionsHelper)(); };\n    DimensionsHelper.ɵprov = core[\"Sb\" /* ɵɵdefineInjectable */]({ token: DimensionsHelper, factory: DimensionsHelper.ɵfac });\n    return DimensionsHelper;\n})();\nlet swimlane_ngx_datatable_ColumnChangesService = /*@__PURE__*/ (() => {\n    class ColumnChangesService {\n        constructor() {\n            this.columnInputChanges = new Subject[\"a\" /* Subject */]();\n        }\n        get columnInputChanges$() {\n            return this.columnInputChanges.asObservable();\n        }\n        onInputChange() {\n            this.columnInputChanges.next();\n        }\n    }\n    ColumnChangesService.ɵfac = function ColumnChangesService_Factory(t) { return new (t || ColumnChangesService)(); };\n    ColumnChangesService.ɵprov = core[\"Sb\" /* ɵɵdefineInjectable */]({ token: ColumnChangesService, factory: ColumnChangesService.ɵfac });\n    return ColumnChangesService;\n})();\nlet swimlane_ngx_datatable_DataTableFooterTemplateDirective = /*@__PURE__*/ (() => {\n    class DataTableFooterTemplateDirective {\n        constructor(template) {\n            this.template = template;\n        }\n    }\n    DataTableFooterTemplateDirective.ɵfac = function DataTableFooterTemplateDirective_Factory(t) { return new (t || DataTableFooterTemplateDirective)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"T\" /* TemplateRef */])); };\n    DataTableFooterTemplateDirective.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: DataTableFooterTemplateDirective, selectors: [[\"\", \"ngx-datatable-footer-template\", \"\"]] });\n    return DataTableFooterTemplateDirective;\n})();\nlet swimlane_ngx_datatable_VisibilityDirective = /*@__PURE__*/ (() => {\n    class VisibilityDirective {\n        constructor(element, zone) {\n            this.element = element;\n            this.zone = zone;\n            this.isVisible = false;\n            this.visible = new core[\"p\" /* EventEmitter */]();\n        }\n        ngOnInit() {\n            this.runCheck();\n        }\n        ngOnDestroy() {\n            clearTimeout(this.timeout);\n        }\n        onVisibilityChange() {\n            // trigger zone recalc for columns\n            this.zone.run(() => {\n                this.isVisible = true;\n                this.visible.emit(true);\n            });\n        }\n        runCheck() {\n            const check = () => {\n                // https://davidwalsh.name/offsetheight-visibility\n                const { offsetHeight, offsetWidth } = this.element.nativeElement;\n                if (offsetHeight && offsetWidth) {\n                    clearTimeout(this.timeout);\n                    this.onVisibilityChange();\n                }\n                else {\n                    clearTimeout(this.timeout);\n                    this.zone.runOutsideAngular(() => {\n                        this.timeout = setTimeout(() => check(), 50);\n                    });\n                }\n            };\n            this.timeout = setTimeout(() => check());\n        }\n    }\n    VisibilityDirective.ɵfac = function VisibilityDirective_Factory(t) { return new (t || VisibilityDirective)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"n\" /* ElementRef */]), core[\"Wb\" /* ɵɵdirectiveInject */](core[\"E\" /* NgZone */])); };\n    VisibilityDirective.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: VisibilityDirective, selectors: [[\"\", \"visibilityObserver\", \"\"]], hostVars: 2, hostBindings: function VisibilityDirective_HostBindings(rf, ctx) {\n            if (rf & 2) {\n                core[\"Ob\" /* ɵɵclassProp */](\"visible\", ctx.isVisible);\n            }\n        }, outputs: { visible: \"visible\" } });\n    return VisibilityDirective;\n})();\nlet swimlane_ngx_datatable_DraggableDirective = /*@__PURE__*/ (() => {\n    class DraggableDirective {\n        constructor(element) {\n            this.dragX = true;\n            this.dragY = true;\n            this.dragStart = new core[\"p\" /* EventEmitter */]();\n            this.dragging = new core[\"p\" /* EventEmitter */]();\n            this.dragEnd = new core[\"p\" /* EventEmitter */]();\n            this.isDragging = false;\n            this.element = element.nativeElement;\n        }\n        ngOnChanges(changes) {\n            if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\n                this.onMousedown(changes['dragEventTarget'].currentValue);\n            }\n        }\n        ngOnDestroy() {\n            this._destroySubscription();\n        }\n        onMouseup(event) {\n            if (!this.isDragging)\n                return;\n            this.isDragging = false;\n            this.element.classList.remove('dragging');\n            if (this.subscription) {\n                this._destroySubscription();\n                this.dragEnd.emit({\n                    event,\n                    element: this.element,\n                    model: this.dragModel\n                });\n            }\n        }\n        onMousedown(event) {\n            // we only want to drag the inner header text\n            const isDragElm = event.target.classList.contains('draggable');\n            if (isDragElm && (this.dragX || this.dragY)) {\n                event.preventDefault();\n                this.isDragging = true;\n                const mouseDownPos = { x: event.clientX, y: event.clientY };\n                const mouseup = Object(fromEvent[\"a\" /* fromEvent */])(document, 'mouseup');\n                this.subscription = mouseup.subscribe((ev) => this.onMouseup(ev));\n                const mouseMoveSub = Object(fromEvent[\"a\" /* fromEvent */])(document, 'mousemove')\n                    .pipe(Object(takeUntil[\"a\" /* takeUntil */])(mouseup))\n                    .subscribe((ev) => this.move(ev, mouseDownPos));\n                this.subscription.add(mouseMoveSub);\n                this.dragStart.emit({\n                    event,\n                    element: this.element,\n                    model: this.dragModel\n                });\n            }\n        }\n        move(event, mouseDownPos) {\n            if (!this.isDragging)\n                return;\n            const x = event.clientX - mouseDownPos.x;\n            const y = event.clientY - mouseDownPos.y;\n            if (this.dragX)\n                this.element.style.left = `${x}px`;\n            if (this.dragY)\n                this.element.style.top = `${y}px`;\n            this.element.classList.add('dragging');\n            this.dragging.emit({\n                event,\n                element: this.element,\n                model: this.dragModel\n            });\n        }\n        _destroySubscription() {\n            if (this.subscription) {\n                this.subscription.unsubscribe();\n                this.subscription = undefined;\n            }\n        }\n    }\n    DraggableDirective.ɵfac = function DraggableDirective_Factory(t) { return new (t || DraggableDirective)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"n\" /* ElementRef */])); };\n    DraggableDirective.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: DraggableDirective, selectors: [[\"\", \"draggable\", \"\"]], inputs: { dragX: \"dragX\", dragY: \"dragY\", dragEventTarget: \"dragEventTarget\", dragModel: \"dragModel\" }, outputs: { dragStart: \"dragStart\", dragging: \"dragging\", dragEnd: \"dragEnd\" }, features: [core[\"Gb\" /* ɵɵNgOnChangesFeature */]] });\n    return DraggableDirective;\n})();\nlet swimlane_ngx_datatable_ResizeableDirective = /*@__PURE__*/ (() => {\n    class ResizeableDirective {\n        constructor(element, renderer) {\n            this.renderer = renderer;\n            this.resizeEnabled = true;\n            this.resize = new core[\"p\" /* EventEmitter */]();\n            this.resizing = false;\n            this.element = element.nativeElement;\n        }\n        ngAfterViewInit() {\n            const renderer2 = this.renderer;\n            this.resizeHandle = renderer2.createElement('span');\n            if (this.resizeEnabled) {\n                renderer2.addClass(this.resizeHandle, 'resize-handle');\n            }\n            else {\n                renderer2.addClass(this.resizeHandle, 'resize-handle--not-resizable');\n            }\n            renderer2.appendChild(this.element, this.resizeHandle);\n        }\n        ngOnDestroy() {\n            this._destroySubscription();\n            if (this.renderer.destroyNode) {\n                this.renderer.destroyNode(this.resizeHandle);\n            }\n            else if (this.resizeHandle) {\n                this.renderer.removeChild(this.renderer.parentNode(this.resizeHandle), this.resizeHandle);\n            }\n        }\n        onMouseup() {\n            this.resizing = false;\n            if (this.subscription && !this.subscription.closed) {\n                this._destroySubscription();\n                this.resize.emit(this.element.clientWidth);\n            }\n        }\n        onMousedown(event) {\n            const isHandle = event.target.classList.contains('resize-handle');\n            const initialWidth = this.element.clientWidth;\n            const mouseDownScreenX = event.screenX;\n            if (isHandle) {\n                event.stopPropagation();\n                this.resizing = true;\n                const mouseup = Object(fromEvent[\"a\" /* fromEvent */])(document, 'mouseup');\n                this.subscription = mouseup.subscribe((ev) => this.onMouseup());\n                const mouseMoveSub = Object(fromEvent[\"a\" /* fromEvent */])(document, 'mousemove')\n                    .pipe(Object(takeUntil[\"a\" /* takeUntil */])(mouseup))\n                    .subscribe((e) => this.move(e, initialWidth, mouseDownScreenX));\n                this.subscription.add(mouseMoveSub);\n            }\n        }\n        move(event, initialWidth, mouseDownScreenX) {\n            const movementX = event.screenX - mouseDownScreenX;\n            const newWidth = initialWidth + movementX;\n            const overMinWidth = !this.minWidth || newWidth >= this.minWidth;\n            const underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\n            if (overMinWidth && underMaxWidth) {\n                this.element.style.width = `${newWidth}px`;\n            }\n        }\n        _destroySubscription() {\n            if (this.subscription) {\n                this.subscription.unsubscribe();\n                this.subscription = undefined;\n            }\n        }\n    }\n    ResizeableDirective.ɵfac = function ResizeableDirective_Factory(t) { return new (t || ResizeableDirective)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"n\" /* ElementRef */]), core[\"Wb\" /* ɵɵdirectiveInject */](core[\"L\" /* Renderer2 */])); };\n    ResizeableDirective.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: ResizeableDirective, selectors: [[\"\", \"resizeable\", \"\"]], hostVars: 2, hostBindings: function ResizeableDirective_HostBindings(rf, ctx) {\n            if (rf & 1) {\n                core[\"mc\" /* ɵɵlistener */](\"mousedown\", function ResizeableDirective_mousedown_HostBindingHandler($event) { return ctx.onMousedown($event); });\n            }\n            if (rf & 2) {\n                core[\"Ob\" /* ɵɵclassProp */](\"resizeable\", ctx.resizeEnabled);\n            }\n        }, inputs: { resizeEnabled: \"resizeEnabled\", minWidth: \"minWidth\", maxWidth: \"maxWidth\" }, outputs: { resize: \"resize\" } });\n    return ResizeableDirective;\n})();\nlet swimlane_ngx_datatable_OrderableDirective = /*@__PURE__*/ (() => {\n    class OrderableDirective {\n        constructor(differs, document) {\n            this.document = document;\n            this.reorder = new core[\"p\" /* EventEmitter */]();\n            this.targetChanged = new core[\"p\" /* EventEmitter */]();\n            this.differ = differs.find({}).create();\n        }\n        ngAfterContentInit() {\n            // HACK: Investigate Better Way\n            this.updateSubscriptions();\n            this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\n        }\n        ngOnDestroy() {\n            this.draggables.forEach(d => {\n                d.dragStart.unsubscribe();\n                d.dragging.unsubscribe();\n                d.dragEnd.unsubscribe();\n            });\n        }\n        updateSubscriptions() {\n            const diffs = this.differ.diff(this.createMapDiffs());\n            if (diffs) {\n                const subscribe = ({ currentValue, previousValue }) => {\n                    unsubscribe({ previousValue });\n                    if (currentValue) {\n                        currentValue.dragStart.subscribe(this.onDragStart.bind(this));\n                        currentValue.dragging.subscribe(this.onDragging.bind(this));\n                        currentValue.dragEnd.subscribe(this.onDragEnd.bind(this));\n                    }\n                };\n                const unsubscribe = ({ previousValue }) => {\n                    if (previousValue) {\n                        previousValue.dragStart.unsubscribe();\n                        previousValue.dragging.unsubscribe();\n                        previousValue.dragEnd.unsubscribe();\n                    }\n                };\n                diffs.forEachAddedItem(subscribe);\n                // diffs.forEachChangedItem(subscribe.bind(this));\n                diffs.forEachRemovedItem(unsubscribe);\n            }\n        }\n        onDragStart() {\n            this.positions = {};\n            let i = 0;\n            for (const dragger of this.draggables.toArray()) {\n                const elm = dragger.element;\n                const left = parseInt(elm.offsetLeft.toString(), 0);\n                this.positions[dragger.dragModel.prop] = {\n                    left,\n                    right: left + parseInt(elm.offsetWidth.toString(), 0),\n                    index: i++,\n                    element: elm\n                };\n            }\n        }\n        onDragging({ element, model, event }) {\n            const prevPos = this.positions[model.prop];\n            const target = this.isTarget(model, event);\n            if (target) {\n                if (this.lastDraggingIndex !== target.i) {\n                    this.targetChanged.emit({\n                        prevIndex: this.lastDraggingIndex,\n                        newIndex: target.i,\n                        initialIndex: prevPos.index\n                    });\n                    this.lastDraggingIndex = target.i;\n                }\n            }\n            else if (this.lastDraggingIndex !== prevPos.index) {\n                this.targetChanged.emit({\n                    prevIndex: this.lastDraggingIndex,\n                    initialIndex: prevPos.index\n                });\n                this.lastDraggingIndex = prevPos.index;\n            }\n        }\n        onDragEnd({ element, model, event }) {\n            const prevPos = this.positions[model.prop];\n            const target = this.isTarget(model, event);\n            if (target) {\n                this.reorder.emit({\n                    prevIndex: prevPos.index,\n                    newIndex: target.i,\n                    model\n                });\n            }\n            this.lastDraggingIndex = undefined;\n            element.style.left = 'auto';\n        }\n        isTarget(model, event) {\n            let i = 0;\n            const x = event.x || event.clientX;\n            const y = event.y || event.clientY;\n            const targets = this.document.elementsFromPoint(x, y);\n            for (const prop in this.positions) {\n                // current column position which throws event.\n                const pos = this.positions[prop];\n                // since we drag the inner span, we need to find it in the elements at the cursor\n                if (model.prop !== prop && targets.find((el) => el === pos.element)) {\n                    return {\n                        pos,\n                        i\n                    };\n                }\n                i++;\n            }\n        }\n        createMapDiffs() {\n            return this.draggables.toArray().reduce((acc, curr) => {\n                acc[curr.dragModel.$$id] = curr;\n                return acc;\n            }, {});\n        }\n    }\n    OrderableDirective.ɵfac = function OrderableDirective_Factory(t) { return new (t || OrderableDirective)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"x\" /* KeyValueDiffers */]), core[\"Wb\" /* ɵɵdirectiveInject */](common[\"e\" /* DOCUMENT */])); };\n    OrderableDirective.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: OrderableDirective, selectors: [[\"\", \"orderable\", \"\"]], contentQueries: function OrderableDirective_ContentQueries(rf, ctx, dirIndex) {\n            if (rf & 1) {\n                core[\"Pb\" /* ɵɵcontentQuery */](dirIndex, swimlane_ngx_datatable_DraggableDirective, 1);\n            }\n            if (rf & 2) {\n                let _t;\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.draggables = _t);\n            }\n        }, outputs: { reorder: \"reorder\", targetChanged: \"targetChanged\" } });\n    return OrderableDirective;\n})();\nlet swimlane_ngx_datatable_LongPressDirective = /*@__PURE__*/ (() => {\n    class LongPressDirective {\n        constructor() {\n            this.pressEnabled = true;\n            this.duration = 500;\n            this.longPressStart = new core[\"p\" /* EventEmitter */]();\n            this.longPressing = new core[\"p\" /* EventEmitter */]();\n            this.longPressEnd = new core[\"p\" /* EventEmitter */]();\n            this.mouseX = 0;\n            this.mouseY = 0;\n        }\n        get press() {\n            return this.pressing;\n        }\n        get isLongPress() {\n            return this.isLongPressing;\n        }\n        onMouseDown(event) {\n            // don't do right/middle clicks\n            if (event.which !== 1 || !this.pressEnabled)\n                return;\n            // don't start drag if its on resize handle\n            const target = event.target;\n            if (target.classList.contains('resize-handle'))\n                return;\n            this.mouseX = event.clientX;\n            this.mouseY = event.clientY;\n            this.pressing = true;\n            this.isLongPressing = false;\n            const mouseup = Object(fromEvent[\"a\" /* fromEvent */])(document, 'mouseup');\n            this.subscription = mouseup.subscribe((ev) => this.onMouseup());\n            this.timeout = setTimeout(() => {\n                this.isLongPressing = true;\n                this.longPressStart.emit({\n                    event,\n                    model: this.pressModel\n                });\n                this.subscription.add(Object(fromEvent[\"a\" /* fromEvent */])(document, 'mousemove')\n                    .pipe(Object(takeUntil[\"a\" /* takeUntil */])(mouseup))\n                    .subscribe((mouseEvent) => this.onMouseMove(mouseEvent)));\n                this.loop(event);\n            }, this.duration);\n            this.loop(event);\n        }\n        onMouseMove(event) {\n            if (this.pressing && !this.isLongPressing) {\n                const xThres = Math.abs(event.clientX - this.mouseX) > 10;\n                const yThres = Math.abs(event.clientY - this.mouseY) > 10;\n                if (xThres || yThres) {\n                    this.endPress();\n                }\n            }\n        }\n        loop(event) {\n            if (this.isLongPressing) {\n                this.timeout = setTimeout(() => {\n                    this.longPressing.emit({\n                        event,\n                        model: this.pressModel\n                    });\n                    this.loop(event);\n                }, 50);\n            }\n        }\n        endPress() {\n            clearTimeout(this.timeout);\n            this.isLongPressing = false;\n            this.pressing = false;\n            this._destroySubscription();\n            this.longPressEnd.emit({\n                model: this.pressModel\n            });\n        }\n        onMouseup() {\n            this.endPress();\n        }\n        ngOnDestroy() {\n            this._destroySubscription();\n        }\n        _destroySubscription() {\n            if (this.subscription) {\n                this.subscription.unsubscribe();\n                this.subscription = undefined;\n            }\n        }\n    }\n    LongPressDirective.ɵfac = function LongPressDirective_Factory(t) { return new (t || LongPressDirective)(); };\n    LongPressDirective.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: LongPressDirective, selectors: [[\"\", \"long-press\", \"\"]], hostVars: 4, hostBindings: function LongPressDirective_HostBindings(rf, ctx) {\n            if (rf & 1) {\n                core[\"mc\" /* ɵɵlistener */](\"mousedown\", function LongPressDirective_mousedown_HostBindingHandler($event) { return ctx.onMouseDown($event); });\n            }\n            if (rf & 2) {\n                core[\"Ob\" /* ɵɵclassProp */](\"press\", ctx.press)(\"longpress\", ctx.isLongPress);\n            }\n        }, inputs: { pressEnabled: \"pressEnabled\", duration: \"duration\", pressModel: \"pressModel\" }, outputs: { longPressStart: \"longPressStart\", longPressing: \"longPressing\", longPressEnd: \"longPressEnd\" } });\n    return LongPressDirective;\n})();\nlet swimlane_ngx_datatable_ScrollerComponent = /*@__PURE__*/ (() => {\n    class ScrollerComponent {\n        constructor(ngZone, element, renderer) {\n            this.ngZone = ngZone;\n            this.renderer = renderer;\n            this.scrollbarV = false;\n            this.scrollbarH = false;\n            this.scroll = new core[\"p\" /* EventEmitter */]();\n            this.scrollYPos = 0;\n            this.scrollXPos = 0;\n            this.prevScrollYPos = 0;\n            this.prevScrollXPos = 0;\n            this._scrollEventListener = null;\n            this.element = element.nativeElement;\n        }\n        ngOnInit() {\n            // manual bind so we don't always listen\n            if (this.scrollbarV || this.scrollbarH) {\n                const renderer = this.renderer;\n                this.parentElement = renderer.parentNode(renderer.parentNode(this.element));\n                this._scrollEventListener = this.onScrolled.bind(this);\n                this.parentElement.addEventListener('scroll', this._scrollEventListener);\n            }\n        }\n        ngOnDestroy() {\n            if (this._scrollEventListener) {\n                this.parentElement.removeEventListener('scroll', this._scrollEventListener);\n                this._scrollEventListener = null;\n            }\n        }\n        setOffset(offsetY) {\n            if (this.parentElement) {\n                this.parentElement.scrollTop = offsetY;\n            }\n        }\n        onScrolled(event) {\n            const dom = event.currentTarget;\n            requestAnimationFrame(() => {\n                this.scrollYPos = dom.scrollTop;\n                this.scrollXPos = dom.scrollLeft;\n                this.updateOffset();\n            });\n        }\n        updateOffset() {\n            let direction;\n            if (this.scrollYPos < this.prevScrollYPos) {\n                direction = 'down';\n            }\n            else if (this.scrollYPos > this.prevScrollYPos) {\n                direction = 'up';\n            }\n            this.scroll.emit({\n                direction,\n                scrollYPos: this.scrollYPos,\n                scrollXPos: this.scrollXPos\n            });\n            this.prevScrollYPos = this.scrollYPos;\n            this.prevScrollXPos = this.scrollXPos;\n        }\n    }\n    ScrollerComponent.ɵfac = function ScrollerComponent_Factory(t) { return new (t || ScrollerComponent)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"E\" /* NgZone */]), core[\"Wb\" /* ɵɵdirectiveInject */](core[\"n\" /* ElementRef */]), core[\"Wb\" /* ɵɵdirectiveInject */](core[\"L\" /* Renderer2 */])); };\n    ScrollerComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: ScrollerComponent, selectors: [[\"datatable-scroller\"]], hostAttrs: [1, \"datatable-scroll\"], hostVars: 4, hostBindings: function ScrollerComponent_HostBindings(rf, ctx) {\n            if (rf & 2) {\n                core[\"Qc\" /* ɵɵstyleProp */](\"height\", ctx.scrollHeight, \"px\")(\"width\", ctx.scrollWidth, \"px\");\n            }\n        }, inputs: { scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", scrollHeight: \"scrollHeight\", scrollWidth: \"scrollWidth\" }, outputs: { scroll: \"scroll\" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function ScrollerComponent_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"uc\" /* ɵɵprojectionDef */]();\n                core[\"tc\" /* ɵɵprojection */](0);\n            }\n        }, encapsulation: 2, changeDetection: 0 });\n    return ScrollerComponent;\n})();\nlet swimlane_ngx_datatable_DatatableGroupHeaderTemplateDirective = /*@__PURE__*/ (() => {\n    class DatatableGroupHeaderTemplateDirective {\n        constructor(template) {\n            this.template = template;\n        }\n    }\n    DatatableGroupHeaderTemplateDirective.ɵfac = function DatatableGroupHeaderTemplateDirective_Factory(t) { return new (t || DatatableGroupHeaderTemplateDirective)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"T\" /* TemplateRef */])); };\n    DatatableGroupHeaderTemplateDirective.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: DatatableGroupHeaderTemplateDirective, selectors: [[\"\", \"ngx-datatable-group-header-template\", \"\"]] });\n    return DatatableGroupHeaderTemplateDirective;\n})();\nlet swimlane_ngx_datatable_DatatableGroupHeaderDirective = /*@__PURE__*/ (() => {\n    class DatatableGroupHeaderDirective {\n        constructor() {\n            /**\n             * Row height is required when virtual scroll is enabled.\n             */\n            this.rowHeight = 0;\n            /**\n             * Track toggling of group visibility\n             */\n            this.toggle = new core[\"p\" /* EventEmitter */]();\n        }\n        get template() {\n            return this._templateInput || this._templateQuery;\n        }\n        /**\n         * Toggle the expansion of a group\n         */\n        toggleExpandGroup(group) {\n            this.toggle.emit({\n                type: 'group',\n                value: group\n            });\n        }\n        /**\n         * Expand all groups\n         */\n        expandAllGroups() {\n            this.toggle.emit({\n                type: 'all',\n                value: true\n            });\n        }\n        /**\n         * Collapse all groups\n         */\n        collapseAllGroups() {\n            this.toggle.emit({\n                type: 'all',\n                value: false\n            });\n        }\n    }\n    DatatableGroupHeaderDirective.ɵfac = function DatatableGroupHeaderDirective_Factory(t) { return new (t || DatatableGroupHeaderDirective)(); };\n    DatatableGroupHeaderDirective.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: DatatableGroupHeaderDirective, selectors: [[\"ngx-datatable-group-header\"]], contentQueries: function DatatableGroupHeaderDirective_ContentQueries(rf, ctx, dirIndex) {\n            if (rf & 1) {\n                core[\"Pb\" /* ɵɵcontentQuery */](dirIndex, swimlane_ngx_datatable_DatatableGroupHeaderTemplateDirective, 3, core[\"T\" /* TemplateRef */]);\n            }\n            if (rf & 2) {\n                let _t;\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx._templateQuery = _t.first);\n            }\n        }, inputs: { rowHeight: \"rowHeight\", _templateInput: [\"template\", \"_templateInput\"] }, outputs: { toggle: \"toggle\" } });\n    return DatatableGroupHeaderDirective;\n})();\n/**\n * Always returns the empty string ''\n */\nfunction emptyStringGetter() {\n    return '';\n}\n/**\n * Returns the appropriate getter function for this kind of prop.\n * If prop == null, returns the emptyStringGetter.\n */\nfunction getterForProp(prop) {\n    if (prop == null) {\n        return emptyStringGetter;\n    }\n    if (typeof prop === 'number') {\n        return numericIndexGetter;\n    }\n    else {\n        // deep or simple\n        if (prop.indexOf('.') !== -1) {\n            return deepValueGetter;\n        }\n        else {\n            return shallowValueGetter;\n        }\n    }\n}\n/**\n * Returns the value at this numeric index.\n * @param row array of values\n * @param index numeric index\n * @returns any or '' if invalid index\n */\nfunction numericIndexGetter(row, index) {\n    if (row == null) {\n        return '';\n    }\n    // mimic behavior of deepValueGetter\n    if (!row || index == null) {\n        return row;\n    }\n    const value = row[index];\n    if (value == null) {\n        return '';\n    }\n    return value;\n}\n/**\n * Returns the value of a field.\n * (more efficient than deepValueGetter)\n * @param obj object containing the field\n * @param fieldName field name string\n */\nfunction shallowValueGetter(obj, fieldName) {\n    if (obj == null) {\n        return '';\n    }\n    if (!obj || !fieldName) {\n        return obj;\n    }\n    const value = obj[fieldName];\n    if (value == null) {\n        return '';\n    }\n    return value;\n}\n/**\n * Returns a deep object given a string. zoo['animal.type']\n */\nfunction deepValueGetter(obj, path) {\n    if (obj == null) {\n        return '';\n    }\n    if (!obj || !path) {\n        return obj;\n    }\n    // check if path matches a root-level field\n    // { \"a.b.c\": 123 }\n    let current = obj[path];\n    if (current !== undefined) {\n        return current;\n    }\n    current = obj;\n    const split = path.split('.');\n    if (split.length) {\n        for (let i = 0; i < split.length; i++) {\n            current = current[split[i]];\n            // if found undefined, return empty string\n            if (current === undefined || current === null) {\n                return '';\n            }\n        }\n    }\n    return current;\n}\nfunction optionalGetterForProp(prop) {\n    return prop && (row => getterForProp(prop)(row, prop));\n}\n/**\n * This functions rearrange items by their parents\n * Also sets the level value to each of the items\n *\n * Note: Expecting each item has a property called parentId\n * Note: This algorithm will fail if a list has two or more items with same ID\n * NOTE: This algorithm will fail if there is a deadlock of relationship\n *\n * For example,\n *\n * Input\n *\n * id -> parent\n * 1  -> 0\n * 2  -> 0\n * 3  -> 1\n * 4  -> 1\n * 5  -> 2\n * 7  -> 8\n * 6  -> 3\n *\n *\n * Output\n * id -> level\n * 1      -> 0\n * --3    -> 1\n * ----6  -> 2\n * --4    -> 1\n * 2      -> 0\n * --5    -> 1\n * 7     -> 8\n *\n *\n * @param rows\n *\n */\nfunction groupRowsByParents(rows, from, to) {\n    if (from && to) {\n        const nodeById = {};\n        const l = rows.length;\n        let node = null;\n        nodeById[0] = new TreeNode(); // that's the root node\n        const uniqIDs = rows.reduce((arr, item) => {\n            const toValue = to(item);\n            if (arr.indexOf(toValue) === -1) {\n                arr.push(toValue);\n            }\n            return arr;\n        }, []);\n        for (let i = 0; i < l; i++) {\n            // make TreeNode objects for each item\n            nodeById[to(rows[i])] = new TreeNode(rows[i]);\n        }\n        for (let i = 0; i < l; i++) {\n            // link all TreeNode objects\n            node = nodeById[to(rows[i])];\n            let parent = 0;\n            const fromValue = from(node.row);\n            if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {\n                parent = fromValue;\n            }\n            node.parent = nodeById[parent];\n            node.row['level'] = node.parent.row['level'] + 1;\n            node.parent.children.push(node);\n        }\n        let resolvedRows = [];\n        nodeById[0].flatten(function () {\n            resolvedRows = [...resolvedRows, this.row];\n        }, true);\n        return resolvedRows;\n    }\n    else {\n        return rows;\n    }\n}\nclass TreeNode {\n    constructor(row = null) {\n        if (!row) {\n            row = {\n                level: -1,\n                treeStatus: 'expanded'\n            };\n        }\n        this.row = row;\n        this.parent = null;\n        this.children = [];\n    }\n    flatten(f, recursive) {\n        if (this.row['treeStatus'] === 'expanded') {\n            for (let i = 0, l = this.children.length; i < l; i++) {\n                const child = this.children[i];\n                f.apply(child, Array.prototype.slice.call(arguments, 2));\n                if (recursive)\n                    child.flatten.apply(child, arguments);\n            }\n        }\n    }\n}\n/**\n * Converts strings from something to camel case\n * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase\n */\nfunction camelCase(str) {\n    // Replace special characters with a space\n    str = str.replace(/[^a-zA-Z0-9 ]/g, ' ');\n    // put a space before an uppercase letter\n    str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n    // Lower case first character and some other stuff\n    str = str\n        .replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '')\n        .trim()\n        .toLowerCase();\n    // uppercase characters preceded by a space or number\n    str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function (a, b, c) {\n        return b.trim() + c.toUpperCase();\n    });\n    return str;\n}\n/**\n * Converts strings from camel case to words\n * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\n */\nfunction deCamelCase(str) {\n    return str.replace(/([A-Z])/g, match => ` ${match}`).replace(/^./, match => match.toUpperCase());\n}\n/**\n * Creates a unique object id.\n * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n */\nfunction id() {\n    return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n}\n/**\n * Sets the column defaults\n */\nfunction setColumnDefaults(columns) {\n    if (!columns)\n        return;\n    // Only one column should hold the tree view\n    // Thus if multiple columns are provided with\n    // isTreeColumn as true we take only the first one\n    let treeColumnFound = false;\n    for (const column of columns) {\n        if (!column.$$id) {\n            column.$$id = id();\n        }\n        // prop can be numeric; zero is valid not a missing prop\n        // translate name => prop\n        if (isNullOrUndefined(column.prop) && column.name) {\n            column.prop = camelCase(column.name);\n        }\n        if (!column.$$valueGetter) {\n            column.$$valueGetter = getterForProp(column.prop);\n        }\n        // format props if no name passed\n        if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n            column.name = deCamelCase(String(column.prop));\n        }\n        if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n            column.name = ''; // Fixes IE and Edge displaying `null`\n        }\n        if (!column.hasOwnProperty('resizeable')) {\n            column.resizeable = true;\n        }\n        if (!column.hasOwnProperty('sortable')) {\n            column.sortable = true;\n        }\n        if (!column.hasOwnProperty('draggable')) {\n            column.draggable = true;\n        }\n        if (!column.hasOwnProperty('canAutoResize')) {\n            column.canAutoResize = true;\n        }\n        if (!column.hasOwnProperty('width')) {\n            column.width = 150;\n        }\n        if (!column.hasOwnProperty('isTreeColumn')) {\n            column.isTreeColumn = false;\n        }\n        else {\n            if (column.isTreeColumn && !treeColumnFound) {\n                // If the first column with isTreeColumn is true found\n                // we mark that treeCoulmn is found\n                treeColumnFound = true;\n            }\n            else {\n                // After that isTreeColumn property for any other column\n                // will be set as false\n                column.isTreeColumn = false;\n            }\n        }\n    }\n}\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Translates templates definitions to objects\n */\nfunction translateTemplates(templates) {\n    const result = [];\n    for (const temp of templates) {\n        const col = {};\n        const props = Object.getOwnPropertyNames(temp);\n        for (const prop of props) {\n            col[prop] = temp[prop];\n        }\n        if (temp.headerTemplate) {\n            col.headerTemplate = temp.headerTemplate;\n        }\n        if (temp.cellTemplate) {\n            col.cellTemplate = temp.cellTemplate;\n        }\n        if (temp.summaryFunc) {\n            col.summaryFunc = temp.summaryFunc;\n        }\n        if (temp.summaryTemplate) {\n            col.summaryTemplate = temp.summaryTemplate;\n        }\n        result.push(col);\n    }\n    return result;\n}\nvar ColumnMode = /*@__PURE__*/ (function (ColumnMode) {\n    ColumnMode[\"standard\"] = \"standard\";\n    ColumnMode[\"flex\"] = \"flex\";\n    ColumnMode[\"force\"] = \"force\";\n    return ColumnMode;\n})({});\nvar SelectionType = /*@__PURE__*/ (function (SelectionType) {\n    SelectionType[\"single\"] = \"single\";\n    SelectionType[\"multi\"] = \"multi\";\n    SelectionType[\"multiClick\"] = \"multiClick\";\n    SelectionType[\"cell\"] = \"cell\";\n    SelectionType[\"checkbox\"] = \"checkbox\";\n    return SelectionType;\n})({});\nvar SortType = /*@__PURE__*/ (function (SortType) {\n    SortType[\"single\"] = \"single\";\n    SortType[\"multi\"] = \"multi\";\n    return SortType;\n})({});\nvar ContextmenuType = /*@__PURE__*/ (function (ContextmenuType) {\n    ContextmenuType[\"header\"] = \"header\";\n    ContextmenuType[\"body\"] = \"body\";\n    return ContextmenuType;\n})({});\nlet swimlane_ngx_datatable_DataTableColumnHeaderDirective = /*@__PURE__*/ (() => {\n    class DataTableColumnHeaderDirective {\n        constructor(template) {\n            this.template = template;\n        }\n    }\n    DataTableColumnHeaderDirective.ɵfac = function DataTableColumnHeaderDirective_Factory(t) { return new (t || DataTableColumnHeaderDirective)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"T\" /* TemplateRef */])); };\n    DataTableColumnHeaderDirective.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: DataTableColumnHeaderDirective, selectors: [[\"\", \"ngx-datatable-header-template\", \"\"]] });\n    return DataTableColumnHeaderDirective;\n})();\nlet swimlane_ngx_datatable_DataTableColumnCellDirective = /*@__PURE__*/ (() => {\n    class DataTableColumnCellDirective {\n        constructor(template) {\n            this.template = template;\n        }\n    }\n    DataTableColumnCellDirective.ɵfac = function DataTableColumnCellDirective_Factory(t) { return new (t || DataTableColumnCellDirective)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"T\" /* TemplateRef */])); };\n    DataTableColumnCellDirective.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: DataTableColumnCellDirective, selectors: [[\"\", \"ngx-datatable-cell-template\", \"\"]] });\n    return DataTableColumnCellDirective;\n})();\nlet swimlane_ngx_datatable_DataTableColumnCellTreeToggle = /*@__PURE__*/ (() => {\n    class DataTableColumnCellTreeToggle {\n        constructor(template) {\n            this.template = template;\n        }\n    }\n    DataTableColumnCellTreeToggle.ɵfac = function DataTableColumnCellTreeToggle_Factory(t) { return new (t || DataTableColumnCellTreeToggle)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"T\" /* TemplateRef */])); };\n    DataTableColumnCellTreeToggle.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: DataTableColumnCellTreeToggle, selectors: [[\"\", \"ngx-datatable-tree-toggle\", \"\"]] });\n    return DataTableColumnCellTreeToggle;\n})();\nlet swimlane_ngx_datatable_DataTableColumnDirective = /*@__PURE__*/ (() => {\n    class DataTableColumnDirective {\n        constructor(columnChangesService) {\n            this.columnChangesService = columnChangesService;\n            this.isFirstChange = true;\n        }\n        get cellTemplate() {\n            return this._cellTemplateInput || this._cellTemplateQuery;\n        }\n        get headerTemplate() {\n            return this._headerTemplateInput || this._headerTemplateQuery;\n        }\n        get treeToggleTemplate() {\n            return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;\n        }\n        ngOnChanges() {\n            if (this.isFirstChange) {\n                this.isFirstChange = false;\n            }\n            else {\n                this.columnChangesService.onInputChange();\n            }\n        }\n    }\n    DataTableColumnDirective.ɵfac = function DataTableColumnDirective_Factory(t) { return new (t || DataTableColumnDirective)(core[\"Wb\" /* ɵɵdirectiveInject */](swimlane_ngx_datatable_ColumnChangesService)); };\n    DataTableColumnDirective.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: DataTableColumnDirective, selectors: [[\"ngx-datatable-column\"]], contentQueries: function DataTableColumnDirective_ContentQueries(rf, ctx, dirIndex) {\n            if (rf & 1) {\n                core[\"Pb\" /* ɵɵcontentQuery */](dirIndex, swimlane_ngx_datatable_DataTableColumnCellDirective, 3, core[\"T\" /* TemplateRef */]);\n                core[\"Pb\" /* ɵɵcontentQuery */](dirIndex, swimlane_ngx_datatable_DataTableColumnHeaderDirective, 3, core[\"T\" /* TemplateRef */]);\n                core[\"Pb\" /* ɵɵcontentQuery */](dirIndex, swimlane_ngx_datatable_DataTableColumnCellTreeToggle, 3, core[\"T\" /* TemplateRef */]);\n            }\n            if (rf & 2) {\n                let _t;\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx._cellTemplateQuery = _t.first);\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx._headerTemplateQuery = _t.first);\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx._treeToggleTemplateQuery = _t.first);\n            }\n        }, inputs: { name: \"name\", prop: \"prop\", frozenLeft: \"frozenLeft\", frozenRight: \"frozenRight\", flexGrow: \"flexGrow\", resizeable: \"resizeable\", comparator: \"comparator\", pipe: \"pipe\", sortable: \"sortable\", draggable: \"draggable\", canAutoResize: \"canAutoResize\", minWidth: \"minWidth\", width: \"width\", maxWidth: \"maxWidth\", checkboxable: \"checkboxable\", headerCheckboxable: \"headerCheckboxable\", headerClass: \"headerClass\", cellClass: \"cellClass\", isTreeColumn: \"isTreeColumn\", treeLevelIndent: \"treeLevelIndent\", summaryFunc: \"summaryFunc\", summaryTemplate: \"summaryTemplate\", _cellTemplateInput: [\"cellTemplate\", \"_cellTemplateInput\"], _headerTemplateInput: [\"headerTemplate\", \"_headerTemplateInput\"], _treeToggleTemplateInput: [\"treeToggleTemplate\", \"_treeToggleTemplateInput\"] }, features: [core[\"Gb\" /* ɵɵNgOnChangesFeature */]] });\n    return DataTableColumnDirective;\n})();\nlet swimlane_ngx_datatable_DatatableRowDetailTemplateDirective = /*@__PURE__*/ (() => {\n    class DatatableRowDetailTemplateDirective {\n        constructor(template) {\n            this.template = template;\n        }\n    }\n    DatatableRowDetailTemplateDirective.ɵfac = function DatatableRowDetailTemplateDirective_Factory(t) { return new (t || DatatableRowDetailTemplateDirective)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"T\" /* TemplateRef */])); };\n    DatatableRowDetailTemplateDirective.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: DatatableRowDetailTemplateDirective, selectors: [[\"\", \"ngx-datatable-row-detail-template\", \"\"]] });\n    return DatatableRowDetailTemplateDirective;\n})();\nlet swimlane_ngx_datatable_DatatableRowDetailDirective = /*@__PURE__*/ (() => {\n    class DatatableRowDetailDirective {\n        constructor() {\n            /**\n             * The detail row height is required especially\n             * when virtual scroll is enabled.\n             */\n            this.rowHeight = 0;\n            /**\n             * Row detail row visbility was toggled.\n             */\n            this.toggle = new core[\"p\" /* EventEmitter */]();\n        }\n        get template() {\n            return this._templateInput || this._templateQuery;\n        }\n        /**\n         * Toggle the expansion of the row\n         */\n        toggleExpandRow(row) {\n            this.toggle.emit({\n                type: 'row',\n                value: row\n            });\n        }\n        /**\n         * API method to expand all the rows.\n         */\n        expandAllRows() {\n            this.toggle.emit({\n                type: 'all',\n                value: true\n            });\n        }\n        /**\n         * API method to collapse all the rows.\n         */\n        collapseAllRows() {\n            this.toggle.emit({\n                type: 'all',\n                value: false\n            });\n        }\n    }\n    DatatableRowDetailDirective.ɵfac = function DatatableRowDetailDirective_Factory(t) { return new (t || DatatableRowDetailDirective)(); };\n    DatatableRowDetailDirective.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: DatatableRowDetailDirective, selectors: [[\"ngx-datatable-row-detail\"]], contentQueries: function DatatableRowDetailDirective_ContentQueries(rf, ctx, dirIndex) {\n            if (rf & 1) {\n                core[\"Pb\" /* ɵɵcontentQuery */](dirIndex, swimlane_ngx_datatable_DatatableRowDetailTemplateDirective, 3, core[\"T\" /* TemplateRef */]);\n            }\n            if (rf & 2) {\n                let _t;\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx._templateQuery = _t.first);\n            }\n        }, inputs: { rowHeight: \"rowHeight\", _templateInput: [\"template\", \"_templateInput\"] }, outputs: { toggle: \"toggle\" } });\n    return DatatableRowDetailDirective;\n})();\nlet swimlane_ngx_datatable_DatatableFooterDirective = /*@__PURE__*/ (() => {\n    class DatatableFooterDirective {\n        get template() {\n            return this._templateInput || this._templateQuery;\n        }\n    }\n    DatatableFooterDirective.ɵfac = function DatatableFooterDirective_Factory(t) { return new (t || DatatableFooterDirective)(); };\n    DatatableFooterDirective.ɵdir = core[\"Rb\" /* ɵɵdefineDirective */]({ type: DatatableFooterDirective, selectors: [[\"ngx-datatable-footer\"]], contentQueries: function DatatableFooterDirective_ContentQueries(rf, ctx, dirIndex) {\n            if (rf & 1) {\n                core[\"Pb\" /* ɵɵcontentQuery */](dirIndex, swimlane_ngx_datatable_DataTableFooterTemplateDirective, 1, core[\"T\" /* TemplateRef */]);\n            }\n            if (rf & 2) {\n                let _t;\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx._templateQuery = _t.first);\n            }\n        }, inputs: { footerHeight: \"footerHeight\", totalMessage: \"totalMessage\", selectedMessage: \"selectedMessage\", pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\", _templateInput: [\"template\", \"_templateInput\"] } });\n    return DatatableFooterDirective;\n})();\n/**\n * Returns the columns by pin.\n */\nfunction columnsByPin(cols) {\n    const ret = {\n        left: [],\n        center: [],\n        right: []\n    };\n    if (cols) {\n        for (const col of cols) {\n            if (col.frozenLeft) {\n                ret.left.push(col);\n            }\n            else if (col.frozenRight) {\n                ret.right.push(col);\n            }\n            else {\n                ret.center.push(col);\n            }\n        }\n    }\n    return ret;\n}\n/**\n * Returns the widths of all group sets of a column\n */\nfunction columnGroupWidths(groups, all) {\n    return {\n        left: columnTotalWidth(groups.left),\n        center: columnTotalWidth(groups.center),\n        right: columnTotalWidth(groups.right),\n        total: Math.floor(columnTotalWidth(all))\n    };\n}\n/**\n * Calculates the total width of all columns and their groups\n */\nfunction columnTotalWidth(columns, prop) {\n    let totalWidth = 0;\n    if (columns) {\n        for (const c of columns) {\n            const has = prop && c[prop];\n            const width = has ? c[prop] : c.width;\n            totalWidth = totalWidth + parseFloat(width);\n        }\n    }\n    return totalWidth;\n}\n/**\n * Calculates the total width of all columns and their groups\n */\nfunction columnsTotalWidth(columns, prop) {\n    let totalWidth = 0;\n    for (const column of columns) {\n        const has = prop && column[prop];\n        totalWidth = totalWidth + (has ? column[prop] : column.width);\n    }\n    return totalWidth;\n}\nfunction columnsByPinArr(val) {\n    const colsByPinArr = [];\n    const colsByPin = columnsByPin(val);\n    colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\n    colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\n    colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\n    return colsByPinArr;\n}\n/**\n * This object contains the cache of the various row heights that are present inside\n * the data table.   Its based on Fenwick tree data structure that helps with\n * querying sums that have time complexity of log n.\n *\n * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html\n * https://github.com/mikolalysenko/fenwick-tree\n *\n */\nclass RowHeightCache {\n    constructor() {\n        /**\n         * Tree Array stores the cumulative information of the row heights to perform efficient\n         * range queries and updates.  Currently the tree is initialized to the base row\n         * height instead of the detail row height.\n         */\n        this.treeArray = [];\n    }\n    /**\n     * Clear the Tree array.\n     */\n    clearCache() {\n        this.treeArray = [];\n    }\n    /**\n     * Initialize the Fenwick tree with row Heights.\n     *\n     * @param rows The array of rows which contain the expanded status.\n     * @param rowHeight The row height.\n     * @param detailRowHeight The detail row height.\n     */\n    initCache(details) {\n        const { rows, rowHeight, detailRowHeight, externalVirtual, rowCount, rowIndexes, rowExpansions } = details;\n        const isFn = typeof rowHeight === 'function';\n        const isDetailFn = typeof detailRowHeight === 'function';\n        if (!isFn && isNaN(rowHeight)) {\n            throw new Error(`Row Height cache initialization failed. Please ensure that 'rowHeight' is a\n        valid number or function value: (${rowHeight}) when 'scrollbarV' is enabled.`);\n        }\n        // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.\n        if (!isDetailFn && isNaN(detailRowHeight)) {\n            throw new Error(`Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\n        valid number or function value: (${detailRowHeight}) when 'scrollbarV' is enabled.`);\n        }\n        const n = externalVirtual ? rowCount : rows.length;\n        this.treeArray = new Array(n);\n        for (let i = 0; i < n; ++i) {\n            this.treeArray[i] = 0;\n        }\n        for (let i = 0; i < n; ++i) {\n            const row = rows[i];\n            let currentRowHeight = rowHeight;\n            if (isFn) {\n                currentRowHeight = rowHeight(row);\n            }\n            // Add the detail row height to the already expanded rows.\n            // This is useful for the table that goes through a filter or sort.\n            const expanded = rowExpansions.has(row);\n            if (row && expanded) {\n                if (isDetailFn) {\n                    const index = rowIndexes.get(row);\n                    currentRowHeight += detailRowHeight(row, index);\n                }\n                else {\n                    currentRowHeight += detailRowHeight;\n                }\n            }\n            this.update(i, currentRowHeight);\n        }\n    }\n    /**\n     * Given the ScrollY position i.e. sum, provide the rowIndex\n     * that is present in the current view port.  Below handles edge cases.\n     */\n    getRowIndex(scrollY) {\n        if (scrollY === 0)\n            return 0;\n        return this.calcRowIndex(scrollY);\n    }\n    /**\n     * When a row is expanded or rowHeight is changed, update the height.  This can\n     * be utilized in future when Angular Data table supports dynamic row heights.\n     */\n    update(atRowIndex, byRowHeight) {\n        if (!this.treeArray.length) {\n            throw new Error(`Update at index ${atRowIndex} with value ${byRowHeight} failed:\n        Row Height cache not initialized.`);\n        }\n        const n = this.treeArray.length;\n        atRowIndex |= 0;\n        while (atRowIndex < n) {\n            this.treeArray[atRowIndex] += byRowHeight;\n            atRowIndex |= atRowIndex + 1;\n        }\n    }\n    /**\n     * Range Sum query from 1 to the rowIndex\n     */\n    query(atIndex) {\n        if (!this.treeArray.length) {\n            throw new Error(`query at index ${atIndex} failed: Fenwick tree array not initialized.`);\n        }\n        let sum = 0;\n        atIndex |= 0;\n        while (atIndex >= 0) {\n            sum += this.treeArray[atIndex];\n            atIndex = (atIndex & (atIndex + 1)) - 1;\n        }\n        return sum;\n    }\n    /**\n     * Find the total height between 2 row indexes\n     */\n    queryBetween(atIndexA, atIndexB) {\n        return this.query(atIndexB) - this.query(atIndexA - 1);\n    }\n    /**\n     * Given the ScrollY position i.e. sum, provide the rowIndex\n     * that is present in the current view port.\n     */\n    calcRowIndex(sum) {\n        if (!this.treeArray.length)\n            return 0;\n        let pos = -1;\n        const dataLength = this.treeArray.length;\n        // Get the highest bit for the block size.\n        const highestBit = Math.pow(2, dataLength.toString(2).length - 1);\n        for (let blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {\n            const nextPos = pos + blockSize;\n            if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {\n                sum -= this.treeArray[nextPos];\n                pos = nextPos;\n            }\n        }\n        return pos + 1;\n    }\n}\nconst cache = {};\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined;\nconst ɵ0 = function () {\n    const styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;\n    const match = typeof styles !== 'undefined'\n        ? Array.prototype.slice\n            .call(styles)\n            .join('')\n            .match(/-(moz|webkit|ms)-/)\n        : null;\n    const pre = match !== null ? match[1] : undefined;\n    // tslint:disable-next-line: tsr-detect-non-literal-regexp\n    const dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;\n    return dom\n        ? {\n            dom,\n            lowercase: pre,\n            css: `-${pre}-`,\n            js: pre[0].toUpperCase() + pre.substr(1)\n        }\n        : undefined;\n};\n// Get Prefix\n// http://davidwalsh.name/vendor-prefix\nconst prefix = (ɵ0)();\nfunction getVendorPrefixedName(property) {\n    const name = camelCase(property);\n    if (!cache[name]) {\n        if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {\n            cache[name] = prefix.css + property;\n        }\n        else if (testStyle[property] !== undefined) {\n            cache[name] = property;\n        }\n    }\n    return cache[name];\n}\n// browser detection and prefixing tools\nconst transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;\nconst backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;\nconst hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;\nconst hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;\nconst ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';\nconst isSafari = /Safari\\//.test(ua) && !/Chrome\\//.test(ua);\nfunction translateXY(styles, x, y) {\n    if (typeof transform !== 'undefined' && hasCSSTransforms) {\n        if (!isSafari && hasCSS3DTransforms) {\n            styles[transform] = `translate3d(${x}px, ${y}px, 0)`;\n            styles[backfaceVisibility] = 'hidden';\n        }\n        else {\n            styles[camelCase(transform)] = `translate(${x}px, ${y}px)`;\n        }\n    }\n    else {\n        styles.top = `${y}px`;\n        styles.left = `${x}px`;\n    }\n}\nlet swimlane_ngx_datatable_DataTableBodyComponent = /*@__PURE__*/ (() => {\n    class DataTableBodyComponent {\n        /**\n         * Creates an instance of DataTableBodyComponent.\n         */\n        constructor(cd) {\n            this.cd = cd;\n            this.selected = [];\n            this.scroll = new core[\"p\" /* EventEmitter */]();\n            this.page = new core[\"p\" /* EventEmitter */]();\n            this.activate = new core[\"p\" /* EventEmitter */]();\n            this.select = new core[\"p\" /* EventEmitter */]();\n            this.detailToggle = new core[\"p\" /* EventEmitter */]();\n            this.rowContextmenu = new core[\"p\" /* EventEmitter */](false);\n            this.treeAction = new core[\"p\" /* EventEmitter */]();\n            this.rowHeightsCache = new RowHeightCache();\n            this.temp = [];\n            this.offsetY = 0;\n            this.indexes = {};\n            this.rowIndexes = new WeakMap();\n            this.rowExpansions = [];\n            /**\n             * Get the height of the detail row.\n             */\n            this.getDetailRowHeight = (row, index) => {\n                if (!this.rowDetail) {\n                    return 0;\n                }\n                const rowHeight = this.rowDetail.rowHeight;\n                return typeof rowHeight === 'function' ? rowHeight(row, index) : rowHeight;\n            };\n            // declare fn here so we can get access to the `this` property\n            this.rowTrackingFn = (index, row) => {\n                const idx = this.getRowIndex(row);\n                if (this.trackByProp) {\n                    return row[this.trackByProp];\n                }\n                else {\n                    return idx;\n                }\n            };\n        }\n        set pageSize(val) {\n            this._pageSize = val;\n            this.recalcLayout();\n        }\n        get pageSize() {\n            return this._pageSize;\n        }\n        set rows(val) {\n            this._rows = val;\n            this.recalcLayout();\n        }\n        get rows() {\n            return this._rows;\n        }\n        set columns(val) {\n            this._columns = val;\n            const colsByPin = columnsByPin(val);\n            this.columnGroupWidths = columnGroupWidths(colsByPin, val);\n        }\n        get columns() {\n            return this._columns;\n        }\n        set offset(val) {\n            this._offset = val;\n            if (!this.scrollbarV || (this.scrollbarV && !this.virtualization))\n                this.recalcLayout();\n        }\n        get offset() {\n            return this._offset;\n        }\n        set rowCount(val) {\n            this._rowCount = val;\n            this.recalcLayout();\n        }\n        get rowCount() {\n            return this._rowCount;\n        }\n        get bodyWidth() {\n            if (this.scrollbarH) {\n                return this.innerWidth + 'px';\n            }\n            else {\n                return '100%';\n            }\n        }\n        set bodyHeight(val) {\n            if (this.scrollbarV) {\n                this._bodyHeight = val + 'px';\n            }\n            else {\n                this._bodyHeight = 'auto';\n            }\n            this.recalcLayout();\n        }\n        get bodyHeight() {\n            return this._bodyHeight;\n        }\n        /**\n         * Returns if selection is enabled.\n         */\n        get selectEnabled() {\n            return !!this.selectionType;\n        }\n        /**\n         * Property that would calculate the height of scroll bar\n         * based on the row heights cache for virtual scroll and virtualization. Other scenarios\n         * calculate scroll height automatically (as height will be undefined).\n         */\n        get scrollHeight() {\n            if (this.scrollbarV && this.virtualization && this.rowCount) {\n                return this.rowHeightsCache.query(this.rowCount - 1);\n            }\n            // avoid TS7030: Not all code paths return a value.\n            return undefined;\n        }\n        /**\n         * Called after the constructor, initializing input properties\n         */\n        ngOnInit() {\n            if (this.rowDetail) {\n                this.listener = this.rowDetail.toggle.subscribe(({ type, value }) => {\n                    if (type === 'row') {\n                        this.toggleRowExpansion(value);\n                    }\n                    if (type === 'all') {\n                        this.toggleAllRows(value);\n                    }\n                    // Refresh rows after toggle\n                    // Fixes #883\n                    this.updateIndexes();\n                    this.updateRows();\n                    this.cd.markForCheck();\n                });\n            }\n            if (this.groupHeader) {\n                this.listener = this.groupHeader.toggle.subscribe(({ type, value }) => {\n                    if (type === 'group') {\n                        this.toggleRowExpansion(value);\n                    }\n                    if (type === 'all') {\n                        this.toggleAllRows(value);\n                    }\n                    // Refresh rows after toggle\n                    // Fixes #883\n                    this.updateIndexes();\n                    this.updateRows();\n                    this.cd.markForCheck();\n                });\n            }\n        }\n        /**\n         * Called once, before the instance is destroyed.\n         */\n        ngOnDestroy() {\n            if (this.rowDetail || this.groupHeader) {\n                this.listener.unsubscribe();\n            }\n        }\n        /**\n         * Updates the Y offset given a new offset.\n         */\n        updateOffsetY(offset) {\n            // scroller is missing on empty table\n            if (!this.scroller) {\n                return;\n            }\n            if (this.scrollbarV && this.virtualization && offset) {\n                // First get the row Index that we need to move to.\n                const rowIndex = this.pageSize * offset;\n                offset = this.rowHeightsCache.query(rowIndex - 1);\n            }\n            else if (this.scrollbarV && !this.virtualization) {\n                offset = 0;\n            }\n            this.scroller.setOffset(offset || 0);\n        }\n        /**\n         * Body was scrolled, this is mainly useful for\n         * when a user is server-side pagination via virtual scroll.\n         */\n        onBodyScroll(event) {\n            const scrollYPos = event.scrollYPos;\n            const scrollXPos = event.scrollXPos;\n            // if scroll change, trigger update\n            // this is mainly used for header cell positions\n            if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {\n                this.scroll.emit({\n                    offsetY: scrollYPos,\n                    offsetX: scrollXPos\n                });\n            }\n            this.offsetY = scrollYPos;\n            this.offsetX = scrollXPos;\n            this.updateIndexes();\n            this.updatePage(event.direction);\n            this.updateRows();\n        }\n        /**\n         * Updates the page given a direction.\n         */\n        updatePage(direction) {\n            let offset = this.indexes.first / this.pageSize;\n            if (direction === 'up') {\n                offset = Math.ceil(offset);\n            }\n            else if (direction === 'down') {\n                offset = Math.floor(offset);\n            }\n            if (direction !== undefined && !isNaN(offset)) {\n                this.page.emit({ offset });\n            }\n        }\n        /**\n         * Updates the rows in the view port\n         */\n        updateRows() {\n            const { first, last } = this.indexes;\n            let rowIndex = first;\n            let idx = 0;\n            const temp = [];\n            // if grouprowsby has been specified treat row paging\n            // parameters as group paging parameters ie if limit 10 has been\n            // specified treat it as 10 groups rather than 10 rows\n            if (this.groupedRows) {\n                let maxRowsPerGroup = 3;\n                // if there is only one group set the maximum number of\n                // rows per group the same as the total number of rows\n                if (this.groupedRows.length === 1) {\n                    maxRowsPerGroup = this.groupedRows[0].value.length;\n                }\n                while (rowIndex < last && rowIndex < this.groupedRows.length) {\n                    // Add the groups into this page\n                    const group = this.groupedRows[rowIndex];\n                    this.rowIndexes.set(group, rowIndex);\n                    if (group.value) {\n                        // add indexes for each group item\n                        group.value.forEach((g, i) => {\n                            const _idx = `${rowIndex}-${i}`;\n                            this.rowIndexes.set(g, _idx);\n                        });\n                    }\n                    temp[idx] = group;\n                    idx++;\n                    // Group index in this context\n                    rowIndex++;\n                }\n            }\n            else {\n                while (rowIndex < last && rowIndex < this.rowCount) {\n                    const row = this.rows[rowIndex];\n                    if (row) {\n                        // add indexes for each row\n                        this.rowIndexes.set(row, rowIndex);\n                        temp[idx] = row;\n                    }\n                    idx++;\n                    rowIndex++;\n                }\n            }\n            this.temp = temp;\n        }\n        /**\n         * Get the row height\n         */\n        getRowHeight(row) {\n            // if its a function return it\n            if (typeof this.rowHeight === 'function') {\n                return this.rowHeight(row);\n            }\n            return this.rowHeight;\n        }\n        /**\n         * @param group the group with all rows\n         */\n        getGroupHeight(group) {\n            let rowHeight = 0;\n            if (group.value) {\n                for (let index = 0; index < group.value.length; index++) {\n                    rowHeight += this.getRowAndDetailHeight(group.value[index]);\n                }\n            }\n            return rowHeight;\n        }\n        /**\n         * Calculate row height based on the expanded state of the row.\n         */\n        getRowAndDetailHeight(row) {\n            let rowHeight = this.getRowHeight(row);\n            const expanded = this.getRowExpanded(row);\n            // Adding detail row height if its expanded.\n            if (expanded) {\n                rowHeight += this.getDetailRowHeight(row);\n            }\n            return rowHeight;\n        }\n        /**\n         * Calculates the styles for the row so that the rows can be moved in 2D space\n         * during virtual scroll inside the DOM.   In the below case the Y position is\n         * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\n         * 100 px then following styles are generated:\n         *\n         * transform: translate3d(0px, 0px, 0px);    ->  row0\n         * transform: translate3d(0px, 30px, 0px);   ->  row1\n         * transform: translate3d(0px, 130px, 0px);  ->  row2\n         *\n         * Row heights have to be calculated based on the row heights cache as we wont\n         * be able to determine which row is of what height before hand.  In the above\n         * case the positionY of the translate3d for row2 would be the sum of all the\n         * heights of the rows before it (i.e. row0 and row1).\n         *\n         * @param rows the row that needs to be placed in the 2D space.\n         * @returns the CSS3 style to be applied\n         *\n         * @memberOf DataTableBodyComponent\n         */\n        getRowsStyles(rows) {\n            const styles = {};\n            // only add styles for the group if there is a group\n            if (this.groupedRows) {\n                styles.width = this.columnGroupWidths.total;\n            }\n            if (this.scrollbarV && this.virtualization) {\n                let idx = 0;\n                if (this.groupedRows) {\n                    // Get the latest row rowindex in a group\n                    const row = rows[rows.length - 1];\n                    idx = row ? this.getRowIndex(row) : 0;\n                }\n                else {\n                    idx = this.getRowIndex(rows);\n                }\n                // const pos = idx * rowHeight;\n                // The position of this row would be the sum of all row heights\n                // until the previous row position.\n                const pos = this.rowHeightsCache.query(idx - 1);\n                translateXY(styles, 0, pos);\n            }\n            return styles;\n        }\n        /**\n         * Calculate bottom summary row offset for scrollbar mode.\n         * For more information about cache and offset calculation\n         * see description for `getRowsStyles` method\n         *\n         * @returns the CSS3 style to be applied\n         *\n         * @memberOf DataTableBodyComponent\n         */\n        getBottomSummaryRowStyles() {\n            if (!this.scrollbarV || !this.rows || !this.rows.length) {\n                return null;\n            }\n            const styles = { position: 'absolute' };\n            const pos = this.rowHeightsCache.query(this.rows.length - 1);\n            translateXY(styles, 0, pos);\n            return styles;\n        }\n        /**\n         * Hides the loading indicator\n         */\n        hideIndicator() {\n            setTimeout(() => (this.loadingIndicator = false), 500);\n        }\n        /**\n         * Updates the index of the rows in the viewport\n         */\n        updateIndexes() {\n            let first = 0;\n            let last = 0;\n            if (this.scrollbarV) {\n                if (this.virtualization) {\n                    // Calculation of the first and last indexes will be based on where the\n                    // scrollY position would be at.  The last index would be the one\n                    // that shows up inside the view port the last.\n                    const height = parseInt(this.bodyHeight, 0);\n                    first = this.rowHeightsCache.getRowIndex(this.offsetY);\n                    last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;\n                }\n                else {\n                    // If virtual rows are not needed\n                    // We render all in one go\n                    first = 0;\n                    last = this.rowCount;\n                }\n            }\n            else {\n                // The server is handling paging and will pass an array that begins with the\n                // element at a specified offset.  first should always be 0 with external paging.\n                if (!this.externalPaging) {\n                    first = Math.max(this.offset * this.pageSize, 0);\n                }\n                last = Math.min(first + this.pageSize, this.rowCount);\n            }\n            this.indexes = { first, last };\n        }\n        /**\n         * Refreshes the full Row Height cache.  Should be used\n         * when the entire row array state has changed.\n         */\n        refreshRowHeightCache() {\n            if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) {\n                return;\n            }\n            // clear the previous row height cache if already present.\n            // this is useful during sorts, filters where the state of the\n            // rows array is changed.\n            this.rowHeightsCache.clearCache();\n            // Initialize the tree only if there are rows inside the tree.\n            if (this.rows && this.rows.length) {\n                const rowExpansions = new Set();\n                for (const row of this.rows) {\n                    if (this.getRowExpanded(row)) {\n                        rowExpansions.add(row);\n                    }\n                }\n                this.rowHeightsCache.initCache({\n                    rows: this.rows,\n                    rowHeight: this.rowHeight,\n                    detailRowHeight: this.getDetailRowHeight,\n                    externalVirtual: this.scrollbarV && this.externalPaging,\n                    rowCount: this.rowCount,\n                    rowIndexes: this.rowIndexes,\n                    rowExpansions\n                });\n            }\n        }\n        /**\n         * Gets the index for the view port\n         */\n        getAdjustedViewPortIndex() {\n            // Capture the row index of the first row that is visible on the viewport.\n            // If the scroll bar is just below the row which is highlighted then make that as the\n            // first index.\n            const viewPortFirstRowIndex = this.indexes.first;\n            if (this.scrollbarV && this.virtualization) {\n                const offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);\n                return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;\n            }\n            return viewPortFirstRowIndex;\n        }\n        /**\n         * Toggle the Expansion of the row i.e. if the row is expanded then it will\n         * collapse and vice versa.   Note that the expanded status is stored as\n         * a part of the row object itself as we have to preserve the expanded row\n         * status in case of sorting and filtering of the row set.\n         */\n        toggleRowExpansion(row) {\n            // Capture the row index of the first row that is visible on the viewport.\n            const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n            const rowExpandedIdx = this.getRowExpandedIdx(row, this.rowExpansions);\n            const expanded = rowExpandedIdx > -1;\n            // If the detailRowHeight is auto --> only in case of non-virtualized scroll\n            if (this.scrollbarV && this.virtualization) {\n                const detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1);\n                // const idx = this.rowIndexes.get(row) || 0;\n                const idx = this.getRowIndex(row);\n                this.rowHeightsCache.update(idx, detailRowHeight);\n            }\n            // Update the toggled row and update thive nevere heights in the cache.\n            if (expanded) {\n                this.rowExpansions.splice(rowExpandedIdx, 1);\n            }\n            else {\n                this.rowExpansions.push(row);\n            }\n            this.detailToggle.emit({\n                rows: [row],\n                currentIndex: viewPortFirstRowIndex\n            });\n        }\n        /**\n         * Expand/Collapse all the rows no matter what their state is.\n         */\n        toggleAllRows(expanded) {\n            // clear prev expansions\n            this.rowExpansions = [];\n            // Capture the row index of the first row that is visible on the viewport.\n            const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n            if (expanded) {\n                for (const row of this.rows) {\n                    this.rowExpansions.push(row);\n                }\n            }\n            if (this.scrollbarV) {\n                // Refresh the full row heights cache since every row was affected.\n                this.recalcLayout();\n            }\n            // Emit all rows that have been expanded.\n            this.detailToggle.emit({\n                rows: this.rows,\n                currentIndex: viewPortFirstRowIndex\n            });\n        }\n        /**\n         * Recalculates the table\n         */\n        recalcLayout() {\n            this.refreshRowHeightCache();\n            this.updateIndexes();\n            this.updateRows();\n        }\n        /**\n         * Tracks the column\n         */\n        columnTrackingFn(index, column) {\n            return column.$$id;\n        }\n        /**\n         * Gets the row pinning group styles\n         */\n        stylesByGroup(group) {\n            const widths = this.columnGroupWidths;\n            const offsetX = this.offsetX;\n            const styles = {\n                width: `${widths[group]}px`\n            };\n            if (group === 'left') {\n                translateXY(styles, offsetX, 0);\n            }\n            else if (group === 'right') {\n                const bodyWidth = parseInt(this.innerWidth + '', 0);\n                const totalDiff = widths.total - bodyWidth;\n                const offsetDiff = totalDiff - offsetX;\n                const offset = offsetDiff * -1;\n                translateXY(styles, offset, 0);\n            }\n            return styles;\n        }\n        /**\n         * Returns if the row was expanded and set default row expansion when row expansion is empty\n         */\n        getRowExpanded(row) {\n            if (this.rowExpansions.length === 0 && this.groupExpansionDefault) {\n                for (const group of this.groupedRows) {\n                    this.rowExpansions.push(group);\n                }\n            }\n            return this.getRowExpandedIdx(row, this.rowExpansions) > -1;\n        }\n        getRowExpandedIdx(row, expanded) {\n            if (!expanded || !expanded.length)\n                return -1;\n            const rowId = this.rowIdentity(row);\n            return expanded.findIndex(r => {\n                const id = this.rowIdentity(r);\n                return id === rowId;\n            });\n        }\n        /**\n         * Gets the row index given a row\n         */\n        getRowIndex(row) {\n            return this.rowIndexes.get(row) || 0;\n        }\n        onTreeAction(row) {\n            this.treeAction.emit({ row });\n        }\n    }\n    DataTableBodyComponent.ɵfac = function DataTableBodyComponent_Factory(t) { return new (t || DataTableBodyComponent)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"i\" /* ChangeDetectorRef */])); };\n    DataTableBodyComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: DataTableBodyComponent, selectors: [[\"datatable-body\"]], viewQuery: function DataTableBodyComponent_Query(rf, ctx) {\n            if (rf & 1) {\n                core[\"Zc\" /* ɵɵviewQuery */](swimlane_ngx_datatable_ScrollerComponent, 1);\n            }\n            if (rf & 2) {\n                let _t;\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.scroller = _t.first);\n            }\n        }, hostAttrs: [1, \"datatable-body\"], hostVars: 4, hostBindings: function DataTableBodyComponent_HostBindings(rf, ctx) {\n            if (rf & 2) {\n                core[\"Qc\" /* ɵɵstyleProp */](\"width\", ctx.bodyWidth)(\"height\", ctx.bodyHeight);\n            }\n        }, inputs: { selected: \"selected\", pageSize: \"pageSize\", rows: \"rows\", columns: \"columns\", offset: \"offset\", rowCount: \"rowCount\", bodyHeight: \"bodyHeight\", offsetX: \"offsetX\", loadingIndicator: \"loadingIndicator\", scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", externalPaging: \"externalPaging\", rowHeight: \"rowHeight\", emptyMessage: \"emptyMessage\", selectionType: \"selectionType\", rowIdentity: \"rowIdentity\", rowDetail: \"rowDetail\", groupHeader: \"groupHeader\", selectCheck: \"selectCheck\", displayCheck: \"displayCheck\", trackByProp: \"trackByProp\", rowClass: \"rowClass\", groupedRows: \"groupedRows\", groupExpansionDefault: \"groupExpansionDefault\", innerWidth: \"innerWidth\", groupRowsBy: \"groupRowsBy\", virtualization: \"virtualization\", summaryRow: \"summaryRow\", summaryPosition: \"summaryPosition\", summaryHeight: \"summaryHeight\" }, outputs: { scroll: \"scroll\", page: \"page\", activate: \"activate\", select: \"select\", detailToggle: \"detailToggle\", rowContextmenu: \"rowContextmenu\", treeAction: \"treeAction\" }, decls: 5, vars: 9, consts: [[4, \"ngIf\"], [3, \"selected\", \"rows\", \"selectCheck\", \"selectEnabled\", \"selectionType\", \"rowIdentity\", \"select\", \"activate\"], [\"selector\", \"\"], [3, \"scrollbarV\", \"scrollbarH\", \"scrollHeight\", \"scrollWidth\", \"scroll\", 4, \"ngIf\"], [\"class\", \"empty-row\", 3, \"innerHTML\", 4, \"ngIf\"], [3, \"scrollbarV\", \"scrollbarH\", \"scrollHeight\", \"scrollWidth\", \"scroll\"], [3, \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\", 4, \"ngIf\"], [3, \"groupedRows\", \"innerWidth\", \"ngStyle\", \"rowDetail\", \"groupHeader\", \"offsetX\", \"detailRowHeight\", \"row\", \"expanded\", \"rowIndex\", \"rowContextmenu\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"ngStyle\", \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\", 4, \"ngIf\"], [3, \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\"], [3, \"groupedRows\", \"innerWidth\", \"ngStyle\", \"rowDetail\", \"groupHeader\", \"offsetX\", \"detailRowHeight\", \"row\", \"expanded\", \"rowIndex\", \"rowContextmenu\"], [\"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\", \"expanded\", \"rowClass\", \"displayCheck\", \"treeStatus\", \"treeAction\", \"activate\", 4, \"ngIf\", \"ngIfElse\"], [\"groupedRowsTemplate\", \"\"], [\"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\", \"expanded\", \"rowClass\", \"displayCheck\", \"treeStatus\", \"treeAction\", \"activate\"], [\"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"group\", \"rowIndex\", \"expanded\", \"rowClass\", \"activate\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"tabindex\", \"-1\", 3, \"isSelected\", \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"group\", \"rowIndex\", \"expanded\", \"rowClass\", \"activate\"], [3, \"ngStyle\", \"rowHeight\", \"offsetX\", \"innerWidth\", \"rows\", \"columns\"], [1, \"empty-row\", 3, \"innerHTML\"]], template: function DataTableBodyComponent_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"Sc\" /* ɵɵtemplate */](0, DataTableBodyComponent_datatable_progress_0_Template, 1, 0, \"datatable-progress\", 0);\n                core[\"cc\" /* ɵɵelementStart */](1, \"datatable-selection\", 1, 2);\n                core[\"mc\" /* ɵɵlistener */](\"select\", function DataTableBodyComponent_Template_datatable_selection_select_1_listener($event) { return ctx.select.emit($event); })(\"activate\", function DataTableBodyComponent_Template_datatable_selection_activate_1_listener($event) { return ctx.activate.emit($event); });\n                core[\"Sc\" /* ɵɵtemplate */](3, DataTableBodyComponent_datatable_scroller_3_Template, 4, 8, \"datatable-scroller\", 3);\n                core[\"Sc\" /* ɵɵtemplate */](4, DataTableBodyComponent_div_4_Template, 1, 1, \"div\", 4);\n                core[\"bc\" /* ɵɵelementEnd */]();\n            }\n            if (rf & 2) {\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.loadingIndicator);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"selected\", ctx.selected)(\"rows\", ctx.rows)(\"selectCheck\", ctx.selectCheck)(\"selectEnabled\", ctx.selectEnabled)(\"selectionType\", ctx.selectionType)(\"rowIdentity\", ctx.rowIdentity);\n                core[\"Ib\" /* ɵɵadvance */](2);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.rows == null ? null : ctx.rows.length);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", !(ctx.rows == null ? null : ctx.rows.length) && !ctx.loadingIndicator);\n            }\n        }, directives: function () { return [common[\"n\" /* NgIf */], swimlane_ngx_datatable_DataTableSelectionComponent, swimlane_ngx_datatable_ProgressBarComponent, swimlane_ngx_datatable_ScrollerComponent, common[\"m\" /* NgForOf */], swimlane_ngx_datatable_DataTableSummaryRowComponent, swimlane_ngx_datatable_DataTableRowWrapperComponent, common[\"o\" /* NgStyle */], swimlane_ngx_datatable_DataTableBodyRowComponent]; }, encapsulation: 2, changeDetection: 0 });\n    return DataTableBodyComponent;\n})();\nlet swimlane_ngx_datatable_DataTableHeaderComponent = /*@__PURE__*/ (() => {\n    class DataTableHeaderComponent {\n        constructor(cd) {\n            this.cd = cd;\n            this.sort = new core[\"p\" /* EventEmitter */]();\n            this.reorder = new core[\"p\" /* EventEmitter */]();\n            this.resize = new core[\"p\" /* EventEmitter */]();\n            this.select = new core[\"p\" /* EventEmitter */]();\n            this.columnContextmenu = new core[\"p\" /* EventEmitter */](false);\n            this._columnGroupWidths = {\n                total: 100\n            };\n            this._styleByGroup = {\n                left: {},\n                center: {},\n                right: {}\n            };\n            this.destroyed = false;\n        }\n        set innerWidth(val) {\n            this._innerWidth = val;\n            setTimeout(() => {\n                if (this._columns) {\n                    const colByPin = columnsByPin(this._columns);\n                    this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n                    this.setStylesByGroup();\n                }\n            });\n        }\n        get innerWidth() {\n            return this._innerWidth;\n        }\n        set headerHeight(val) {\n            if (val !== 'auto') {\n                this._headerHeight = `${val}px`;\n            }\n            else {\n                this._headerHeight = val;\n            }\n        }\n        get headerHeight() {\n            return this._headerHeight;\n        }\n        set columns(val) {\n            this._columns = val;\n            const colsByPin = columnsByPin(val);\n            this._columnsByPin = columnsByPinArr(val);\n            setTimeout(() => {\n                this._columnGroupWidths = columnGroupWidths(colsByPin, val);\n                this.setStylesByGroup();\n            });\n        }\n        get columns() {\n            return this._columns;\n        }\n        set offsetX(val) {\n            this._offsetX = val;\n            this.setStylesByGroup();\n        }\n        get offsetX() {\n            return this._offsetX;\n        }\n        ngOnDestroy() {\n            this.destroyed = true;\n        }\n        onLongPressStart({ event, model }) {\n            model.dragging = true;\n            this.dragEventTarget = event;\n        }\n        onLongPressEnd({ event, model }) {\n            this.dragEventTarget = event;\n            // delay resetting so sort can be\n            // prevented if we were dragging\n            setTimeout(() => {\n                // datatable component creates copies from columns on reorder\n                // set dragging to false on new objects\n                const column = this._columns.find(c => c.$$id === model.$$id);\n                if (column) {\n                    column.dragging = false;\n                }\n            }, 5);\n        }\n        get headerWidth() {\n            if (this.scrollbarH) {\n                return this.innerWidth + 'px';\n            }\n            return '100%';\n        }\n        trackByGroups(index, colGroup) {\n            return colGroup.type;\n        }\n        columnTrackingFn(index, column) {\n            return column.$$id;\n        }\n        onColumnResized(width, column) {\n            if (width <= column.minWidth) {\n                width = column.minWidth;\n            }\n            else if (width >= column.maxWidth) {\n                width = column.maxWidth;\n            }\n            this.resize.emit({\n                column,\n                prevValue: column.width,\n                newValue: width\n            });\n        }\n        onColumnReordered({ prevIndex, newIndex, model }) {\n            const column = this.getColumn(newIndex);\n            column.isTarget = false;\n            column.targetMarkerContext = undefined;\n            this.reorder.emit({\n                column: model,\n                prevValue: prevIndex,\n                newValue: newIndex\n            });\n        }\n        onTargetChanged({ prevIndex, newIndex, initialIndex }) {\n            if (prevIndex || prevIndex === 0) {\n                const oldColumn = this.getColumn(prevIndex);\n                oldColumn.isTarget = false;\n                oldColumn.targetMarkerContext = undefined;\n            }\n            if (newIndex || newIndex === 0) {\n                const newColumn = this.getColumn(newIndex);\n                newColumn.isTarget = true;\n                if (initialIndex !== newIndex) {\n                    newColumn.targetMarkerContext = {\n                        class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')\n                    };\n                }\n            }\n        }\n        getColumn(index) {\n            const leftColumnCount = this._columnsByPin[0].columns.length;\n            if (index < leftColumnCount) {\n                return this._columnsByPin[0].columns[index];\n            }\n            const centerColumnCount = this._columnsByPin[1].columns.length;\n            if (index < leftColumnCount + centerColumnCount) {\n                return this._columnsByPin[1].columns[index - leftColumnCount];\n            }\n            return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];\n        }\n        onSort({ column, prevValue, newValue }) {\n            // if we are dragging don't sort!\n            if (column.dragging) {\n                return;\n            }\n            const sorts = this.calcNewSorts(column, prevValue, newValue);\n            this.sort.emit({\n                sorts,\n                column,\n                prevValue,\n                newValue\n            });\n        }\n        calcNewSorts(column, prevValue, newValue) {\n            let idx = 0;\n            if (!this.sorts) {\n                this.sorts = [];\n            }\n            const sorts = this.sorts.map((s, i) => {\n                s = Object.assign({}, s);\n                if (s.prop === column.prop) {\n                    idx = i;\n                }\n                return s;\n            });\n            if (newValue === undefined) {\n                sorts.splice(idx, 1);\n            }\n            else if (prevValue) {\n                sorts[idx].dir = newValue;\n            }\n            else {\n                if (this.sortType === SortType.single) {\n                    sorts.splice(0, this.sorts.length);\n                }\n                sorts.push({ dir: newValue, prop: column.prop });\n            }\n            return sorts;\n        }\n        setStylesByGroup() {\n            this._styleByGroup.left = this.calcStylesByGroup('left');\n            this._styleByGroup.center = this.calcStylesByGroup('center');\n            this._styleByGroup.right = this.calcStylesByGroup('right');\n            if (!this.destroyed) {\n                this.cd.detectChanges();\n            }\n        }\n        calcStylesByGroup(group) {\n            const widths = this._columnGroupWidths;\n            const offsetX = this.offsetX;\n            const styles = {\n                width: `${widths[group]}px`\n            };\n            if (group === 'center') {\n                translateXY(styles, offsetX * -1, 0);\n            }\n            else if (group === 'right') {\n                const totalDiff = widths.total - this.innerWidth;\n                const offset = totalDiff * -1;\n                translateXY(styles, offset, 0);\n            }\n            return styles;\n        }\n    }\n    DataTableHeaderComponent.ɵfac = function DataTableHeaderComponent_Factory(t) { return new (t || DataTableHeaderComponent)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"i\" /* ChangeDetectorRef */])); };\n    DataTableHeaderComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: DataTableHeaderComponent, selectors: [[\"datatable-header\"]], hostAttrs: [1, \"datatable-header\"], hostVars: 4, hostBindings: function DataTableHeaderComponent_HostBindings(rf, ctx) {\n            if (rf & 2) {\n                core[\"Qc\" /* ɵɵstyleProp */](\"height\", ctx.headerHeight)(\"width\", ctx.headerWidth);\n            }\n        }, inputs: { innerWidth: \"innerWidth\", headerHeight: \"headerHeight\", columns: \"columns\", offsetX: \"offsetX\", sorts: \"sorts\", sortAscendingIcon: \"sortAscendingIcon\", sortDescendingIcon: \"sortDescendingIcon\", sortUnsetIcon: \"sortUnsetIcon\", scrollbarH: \"scrollbarH\", dealsWithGroup: \"dealsWithGroup\", targetMarkerTemplate: \"targetMarkerTemplate\", sortType: \"sortType\", allRowsSelected: \"allRowsSelected\", selectionType: \"selectionType\", reorderable: \"reorderable\" }, outputs: { sort: \"sort\", reorder: \"reorder\", resize: \"resize\", select: \"select\", columnContextmenu: \"columnContextmenu\" }, decls: 2, vars: 4, consts: [[\"orderable\", \"\", 1, \"datatable-header-inner\", 3, \"reorder\", \"targetChanged\"], [3, \"class\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"ngStyle\"], [\"resizeable\", \"\", \"long-press\", \"\", \"draggable\", \"\", 3, \"resizeEnabled\", \"pressModel\", \"pressEnabled\", \"dragX\", \"dragY\", \"dragModel\", \"dragEventTarget\", \"headerHeight\", \"isTarget\", \"targetMarkerTemplate\", \"targetMarkerContext\", \"column\", \"sortType\", \"sorts\", \"selectionType\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"sortUnsetIcon\", \"allRowsSelected\", \"resize\", \"longPressStart\", \"longPressEnd\", \"sort\", \"select\", \"columnContextmenu\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"resizeable\", \"\", \"long-press\", \"\", \"draggable\", \"\", 3, \"resizeEnabled\", \"pressModel\", \"pressEnabled\", \"dragX\", \"dragY\", \"dragModel\", \"dragEventTarget\", \"headerHeight\", \"isTarget\", \"targetMarkerTemplate\", \"targetMarkerContext\", \"column\", \"sortType\", \"sorts\", \"selectionType\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"sortUnsetIcon\", \"allRowsSelected\", \"resize\", \"longPressStart\", \"longPressEnd\", \"sort\", \"select\", \"columnContextmenu\"]], template: function DataTableHeaderComponent_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"cc\" /* ɵɵelementStart */](0, \"div\", 0);\n                core[\"mc\" /* ɵɵlistener */](\"reorder\", function DataTableHeaderComponent_Template_div_reorder_0_listener($event) { return ctx.onColumnReordered($event); })(\"targetChanged\", function DataTableHeaderComponent_Template_div_targetChanged_0_listener($event) { return ctx.onTargetChanged($event); });\n                core[\"Sc\" /* ɵɵtemplate */](1, DataTableHeaderComponent_div_1_Template, 2, 5, \"div\", 1);\n                core[\"bc\" /* ɵɵelementEnd */]();\n            }\n            if (rf & 2) {\n                core[\"Qc\" /* ɵɵstyleProp */](\"width\", ctx._columnGroupWidths.total, \"px\");\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngForOf\", ctx._columnsByPin)(\"ngForTrackBy\", ctx.trackByGroups);\n            }\n        }, directives: function () { return [swimlane_ngx_datatable_OrderableDirective, common[\"m\" /* NgForOf */], common[\"o\" /* NgStyle */], swimlane_ngx_datatable_DataTableHeaderCellComponent, swimlane_ngx_datatable_ResizeableDirective, swimlane_ngx_datatable_LongPressDirective, swimlane_ngx_datatable_DraggableDirective]; }, encapsulation: 2, changeDetection: 0 });\n    return DataTableHeaderComponent;\n})();\n/**\n * Throttle a function\n */\nfunction throttle(func, wait, options) {\n    options = options || {};\n    let context;\n    let args;\n    let result;\n    let timeout = null;\n    let previous = 0;\n    function later() {\n        previous = options.leading === false ? 0 : +new Date();\n        timeout = null;\n        result = func.apply(context, args);\n    }\n    return function () {\n        const now = +new Date();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        const remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nfunction throttleable(duration, options) {\n    return function innerDecorator(target, key, descriptor) {\n        return {\n            configurable: true,\n            enumerable: descriptor.enumerable,\n            get: function getter() {\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor.enumerable,\n                    value: throttle(descriptor.value, duration, options)\n                });\n                return this[key];\n            }\n        };\n    };\n}\n/**\n * Calculates the Total Flex Grow\n */\nfunction getTotalFlexGrow(columns) {\n    let totalFlexGrow = 0;\n    for (const c of columns) {\n        totalFlexGrow += c.flexGrow || 0;\n    }\n    return totalFlexGrow;\n}\n/**\n * Adjusts the column widths.\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\n */\nfunction adjustColumnWidths(allColumns, expectedWidth) {\n    const columnsWidth = columnsTotalWidth(allColumns);\n    const totalFlexGrow = getTotalFlexGrow(allColumns);\n    const colsByGroup = columnsByPin(allColumns);\n    if (columnsWidth !== expectedWidth) {\n        scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\n    }\n}\n/**\n * Resizes columns based on the flexGrow property, while respecting manually set widths\n */\nfunction scaleColumns(colsByGroup, maxWidth, totalFlexGrow) {\n    // calculate total width and flexgrow points for coulumns that can be resized\n    for (const attr in colsByGroup) {\n        for (const column of colsByGroup[attr]) {\n            if (!column.canAutoResize) {\n                maxWidth -= column.width;\n                totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;\n            }\n            else {\n                column.width = 0;\n            }\n        }\n    }\n    const hasMinWidth = {};\n    let remainingWidth = maxWidth;\n    // resize columns until no width is left to be distributed\n    do {\n        const widthPerFlexPoint = remainingWidth / totalFlexGrow;\n        remainingWidth = 0;\n        for (const attr in colsByGroup) {\n            for (const column of colsByGroup[attr]) {\n                // if the column can be resize and it hasn't reached its minimum width yet\n                if (column.canAutoResize && !hasMinWidth[column.prop]) {\n                    const newWidth = column.width + column.flexGrow * widthPerFlexPoint;\n                    if (column.minWidth !== undefined && newWidth < column.minWidth) {\n                        remainingWidth += newWidth - column.minWidth;\n                        column.width = column.minWidth;\n                        hasMinWidth[column.prop] = true;\n                    }\n                    else {\n                        column.width = newWidth;\n                    }\n                }\n            }\n        }\n    } while (remainingWidth !== 0);\n}\n/**\n * Forces the width of the columns to\n * distribute equally but overflowing when necessary\n *\n * Rules:\n *\n *  - If combined withs are less than the total width of the grid,\n *    proportion the widths given the min / max / normal widths to fill the width.\n *\n *  - If the combined widths, exceed the total width of the grid,\n *    use the standard widths.\n *\n *  - If a column is resized, it should always use that width\n *\n *  - The proportional widths should never fall below min size if specified.\n *\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\n *    the width should use the original width; not the newly proportioned widths.\n */\nfunction forceFillColumnWidths(allColumns, expectedWidth, startIdx, allowBleed, defaultColWidth = 300) {\n    const columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter(c => {\n        return c.canAutoResize !== false;\n    });\n    for (const column of columnsToResize) {\n        if (!column.$$oldWidth) {\n            column.$$oldWidth = column.width;\n        }\n    }\n    let additionWidthPerColumn = 0;\n    let exceedsWindow = false;\n    let contentWidth = getContentWidth(allColumns, defaultColWidth);\n    let remainingWidth = expectedWidth - contentWidth;\n    const columnsProcessed = [];\n    const remainingWidthLimit = 1; // when to stop\n    // This loop takes care of the\n    do {\n        additionWidthPerColumn = remainingWidth / columnsToResize.length;\n        exceedsWindow = contentWidth >= expectedWidth;\n        for (const column of columnsToResize) {\n            if (exceedsWindow && allowBleed) {\n                column.width = column.$$oldWidth || column.width || defaultColWidth;\n            }\n            else {\n                const newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\n                if (column.minWidth && newSize < column.minWidth) {\n                    column.width = column.minWidth;\n                    columnsProcessed.push(column);\n                }\n                else if (column.maxWidth && newSize > column.maxWidth) {\n                    column.width = column.maxWidth;\n                    columnsProcessed.push(column);\n                }\n                else {\n                    column.width = newSize;\n                }\n            }\n            column.width = Math.max(0, column.width);\n        }\n        contentWidth = getContentWidth(allColumns);\n        remainingWidth = expectedWidth - contentWidth;\n        removeProcessedColumns(columnsToResize, columnsProcessed);\n    } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);\n}\n/**\n * Remove the processed columns from the current active columns.\n */\nfunction removeProcessedColumns(columnsToResize, columnsProcessed) {\n    for (const column of columnsProcessed) {\n        const index = columnsToResize.indexOf(column);\n        columnsToResize.splice(index, 1);\n    }\n}\n/**\n * Gets the width of the columns\n */\nfunction getContentWidth(allColumns, defaultColWidth = 300) {\n    let contentWidth = 0;\n    for (const column of allColumns) {\n        contentWidth += column.width || defaultColWidth;\n    }\n    return contentWidth;\n}\nvar SortDirection = /*@__PURE__*/ (function (SortDirection) {\n    SortDirection[\"asc\"] = \"asc\";\n    SortDirection[\"desc\"] = \"desc\";\n    return SortDirection;\n})({});\n/**\n * Gets the next sort direction\n */\nfunction nextSortDir(sortType, current) {\n    if (sortType === SortType.single) {\n        if (current === SortDirection.asc) {\n            return SortDirection.desc;\n        }\n        else {\n            return SortDirection.asc;\n        }\n    }\n    else {\n        if (!current) {\n            return SortDirection.asc;\n        }\n        else if (current === SortDirection.asc) {\n            return SortDirection.desc;\n        }\n        else if (current === SortDirection.desc) {\n            return undefined;\n        }\n        // avoid TS7030: Not all code paths return a value.\n        return undefined;\n    }\n}\n/**\n * Adapted from fueld-ui on 6/216\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\n */\nfunction orderByComparator(a, b) {\n    if (a === null || typeof a === 'undefined')\n        a = 0;\n    if (b === null || typeof b === 'undefined')\n        b = 0;\n    if (a instanceof Date && b instanceof Date) {\n        if (a < b)\n            return -1;\n        if (a > b)\n            return 1;\n    }\n    else if (isNaN(parseFloat(a)) || !isFinite(a) || isNaN(parseFloat(b)) || !isFinite(b)) {\n        // Convert to string in case of a=0 or b=0\n        a = String(a);\n        b = String(b);\n        // Isn't a number so lowercase the string to properly compare\n        if (a.toLowerCase() < b.toLowerCase())\n            return -1;\n        if (a.toLowerCase() > b.toLowerCase())\n            return 1;\n    }\n    else {\n        // Parse strings as numbers to compare properly\n        if (parseFloat(a) < parseFloat(b))\n            return -1;\n        if (parseFloat(a) > parseFloat(b))\n            return 1;\n    }\n    // equal each other\n    return 0;\n}\n/**\n * creates a shallow copy of the `rows` input and returns the sorted copy. this function\n * does not sort the `rows` argument in place\n */\nfunction sortRows(rows, columns, dirs) {\n    if (!rows)\n        return [];\n    if (!dirs || !dirs.length || !columns)\n        return [...rows];\n    /**\n     * record the row ordering of results from prior sort operations (if applicable)\n     * this is necessary to guarantee stable sorting behavior\n     */\n    const rowToIndexMap = new Map();\n    rows.forEach((row, index) => rowToIndexMap.set(row, index));\n    const temp = [...rows];\n    const cols = columns.reduce((obj, col) => {\n        if (col.comparator && typeof col.comparator === 'function') {\n            obj[col.prop] = col.comparator;\n        }\n        return obj;\n    }, {});\n    // cache valueGetter and compareFn so that they\n    // do not need to be looked-up in the sort function body\n    const cachedDirs = dirs.map(dir => {\n        const prop = dir.prop;\n        return {\n            prop,\n            dir: dir.dir,\n            valueGetter: getterForProp(prop),\n            compareFn: cols[prop] || orderByComparator\n        };\n    });\n    return temp.sort(function (rowA, rowB) {\n        for (const cachedDir of cachedDirs) {\n            // Get property and valuegetters for column to be sorted\n            const { prop, valueGetter } = cachedDir;\n            // Get A and B cell values from rows based on properties of the columns\n            const propA = valueGetter(rowA, prop);\n            const propB = valueGetter(rowB, prop);\n            // Compare function gets five parameters:\n            // Two cell values to be compared as propA and propB\n            // Two rows corresponding to the cells as rowA and rowB\n            // Direction of the sort for this column as SortDirection\n            // Compare can be a standard JS comparison function (a,b) => -1|0|1\n            // as additional parameters are silently ignored. The whole row and sort\n            // direction enable more complex sort logic.\n            const comparison = cachedDir.dir !== SortDirection.desc\n                ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir)\n                : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir);\n            // Don't return 0 yet in case of needing to sort by next property\n            if (comparison !== 0)\n                return comparison;\n        }\n        if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB)))\n            return 0;\n        /**\n         * all else being equal, preserve original order of the rows (stable sort)\n         */\n        return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;\n    });\n}\nlet swimlane_ngx_datatable_DatatableComponent = /*@__PURE__*/ (() => {\n    class DatatableComponent {\n        constructor(scrollbarHelper, dimensionsHelper, cd, element, differs, columnChangesService, configuration) {\n            this.scrollbarHelper = scrollbarHelper;\n            this.dimensionsHelper = dimensionsHelper;\n            this.cd = cd;\n            this.columnChangesService = columnChangesService;\n            this.configuration = configuration;\n            /**\n             * List of row objects that should be\n             * represented as selected in the grid.\n             * Default value: `[]`\n             */\n            this.selected = [];\n            /**\n             * Enable vertical scrollbars\n             */\n            this.scrollbarV = false;\n            /**\n             * Enable horz scrollbars\n             */\n            this.scrollbarH = false;\n            /**\n             * The row height; which is necessary\n             * to calculate the height for the lazy rendering.\n             */\n            this.rowHeight = 30;\n            /**\n             * Type of column width distribution formula.\n             * Example: flex, force, standard\n             */\n            this.columnMode = ColumnMode.standard;\n            /**\n             * The minimum header height in pixels.\n             * Pass a falsey for no header\n             */\n            this.headerHeight = 30;\n            /**\n             * The minimum footer height in pixels.\n             * Pass falsey for no footer\n             */\n            this.footerHeight = 0;\n            /**\n             * If the table should use external paging\n             * otherwise its assumed that all data is preloaded.\n             */\n            this.externalPaging = false;\n            /**\n             * If the table should use external sorting or\n             * the built-in basic sorting.\n             */\n            this.externalSorting = false;\n            /**\n             * Show the linear loading bar.\n             * Default value: `false`\n             */\n            this.loadingIndicator = false;\n            /**\n             * Enable/Disable ability to re-order columns\n             * by dragging them.\n             */\n            this.reorderable = true;\n            /**\n             * Swap columns on re-order columns or\n             * move them.\n             */\n            this.swapColumns = true;\n            /**\n             * The type of sorting\n             */\n            this.sortType = SortType.single;\n            /**\n             * Array of sorted columns by property and type.\n             * Default value: `[]`\n             */\n            this.sorts = [];\n            /**\n             * Css class overrides\n             */\n            this.cssClasses = {\n                sortAscending: 'datatable-icon-up',\n                sortDescending: 'datatable-icon-down',\n                sortUnset: 'datatable-icon-sort-unset',\n                pagerLeftArrow: 'datatable-icon-left',\n                pagerRightArrow: 'datatable-icon-right',\n                pagerPrevious: 'datatable-icon-prev',\n                pagerNext: 'datatable-icon-skip'\n            };\n            /**\n             * Message overrides for localization\n             *\n             * emptyMessage     [default] = 'No data to display'\n             * totalMessage     [default] = 'total'\n             * selectedMessage  [default] = 'selected'\n             */\n            this.messages = {\n                // Message to show when array is presented\n                // but contains no values\n                emptyMessage: 'No data to display',\n                // Footer total message\n                totalMessage: 'total',\n                // Footer selected message\n                selectedMessage: 'selected'\n            };\n            /**\n             * A boolean you can use to set the detault behaviour of rows and groups\n             * whether they will start expanded or not. If ommited the default is NOT expanded.\n             *\n             */\n            this.groupExpansionDefault = false;\n            /**\n             * Property to which you can use for determining select all\n             * rows on current page or not.\n             *\n             * @memberOf DatatableComponent\n             */\n            this.selectAllRowsOnPage = false;\n            /**\n             * A flag for row virtualization on / off\n             */\n            this.virtualization = true;\n            /**\n             * A flag for switching summary row on / off\n             */\n            this.summaryRow = false;\n            /**\n             * A height of summary row\n             */\n            this.summaryHeight = 30;\n            /**\n             * A property holds a summary row position: top/bottom\n             */\n            this.summaryPosition = 'top';\n            /**\n             * Body was scrolled typically in a `scrollbarV:true` scenario.\n             */\n            this.scroll = new core[\"p\" /* EventEmitter */]();\n            /**\n             * A cell or row was focused via keyboard or mouse click.\n             */\n            this.activate = new core[\"p\" /* EventEmitter */]();\n            /**\n             * A cell or row was selected.\n             */\n            this.select = new core[\"p\" /* EventEmitter */]();\n            /**\n             * Column sort was invoked.\n             */\n            this.sort = new core[\"p\" /* EventEmitter */]();\n            /**\n             * The table was paged either triggered by the pager or the body scroll.\n             */\n            this.page = new core[\"p\" /* EventEmitter */]();\n            /**\n             * Columns were re-ordered.\n             */\n            this.reorder = new core[\"p\" /* EventEmitter */]();\n            /**\n             * Column was resized.\n             */\n            this.resize = new core[\"p\" /* EventEmitter */]();\n            /**\n             * The context menu was invoked on the table.\n             * type indicates whether the header or the body was clicked.\n             * content contains either the column or the row that was clicked.\n             */\n            this.tableContextmenu = new core[\"p\" /* EventEmitter */](false);\n            /**\n             * A row was expanded ot collapsed for tree\n             */\n            this.treeAction = new core[\"p\" /* EventEmitter */]();\n            this.rowCount = 0;\n            this._offsetX = new BehaviorSubject[\"a\" /* BehaviorSubject */](0);\n            this._count = 0;\n            this._offset = 0;\n            this._subscriptions = [];\n            /**\n             * This will be used when displaying or selecting rows.\n             * when tracking/comparing them, we'll use the value of this fn,\n             *\n             * (`fn(x) === fn(y)` instead of `x === y`)\n             */\n            this.rowIdentity = (x) => {\n                if (this._groupRowsBy) {\n                    // each group in groupedRows are stored as {key, value: [rows]},\n                    // where key is the groupRowsBy index\n                    return x.key;\n                }\n                else {\n                    return x;\n                }\n            };\n            // get ref to elm for measuring\n            this.element = element.nativeElement;\n            this.rowDiffer = differs.find({}).create();\n            // apply global settings from Module.forRoot\n            if (this.configuration && this.configuration.messages) {\n                this.messages = Object.assign({}, this.configuration.messages);\n            }\n        }\n        /**\n         * Rows that are displayed in the table.\n         */\n        set rows(val) {\n            this._rows = val;\n            if (val) {\n                this._internalRows = [...val];\n            }\n            // auto sort on new updates\n            if (!this.externalSorting) {\n                this.sortInternalRows();\n            }\n            // auto group by parent on new update\n            this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n            // recalculate sizes/etc\n            this.recalculate();\n            if (this._rows && this._groupRowsBy) {\n                // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\n                this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n            }\n            this.cd.markForCheck();\n        }\n        /**\n         * Gets the rows.\n         */\n        get rows() {\n            return this._rows;\n        }\n        /**\n         * This attribute allows the user to set the name of the column to group the data with\n         */\n        set groupRowsBy(val) {\n            if (val) {\n                this._groupRowsBy = val;\n                if (this._rows && this._groupRowsBy) {\n                    // cretes a new array with the data grouped\n                    this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n                }\n            }\n        }\n        get groupRowsBy() {\n            return this._groupRowsBy;\n        }\n        /**\n         * Columns to be displayed.\n         */\n        set columns(val) {\n            if (val) {\n                this._internalColumns = [...val];\n                setColumnDefaults(this._internalColumns);\n                this.recalculateColumns();\n            }\n            this._columns = val;\n        }\n        /**\n         * Get the columns.\n         */\n        get columns() {\n            return this._columns;\n        }\n        /**\n         * The page size to be shown.\n         * Default value: `undefined`\n         */\n        set limit(val) {\n            this._limit = val;\n            // recalculate sizes/etc\n            this.recalculate();\n        }\n        /**\n         * Gets the limit.\n         */\n        get limit() {\n            return this._limit;\n        }\n        /**\n         * The total count of all rows.\n         * Default value: `0`\n         */\n        set count(val) {\n            this._count = val;\n            // recalculate sizes/etc\n            this.recalculate();\n        }\n        /**\n         * Gets the count.\n         */\n        get count() {\n            return this._count;\n        }\n        /**\n         * The current offset ( page - 1 ) shown.\n         * Default value: `0`\n         */\n        set offset(val) {\n            this._offset = val;\n        }\n        get offset() {\n            return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\n        }\n        /**\n         * CSS class applied if the header height if fixed height.\n         */\n        get isFixedHeader() {\n            const headerHeight = this.headerHeight;\n            return typeof headerHeight === 'string' ? headerHeight !== 'auto' : true;\n        }\n        /**\n         * CSS class applied to the root element if\n         * the row heights are fixed heights.\n         */\n        get isFixedRow() {\n            return this.rowHeight !== 'auto';\n        }\n        /**\n         * CSS class applied to root element if\n         * vertical scrolling is enabled.\n         */\n        get isVertScroll() {\n            return this.scrollbarV;\n        }\n        /**\n         * CSS class applied to root element if\n         * virtualization is enabled.\n         */\n        get isVirtualized() {\n            return this.virtualization;\n        }\n        /**\n         * CSS class applied to the root element\n         * if the horziontal scrolling is enabled.\n         */\n        get isHorScroll() {\n            return this.scrollbarH;\n        }\n        /**\n         * CSS class applied to root element is selectable.\n         */\n        get isSelectable() {\n            return this.selectionType !== undefined;\n        }\n        /**\n         * CSS class applied to root is checkbox selection.\n         */\n        get isCheckboxSelection() {\n            return this.selectionType === SelectionType.checkbox;\n        }\n        /**\n         * CSS class applied to root if cell selection.\n         */\n        get isCellSelection() {\n            return this.selectionType === SelectionType.cell;\n        }\n        /**\n         * CSS class applied to root if single select.\n         */\n        get isSingleSelection() {\n            return this.selectionType === SelectionType.single;\n        }\n        /**\n         * CSS class added to root element if mulit select\n         */\n        get isMultiSelection() {\n            return this.selectionType === SelectionType.multi;\n        }\n        /**\n         * CSS class added to root element if mulit click select\n         */\n        get isMultiClickSelection() {\n            return this.selectionType === SelectionType.multiClick;\n        }\n        /**\n         * Column templates gathered from `ContentChildren`\n         * if described in your markup.\n         */\n        set columnTemplates(val) {\n            this._columnTemplates = val;\n            this.translateColumns(val);\n        }\n        /**\n         * Returns the column templates.\n         */\n        get columnTemplates() {\n            return this._columnTemplates;\n        }\n        /**\n         * Returns if all rows are selected.\n         */\n        get allRowsSelected() {\n            let allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;\n            if (this.bodyComponent && this.selectAllRowsOnPage) {\n                const indexes = this.bodyComponent.indexes;\n                const rowsOnPage = indexes.last - indexes.first;\n                allRowsSelected = this.selected.length === rowsOnPage;\n            }\n            return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;\n        }\n        /**\n         * Lifecycle hook that is called after data-bound\n         * properties of a directive are initialized.\n         */\n        ngOnInit() {\n            // need to call this immediatly to size\n            // if the table is hidden the visibility\n            // listener will invoke this itself upon show\n            this.recalculate();\n        }\n        /**\n         * Lifecycle hook that is called after a component's\n         * view has been fully initialized.\n         */\n        ngAfterViewInit() {\n            if (!this.externalSorting) {\n                this.sortInternalRows();\n            }\n            // this has to be done to prevent the change detection\n            // tree from freaking out because we are readjusting\n            if (typeof requestAnimationFrame === 'undefined') {\n                return;\n            }\n            requestAnimationFrame(() => {\n                this.recalculate();\n                // emit page for virtual server-side kickoff\n                if (this.externalPaging && this.scrollbarV) {\n                    this.page.emit({\n                        count: this.count,\n                        pageSize: this.pageSize,\n                        limit: this.limit,\n                        offset: 0\n                    });\n                }\n            });\n        }\n        /**\n         * Lifecycle hook that is called after a component's\n         * content has been fully initialized.\n         */\n        ngAfterContentInit() {\n            this.columnTemplates.changes.subscribe(v => this.translateColumns(v));\n            this.listenForColumnInputChanges();\n        }\n        /**\n         * Translates the templates to the column objects\n         */\n        translateColumns(val) {\n            if (val) {\n                const arr = val.toArray();\n                if (arr.length) {\n                    this._internalColumns = translateTemplates(arr);\n                    setColumnDefaults(this._internalColumns);\n                    this.recalculateColumns();\n                    this.sortInternalRows();\n                    this.cd.markForCheck();\n                }\n            }\n        }\n        /**\n         * Creates a map with the data grouped by the user choice of grouping index\n         *\n         * @param originalArray the original array passed via parameter\n         * @param groupByIndex  the index of the column to group the data by\n         */\n        groupArrayBy(originalArray, groupBy) {\n            // create a map to hold groups with their corresponding results\n            const map = new Map();\n            let i = 0;\n            originalArray.forEach((item) => {\n                const key = item[groupBy];\n                if (!map.has(key)) {\n                    map.set(key, [item]);\n                }\n                else {\n                    map.get(key).push(item);\n                }\n                i++;\n            });\n            const addGroup = (key, value) => {\n                return { key, value };\n            };\n            // convert map back to a simple array of objects\n            return Array.from(map, x => addGroup(x[0], x[1]));\n        }\n        /*\n         * Lifecycle hook that is called when Angular dirty checks a directive.\n         */\n        ngDoCheck() {\n            if (this.rowDiffer.diff(this.rows)) {\n                if (!this.externalSorting) {\n                    this.sortInternalRows();\n                }\n                else {\n                    this._internalRows = [...this.rows];\n                }\n                // auto group by parent on new update\n                this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n                this.recalculatePages();\n                this.cd.markForCheck();\n            }\n        }\n        /**\n         * Recalc's the sizes of the grid.\n         *\n         * Updated automatically on changes to:\n         *\n         *  - Columns\n         *  - Rows\n         *  - Paging related\n         *\n         * Also can be manually invoked or upon window resize.\n         */\n        recalculate() {\n            this.recalculateDims();\n            this.recalculateColumns();\n            this.cd.markForCheck();\n        }\n        /**\n         * Window resize handler to update sizes.\n         */\n        onWindowResize() {\n            this.recalculate();\n        }\n        /**\n         * Recalulcates the column widths based on column width\n         * distribution mode and scrollbar offsets.\n         */\n        recalculateColumns(columns = this._internalColumns, forceIdx = -1, allowBleed = this.scrollbarH) {\n            if (!columns)\n                return undefined;\n            let width = this._innerWidth;\n            if (this.scrollbarV) {\n                width = width - this.scrollbarHelper.width;\n            }\n            if (this.columnMode === ColumnMode.force) {\n                forceFillColumnWidths(columns, width, forceIdx, allowBleed);\n            }\n            else if (this.columnMode === ColumnMode.flex) {\n                adjustColumnWidths(columns, width);\n            }\n            return columns;\n        }\n        /**\n         * Recalculates the dimensions of the table size.\n         * Internally calls the page size and row count calcs too.\n         *\n         */\n        recalculateDims() {\n            const dims = this.dimensionsHelper.getDimensions(this.element);\n            this._innerWidth = Math.floor(dims.width);\n            if (this.scrollbarV) {\n                let height = dims.height;\n                if (this.headerHeight)\n                    height = height - this.headerHeight;\n                if (this.footerHeight)\n                    height = height - this.footerHeight;\n                this.bodyHeight = height;\n            }\n            this.recalculatePages();\n        }\n        /**\n         * Recalculates the pages after a update.\n         */\n        recalculatePages() {\n            this.pageSize = this.calcPageSize();\n            this.rowCount = this.calcRowCount();\n        }\n        /**\n         * Body triggered a page event.\n         */\n        onBodyPage({ offset }) {\n            // Avoid pagination caming from body events like scroll when the table\n            // has no virtualization and the external paging is enable.\n            // This means, let's the developer handle pagination by my him(her) self\n            if (this.externalPaging && !this.virtualization) {\n                return;\n            }\n            this.offset = offset;\n            this.page.emit({\n                count: this.count,\n                pageSize: this.pageSize,\n                limit: this.limit,\n                offset: this.offset\n            });\n        }\n        /**\n         * The body triggered a scroll event.\n         */\n        onBodyScroll(event) {\n            this._offsetX.next(event.offsetX);\n            this.scroll.emit(event);\n            this.cd.detectChanges();\n        }\n        /**\n         * The footer triggered a page event.\n         */\n        onFooterPage(event) {\n            this.offset = event.page - 1;\n            this.bodyComponent.updateOffsetY(this.offset);\n            this.page.emit({\n                count: this.count,\n                pageSize: this.pageSize,\n                limit: this.limit,\n                offset: this.offset\n            });\n            if (this.selectAllRowsOnPage) {\n                this.selected = [];\n                this.select.emit({\n                    selected: this.selected\n                });\n            }\n        }\n        /**\n         * Recalculates the sizes of the page\n         */\n        calcPageSize(val = this.rows) {\n            // Keep the page size constant even if the row has been expanded.\n            // This is because an expanded row is still considered to be a child of\n            // the original row.  Hence calculation would use rowHeight only.\n            if (this.scrollbarV && this.virtualization) {\n                const size = Math.ceil(this.bodyHeight / this.rowHeight);\n                return Math.max(size, 0);\n            }\n            // if limit is passed, we are paging\n            if (this.limit !== undefined) {\n                return this.limit;\n            }\n            // otherwise use row length\n            if (val) {\n                return val.length;\n            }\n            // other empty :(\n            return 0;\n        }\n        /**\n         * Calculates the row count.\n         */\n        calcRowCount(val = this.rows) {\n            if (!this.externalPaging) {\n                if (!val)\n                    return 0;\n                if (this.groupedRows) {\n                    return this.groupedRows.length;\n                }\n                else if (this.treeFromRelation != null && this.treeToRelation != null) {\n                    return this._internalRows.length;\n                }\n                else {\n                    return val.length;\n                }\n            }\n            return this.count;\n        }\n        /**\n         * The header triggered a contextmenu event.\n         */\n        onColumnContextmenu({ event, column }) {\n            this.tableContextmenu.emit({ event, type: ContextmenuType.header, content: column });\n        }\n        /**\n         * The body triggered a contextmenu event.\n         */\n        onRowContextmenu({ event, row }) {\n            this.tableContextmenu.emit({ event, type: ContextmenuType.body, content: row });\n        }\n        /**\n         * The header triggered a column resize event.\n         */\n        onColumnResize({ column, newValue }) {\n            /* Safari/iOS 10.2 workaround */\n            if (column === undefined) {\n                return;\n            }\n            let idx;\n            const cols = this._internalColumns.map((c, i) => {\n                c = Object.assign({}, c);\n                if (c.$$id === column.$$id) {\n                    idx = i;\n                    c.width = newValue;\n                    // set this so we can force the column\n                    // width distribution to be to this value\n                    c.$$oldWidth = newValue;\n                }\n                return c;\n            });\n            this.recalculateColumns(cols, idx);\n            this._internalColumns = cols;\n            this.resize.emit({\n                column,\n                newValue\n            });\n        }\n        /**\n         * The header triggered a column re-order event.\n         */\n        onColumnReorder({ column, newValue, prevValue }) {\n            const cols = this._internalColumns.map(c => {\n                return Object.assign({}, c);\n            });\n            if (this.swapColumns) {\n                const prevCol = cols[newValue];\n                cols[newValue] = column;\n                cols[prevValue] = prevCol;\n            }\n            else {\n                if (newValue > prevValue) {\n                    const movedCol = cols[prevValue];\n                    for (let i = prevValue; i < newValue; i++) {\n                        cols[i] = cols[i + 1];\n                    }\n                    cols[newValue] = movedCol;\n                }\n                else {\n                    const movedCol = cols[prevValue];\n                    for (let i = prevValue; i > newValue; i--) {\n                        cols[i] = cols[i - 1];\n                    }\n                    cols[newValue] = movedCol;\n                }\n            }\n            this._internalColumns = cols;\n            this.reorder.emit({\n                column,\n                newValue,\n                prevValue\n            });\n        }\n        /**\n         * The header triggered a column sort event.\n         */\n        onColumnSort(event) {\n            // clean selected rows\n            if (this.selectAllRowsOnPage) {\n                this.selected = [];\n                this.select.emit({\n                    selected: this.selected\n                });\n            }\n            this.sorts = event.sorts;\n            // this could be optimized better since it will resort\n            // the rows again on the 'push' detection...\n            if (this.externalSorting === false) {\n                // don't use normal setter so we don't resort\n                this.sortInternalRows();\n            }\n            // auto group by parent on new update\n            this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n            // Always go to first page when sorting to see the newly sorted data\n            this.offset = 0;\n            this.bodyComponent.updateOffsetY(this.offset);\n            this.sort.emit(event);\n        }\n        /**\n         * Toggle all row selection\n         */\n        onHeaderSelect(event) {\n            if (this.bodyComponent && this.selectAllRowsOnPage) {\n                // before we splice, chk if we currently have all selected\n                const first = this.bodyComponent.indexes.first;\n                const last = this.bodyComponent.indexes.last;\n                const allSelected = this.selected.length === last - first;\n                // remove all existing either way\n                this.selected = [];\n                // do the opposite here\n                if (!allSelected) {\n                    this.selected.push(...this._internalRows.slice(first, last));\n                }\n            }\n            else {\n                // before we splice, chk if we currently have all selected\n                const allSelected = this.selected.length === this.rows.length;\n                // remove all existing either way\n                this.selected = [];\n                // do the opposite here\n                if (!allSelected) {\n                    this.selected.push(...this.rows);\n                }\n            }\n            this.select.emit({\n                selected: this.selected\n            });\n        }\n        /**\n         * A row was selected from body\n         */\n        onBodySelect(event) {\n            this.select.emit(event);\n        }\n        /**\n         * A row was expanded or collapsed for tree\n         */\n        onTreeAction(event) {\n            const row = event.row;\n            // TODO: For duplicated items this will not work\n            const rowIndex = this._rows.findIndex(r => r[this.treeToRelation] === event.row[this.treeToRelation]);\n            this.treeAction.emit({ row, rowIndex });\n        }\n        ngOnDestroy() {\n            this._subscriptions.forEach(subscription => subscription.unsubscribe());\n        }\n        /**\n         * listen for changes to input bindings of all DataTableColumnDirective and\n         * trigger the columnTemplates.changes observable to emit\n         */\n        listenForColumnInputChanges() {\n            this._subscriptions.push(this.columnChangesService.columnInputChanges$.subscribe(() => {\n                if (this.columnTemplates) {\n                    this.columnTemplates.notifyOnChanges();\n                }\n            }));\n        }\n        sortInternalRows() {\n            this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);\n        }\n    }\n    DatatableComponent.ɵfac = function DatatableComponent_Factory(t) { return new (t || DatatableComponent)(core[\"Wb\" /* ɵɵdirectiveInject */](swimlane_ngx_datatable_ScrollbarHelper, 4), core[\"Wb\" /* ɵɵdirectiveInject */](swimlane_ngx_datatable_DimensionsHelper, 4), core[\"Wb\" /* ɵɵdirectiveInject */](core[\"i\" /* ChangeDetectorRef */]), core[\"Wb\" /* ɵɵdirectiveInject */](core[\"n\" /* ElementRef */]), core[\"Wb\" /* ɵɵdirectiveInject */](core[\"x\" /* KeyValueDiffers */]), core[\"Wb\" /* ɵɵdirectiveInject */](swimlane_ngx_datatable_ColumnChangesService), core[\"Wb\" /* ɵɵdirectiveInject */]('configuration', 8)); };\n    DatatableComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: DatatableComponent, selectors: [[\"ngx-datatable\"]], contentQueries: function DatatableComponent_ContentQueries(rf, ctx, dirIndex) {\n            if (rf & 1) {\n                core[\"Pb\" /* ɵɵcontentQuery */](dirIndex, swimlane_ngx_datatable_DatatableRowDetailDirective, 1);\n                core[\"Pb\" /* ɵɵcontentQuery */](dirIndex, swimlane_ngx_datatable_DatatableGroupHeaderDirective, 1);\n                core[\"Pb\" /* ɵɵcontentQuery */](dirIndex, swimlane_ngx_datatable_DatatableFooterDirective, 1);\n                core[\"Pb\" /* ɵɵcontentQuery */](dirIndex, swimlane_ngx_datatable_DataTableColumnDirective, 0);\n            }\n            if (rf & 2) {\n                let _t;\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.rowDetail = _t.first);\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.groupHeader = _t.first);\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.footer = _t.first);\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.columnTemplates = _t);\n            }\n        }, viewQuery: function DatatableComponent_Query(rf, ctx) {\n            if (rf & 1) {\n                core[\"Zc\" /* ɵɵviewQuery */](swimlane_ngx_datatable_DataTableBodyComponent, 1);\n                core[\"Zc\" /* ɵɵviewQuery */](swimlane_ngx_datatable_DataTableHeaderComponent, 1);\n            }\n            if (rf & 2) {\n                let _t;\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.bodyComponent = _t.first);\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.headerComponent = _t.first);\n            }\n        }, hostAttrs: [1, \"ngx-datatable\"], hostVars: 22, hostBindings: function DatatableComponent_HostBindings(rf, ctx) {\n            if (rf & 1) {\n                core[\"mc\" /* ɵɵlistener */](\"resize\", function DatatableComponent_resize_HostBindingHandler() { return ctx.onWindowResize(); }, false, core[\"Kc\" /* ɵɵresolveWindow */]);\n            }\n            if (rf & 2) {\n                core[\"Ob\" /* ɵɵclassProp */](\"fixed-header\", ctx.isFixedHeader)(\"fixed-row\", ctx.isFixedRow)(\"scroll-vertical\", ctx.isVertScroll)(\"virtualized\", ctx.isVirtualized)(\"scroll-horz\", ctx.isHorScroll)(\"selectable\", ctx.isSelectable)(\"checkbox-selection\", ctx.isCheckboxSelection)(\"cell-selection\", ctx.isCellSelection)(\"single-selection\", ctx.isSingleSelection)(\"multi-selection\", ctx.isMultiSelection)(\"multi-click-selection\", ctx.isMultiClickSelection);\n            }\n        }, inputs: { selected: \"selected\", scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", rowHeight: \"rowHeight\", columnMode: \"columnMode\", headerHeight: \"headerHeight\", footerHeight: \"footerHeight\", externalPaging: \"externalPaging\", externalSorting: \"externalSorting\", loadingIndicator: \"loadingIndicator\", reorderable: \"reorderable\", swapColumns: \"swapColumns\", sortType: \"sortType\", sorts: \"sorts\", cssClasses: \"cssClasses\", messages: \"messages\", groupExpansionDefault: \"groupExpansionDefault\", selectAllRowsOnPage: \"selectAllRowsOnPage\", virtualization: \"virtualization\", summaryRow: \"summaryRow\", summaryHeight: \"summaryHeight\", summaryPosition: \"summaryPosition\", rowIdentity: \"rowIdentity\", rows: \"rows\", groupedRows: \"groupedRows\", groupRowsBy: \"groupRowsBy\", columns: \"columns\", limit: \"limit\", count: \"count\", offset: \"offset\", targetMarkerTemplate: \"targetMarkerTemplate\", selectionType: \"selectionType\", rowClass: \"rowClass\", selectCheck: \"selectCheck\", displayCheck: \"displayCheck\", trackByProp: \"trackByProp\", treeFromRelation: \"treeFromRelation\", treeToRelation: \"treeToRelation\" }, outputs: { scroll: \"scroll\", activate: \"activate\", select: \"select\", sort: \"sort\", page: \"page\", reorder: \"reorder\", resize: \"resize\", tableContextmenu: \"tableContextmenu\", treeAction: \"treeAction\" }, decls: 5, vars: 34, consts: [[\"visibilityObserver\", \"\", 3, \"visible\"], [3, \"sorts\", \"sortType\", \"scrollbarH\", \"innerWidth\", \"offsetX\", \"dealsWithGroup\", \"columns\", \"headerHeight\", \"reorderable\", \"targetMarkerTemplate\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"sortUnsetIcon\", \"allRowsSelected\", \"selectionType\", \"sort\", \"resize\", \"reorder\", \"select\", \"columnContextmenu\", 4, \"ngIf\"], [3, \"groupRowsBy\", \"groupedRows\", \"rows\", \"groupExpansionDefault\", \"scrollbarV\", \"scrollbarH\", \"virtualization\", \"loadingIndicator\", \"externalPaging\", \"rowHeight\", \"rowCount\", \"offset\", \"trackByProp\", \"columns\", \"pageSize\", \"offsetX\", \"rowDetail\", \"groupHeader\", \"selected\", \"innerWidth\", \"bodyHeight\", \"selectionType\", \"emptyMessage\", \"rowIdentity\", \"rowClass\", \"selectCheck\", \"displayCheck\", \"summaryRow\", \"summaryHeight\", \"summaryPosition\", \"page\", \"activate\", \"rowContextmenu\", \"select\", \"scroll\", \"treeAction\"], [3, \"rowCount\", \"pageSize\", \"offset\", \"footerHeight\", \"footerTemplate\", \"totalMessage\", \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"selectedCount\", \"selectedMessage\", \"pagerNextIcon\", \"page\", 4, \"ngIf\"], [3, \"sorts\", \"sortType\", \"scrollbarH\", \"innerWidth\", \"offsetX\", \"dealsWithGroup\", \"columns\", \"headerHeight\", \"reorderable\", \"targetMarkerTemplate\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"sortUnsetIcon\", \"allRowsSelected\", \"selectionType\", \"sort\", \"resize\", \"reorder\", \"select\", \"columnContextmenu\"], [3, \"rowCount\", \"pageSize\", \"offset\", \"footerHeight\", \"footerTemplate\", \"totalMessage\", \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"selectedCount\", \"selectedMessage\", \"pagerNextIcon\", \"page\"]], template: function DatatableComponent_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"cc\" /* ɵɵelementStart */](0, \"div\", 0);\n                core[\"mc\" /* ɵɵlistener */](\"visible\", function DatatableComponent_Template_div_visible_0_listener() { return ctx.recalculate(); });\n                core[\"Sc\" /* ɵɵtemplate */](1, DatatableComponent_datatable_header_1_Template, 2, 17, \"datatable-header\", 1);\n                core[\"cc\" /* ɵɵelementStart */](2, \"datatable-body\", 2);\n                core[\"mc\" /* ɵɵlistener */](\"page\", function DatatableComponent_Template_datatable_body_page_2_listener($event) { return ctx.onBodyPage($event); })(\"activate\", function DatatableComponent_Template_datatable_body_activate_2_listener($event) { return ctx.activate.emit($event); })(\"rowContextmenu\", function DatatableComponent_Template_datatable_body_rowContextmenu_2_listener($event) { return ctx.onRowContextmenu($event); })(\"select\", function DatatableComponent_Template_datatable_body_select_2_listener($event) { return ctx.onBodySelect($event); })(\"scroll\", function DatatableComponent_Template_datatable_body_scroll_2_listener($event) { return ctx.onBodyScroll($event); })(\"treeAction\", function DatatableComponent_Template_datatable_body_treeAction_2_listener($event) { return ctx.onTreeAction($event); });\n                core[\"pc\" /* ɵɵpipe */](3, \"async\");\n                core[\"bc\" /* ɵɵelementEnd */]();\n                core[\"Sc\" /* ɵɵtemplate */](4, DatatableComponent_datatable_footer_4_Template, 1, 12, \"datatable-footer\", 3);\n                core[\"bc\" /* ɵɵelementEnd */]();\n            }\n            if (rf & 2) {\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.headerHeight);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"groupRowsBy\", ctx.groupRowsBy)(\"groupedRows\", ctx.groupedRows)(\"rows\", ctx._internalRows)(\"groupExpansionDefault\", ctx.groupExpansionDefault)(\"scrollbarV\", ctx.scrollbarV)(\"scrollbarH\", ctx.scrollbarH)(\"virtualization\", ctx.virtualization)(\"loadingIndicator\", ctx.loadingIndicator)(\"externalPaging\", ctx.externalPaging)(\"rowHeight\", ctx.rowHeight)(\"rowCount\", ctx.rowCount)(\"offset\", ctx.offset)(\"trackByProp\", ctx.trackByProp)(\"columns\", ctx._internalColumns)(\"pageSize\", ctx.pageSize)(\"offsetX\", core[\"qc\" /* ɵɵpipeBind1 */](3, 32, ctx._offsetX))(\"rowDetail\", ctx.rowDetail)(\"groupHeader\", ctx.groupHeader)(\"selected\", ctx.selected)(\"innerWidth\", ctx._innerWidth)(\"bodyHeight\", ctx.bodyHeight)(\"selectionType\", ctx.selectionType)(\"emptyMessage\", ctx.messages.emptyMessage)(\"rowIdentity\", ctx.rowIdentity)(\"rowClass\", ctx.rowClass)(\"selectCheck\", ctx.selectCheck)(\"displayCheck\", ctx.displayCheck)(\"summaryRow\", ctx.summaryRow)(\"summaryHeight\", ctx.summaryHeight)(\"summaryPosition\", ctx.summaryPosition);\n                core[\"Ib\" /* ɵɵadvance */](2);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.footerHeight);\n            }\n        }, directives: function () { return [swimlane_ngx_datatable_VisibilityDirective, common[\"n\" /* NgIf */], swimlane_ngx_datatable_DataTableBodyComponent, swimlane_ngx_datatable_DataTableHeaderComponent, swimlane_ngx_datatable_DataTableFooterComponent]; }, pipes: function () { return [common[\"b\" /* AsyncPipe */]]; }, styles: [\".ngx-datatable{display:block;justify-content:center;overflow:hidden;position:relative;transform:translateZ(0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable :after,.ngx-datatable :before{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{-webkit-overflow-scrolling:touch;overflow-x:auto}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-header-inner,.ngx-datatable .datatable-row-center{-o-flex-flow:row;display:flex;flex-direction:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{display:inline-block;line-height:1.625;overflow-x:hidden;vertical-align:top}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:none}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{-webkit-align-items:stretch;align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{display:inline-block;position:relative}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{cursor:pointer;display:inline-block;line-height:100%;vertical-align:middle}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{bottom:0;display:inline-block;padding:0 4px;position:absolute;right:0;top:0;visibility:hidden;width:5px}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{bottom:0;position:absolute;top:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{display:block;position:relative;z-index:10}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:none}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;overflow:auto;width:100%}.ngx-datatable .datatable-footer .datatable-footer-inner{align-items:center;display:flex;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{display:inline-block;list-style:none;margin:0;padding:0}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:none}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}\"], encapsulation: 2, changeDetection: 0 });\n    Object(tslib_es6[\"c\" /* __decorate */])([\n        throttleable(5)\n    ], DatatableComponent.prototype, \"onWindowResize\", null);\n    return DatatableComponent;\n})();\nlet swimlane_ngx_datatable_DataTableHeaderCellComponent = /*@__PURE__*/ (() => {\n    class DataTableHeaderCellComponent {\n        constructor(cd) {\n            this.cd = cd;\n            this.sort = new core[\"p\" /* EventEmitter */]();\n            this.select = new core[\"p\" /* EventEmitter */]();\n            this.columnContextmenu = new core[\"p\" /* EventEmitter */](false);\n            this.sortFn = this.onSort.bind(this);\n            this.selectFn = this.select.emit.bind(this.select);\n            this.cellContext = {\n                column: this.column,\n                sortDir: this.sortDir,\n                sortFn: this.sortFn,\n                allRowsSelected: this.allRowsSelected,\n                selectFn: this.selectFn\n            };\n        }\n        set allRowsSelected(value) {\n            this._allRowsSelected = value;\n            this.cellContext.allRowsSelected = value;\n        }\n        get allRowsSelected() {\n            return this._allRowsSelected;\n        }\n        set column(column) {\n            this._column = column;\n            this.cellContext.column = column;\n            this.cd.markForCheck();\n        }\n        get column() {\n            return this._column;\n        }\n        set sorts(val) {\n            this._sorts = val;\n            this.sortDir = this.calcSortDir(val);\n            this.cellContext.sortDir = this.sortDir;\n            this.sortClass = this.calcSortClass(this.sortDir);\n            this.cd.markForCheck();\n        }\n        get sorts() {\n            return this._sorts;\n        }\n        get columnCssClasses() {\n            let cls = 'datatable-header-cell';\n            if (this.column.sortable)\n                cls += ' sortable';\n            if (this.column.resizeable)\n                cls += ' resizeable';\n            if (this.column.headerClass) {\n                if (typeof this.column.headerClass === 'string') {\n                    cls += ' ' + this.column.headerClass;\n                }\n                else if (typeof this.column.headerClass === 'function') {\n                    const res = this.column.headerClass({\n                        column: this.column\n                    });\n                    if (typeof res === 'string') {\n                        cls += res;\n                    }\n                    else if (typeof res === 'object') {\n                        const keys = Object.keys(res);\n                        for (const k of keys) {\n                            if (res[k] === true)\n                                cls += ` ${k}`;\n                        }\n                    }\n                }\n            }\n            const sortDir = this.sortDir;\n            if (sortDir) {\n                cls += ` sort-active sort-${sortDir}`;\n            }\n            return cls;\n        }\n        get name() {\n            // guaranteed to have a value by setColumnDefaults() in column-helper.ts\n            return this.column.headerTemplate === undefined ? this.column.name : undefined;\n        }\n        get minWidth() {\n            return this.column.minWidth;\n        }\n        get maxWidth() {\n            return this.column.maxWidth;\n        }\n        get width() {\n            return this.column.width;\n        }\n        get isCheckboxable() {\n            return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;\n        }\n        onContextmenu($event) {\n            this.columnContextmenu.emit({ event: $event, column: this.column });\n        }\n        ngOnInit() {\n            this.sortClass = this.calcSortClass(this.sortDir);\n        }\n        calcSortDir(sorts) {\n            if (sorts && this.column) {\n                const sort = sorts.find((s) => {\n                    return s.prop === this.column.prop;\n                });\n                if (sort)\n                    return sort.dir;\n            }\n        }\n        onSort() {\n            if (!this.column.sortable)\n                return;\n            const newValue = nextSortDir(this.sortType, this.sortDir);\n            this.sort.emit({\n                column: this.column,\n                prevValue: this.sortDir,\n                newValue\n            });\n        }\n        calcSortClass(sortDir) {\n            if (!this.cellContext.column.sortable)\n                return;\n            if (sortDir === SortDirection.asc) {\n                return `sort-btn sort-asc ${this.sortAscendingIcon}`;\n            }\n            else if (sortDir === SortDirection.desc) {\n                return `sort-btn sort-desc ${this.sortDescendingIcon}`;\n            }\n            else {\n                return `sort-btn ${this.sortUnsetIcon}`;\n            }\n        }\n    }\n    DataTableHeaderCellComponent.ɵfac = function DataTableHeaderCellComponent_Factory(t) { return new (t || DataTableHeaderCellComponent)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"i\" /* ChangeDetectorRef */])); };\n    DataTableHeaderCellComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: DataTableHeaderCellComponent, selectors: [[\"datatable-header-cell\"]], hostAttrs: [1, \"datatable-header-cell\"], hostVars: 11, hostBindings: function DataTableHeaderCellComponent_HostBindings(rf, ctx) {\n            if (rf & 1) {\n                core[\"mc\" /* ɵɵlistener */](\"contextmenu\", function DataTableHeaderCellComponent_contextmenu_HostBindingHandler($event) { return ctx.onContextmenu($event); });\n            }\n            if (rf & 2) {\n                core[\"Jb\" /* ɵɵattribute */](\"title\", ctx.name);\n                core[\"Kb\" /* ɵɵclassMap */](ctx.columnCssClasses);\n                core[\"Qc\" /* ɵɵstyleProp */](\"min-width\", ctx.minWidth, \"px\")(\"max-width\", ctx.maxWidth, \"px\")(\"width\", ctx.width, \"px\")(\"height\", ctx.headerHeight, \"px\");\n            }\n        }, inputs: { allRowsSelected: \"allRowsSelected\", column: \"column\", sorts: \"sorts\", sortType: \"sortType\", sortAscendingIcon: \"sortAscendingIcon\", sortDescendingIcon: \"sortDescendingIcon\", sortUnsetIcon: \"sortUnsetIcon\", isTarget: \"isTarget\", targetMarkerTemplate: \"targetMarkerTemplate\", targetMarkerContext: \"targetMarkerContext\", selectionType: \"selectionType\", headerHeight: \"headerHeight\" }, outputs: { sort: \"sort\", select: \"select\", columnContextmenu: \"columnContextmenu\" }, decls: 6, vars: 6, consts: [[1, \"datatable-header-cell-template-wrap\"], [4, \"ngIf\"], [\"class\", \"datatable-checkbox\", 4, \"ngIf\"], [\"class\", \"datatable-header-cell-wrapper\", 4, \"ngIf\"], [3, \"click\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"datatable-checkbox\"], [\"type\", \"checkbox\", 3, \"checked\", \"change\"], [1, \"datatable-header-cell-wrapper\"], [1, \"datatable-header-cell-label\", \"draggable\", 3, \"innerHTML\", \"click\"]], template: function DataTableHeaderCellComponent_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"cc\" /* ɵɵelementStart */](0, \"div\", 0);\n                core[\"Sc\" /* ɵɵtemplate */](1, DataTableHeaderCellComponent_1_Template, 1, 2, undefined, 1);\n                core[\"Sc\" /* ɵɵtemplate */](2, DataTableHeaderCellComponent_label_2_Template, 2, 1, \"label\", 2);\n                core[\"Sc\" /* ɵɵtemplate */](3, DataTableHeaderCellComponent_span_3_Template, 2, 1, \"span\", 3);\n                core[\"Sc\" /* ɵɵtemplate */](4, DataTableHeaderCellComponent_4_Template, 1, 2, undefined, 1);\n                core[\"cc\" /* ɵɵelementStart */](5, \"span\", 4);\n                core[\"mc\" /* ɵɵlistener */](\"click\", function DataTableHeaderCellComponent_Template_span_click_5_listener() { return ctx.onSort(); });\n                core[\"bc\" /* ɵɵelementEnd */]();\n                core[\"bc\" /* ɵɵelementEnd */]();\n            }\n            if (rf & 2) {\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.isTarget);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.isCheckboxable);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", !ctx.column.headerTemplate);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.column.headerTemplate);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"Kb\" /* ɵɵclassMap */](ctx.sortClass);\n            }\n        }, directives: [common[\"n\" /* NgIf */], common[\"p\" /* NgTemplateOutlet */]], encapsulation: 2, changeDetection: 0 });\n    return DataTableHeaderCellComponent;\n})();\nlet swimlane_ngx_datatable_DataTableFooterComponent = /*@__PURE__*/ (() => {\n    class DataTableFooterComponent {\n        constructor() {\n            this.selectedCount = 0;\n            this.page = new core[\"p\" /* EventEmitter */]();\n        }\n        get isVisible() {\n            return this.rowCount / this.pageSize > 1;\n        }\n        get curPage() {\n            return this.offset + 1;\n        }\n    }\n    DataTableFooterComponent.ɵfac = function DataTableFooterComponent_Factory(t) { return new (t || DataTableFooterComponent)(); };\n    DataTableFooterComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: DataTableFooterComponent, selectors: [[\"datatable-footer\"]], hostAttrs: [1, \"datatable-footer\"], inputs: { selectedCount: \"selectedCount\", footerHeight: \"footerHeight\", rowCount: \"rowCount\", pageSize: \"pageSize\", offset: \"offset\", pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\", totalMessage: \"totalMessage\", footerTemplate: \"footerTemplate\", selectedMessage: \"selectedMessage\" }, outputs: { page: \"page\" }, decls: 4, vars: 8, consts: [[1, \"datatable-footer-inner\", 3, \"ngClass\"], [4, \"ngIf\"], [\"class\", \"page-count\", 4, \"ngIf\"], [3, \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"pagerNextIcon\", \"page\", \"size\", \"count\", \"hidden\", \"change\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"page-count\"], [3, \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"pagerNextIcon\", \"page\", \"size\", \"count\", \"hidden\", \"change\"]], template: function DataTableFooterComponent_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"cc\" /* ɵɵelementStart */](0, \"div\", 0);\n                core[\"Sc\" /* ɵɵtemplate */](1, DataTableFooterComponent_1_Template, 1, 8, undefined, 1);\n                core[\"Sc\" /* ɵɵtemplate */](2, DataTableFooterComponent_div_2_Template, 3, 3, \"div\", 2);\n                core[\"Sc\" /* ɵɵtemplate */](3, DataTableFooterComponent_datatable_pager_3_Template, 1, 8, \"datatable-pager\", 3);\n                core[\"bc\" /* ɵɵelementEnd */]();\n            }\n            if (rf & 2) {\n                core[\"Qc\" /* ɵɵstyleProp */](\"height\", ctx.footerHeight, \"px\");\n                core[\"vc\" /* ɵɵproperty */](\"ngClass\", core[\"Ac\" /* ɵɵpureFunction1 */](6, _c2, ctx.selectedMessage));\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.footerTemplate);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", !ctx.footerTemplate);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", !ctx.footerTemplate);\n            }\n        }, directives: function () { return [common[\"l\" /* NgClass */], common[\"n\" /* NgIf */], common[\"p\" /* NgTemplateOutlet */], swimlane_ngx_datatable_DataTablePagerComponent]; }, encapsulation: 2, changeDetection: 0 });\n    return DataTableFooterComponent;\n})();\nlet swimlane_ngx_datatable_DataTablePagerComponent = /*@__PURE__*/ (() => {\n    class DataTablePagerComponent {\n        constructor() {\n            this.change = new core[\"p\" /* EventEmitter */]();\n            this._count = 0;\n            this._page = 1;\n            this._size = 0;\n        }\n        set size(val) {\n            this._size = val;\n            this.pages = this.calcPages();\n        }\n        get size() {\n            return this._size;\n        }\n        set count(val) {\n            this._count = val;\n            this.pages = this.calcPages();\n        }\n        get count() {\n            return this._count;\n        }\n        set page(val) {\n            this._page = val;\n            this.pages = this.calcPages();\n        }\n        get page() {\n            return this._page;\n        }\n        get totalPages() {\n            const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);\n            return Math.max(count || 0, 1);\n        }\n        canPrevious() {\n            return this.page > 1;\n        }\n        canNext() {\n            return this.page < this.totalPages;\n        }\n        prevPage() {\n            this.selectPage(this.page - 1);\n        }\n        nextPage() {\n            this.selectPage(this.page + 1);\n        }\n        selectPage(page) {\n            if (page > 0 && page <= this.totalPages && page !== this.page) {\n                this.page = page;\n                this.change.emit({\n                    page\n                });\n            }\n        }\n        calcPages(page) {\n            const pages = [];\n            let startPage = 1;\n            let endPage = this.totalPages;\n            const maxSize = 5;\n            const isMaxSized = maxSize < this.totalPages;\n            page = page || this.page;\n            if (isMaxSized) {\n                startPage = page - Math.floor(maxSize / 2);\n                endPage = page + Math.floor(maxSize / 2);\n                if (startPage < 1) {\n                    startPage = 1;\n                    endPage = Math.min(startPage + maxSize - 1, this.totalPages);\n                }\n                else if (endPage > this.totalPages) {\n                    startPage = Math.max(this.totalPages - maxSize + 1, 1);\n                    endPage = this.totalPages;\n                }\n            }\n            for (let num = startPage; num <= endPage; num++) {\n                pages.push({\n                    number: num,\n                    text: num\n                });\n            }\n            return pages;\n        }\n    }\n    DataTablePagerComponent.ɵfac = function DataTablePagerComponent_Factory(t) { return new (t || DataTablePagerComponent)(); };\n    DataTablePagerComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: DataTablePagerComponent, selectors: [[\"datatable-pager\"]], hostAttrs: [1, \"datatable-pager\"], inputs: { size: \"size\", count: \"count\", page: \"page\", pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\" }, outputs: { change: \"change\" }, decls: 14, vars: 21, consts: [[1, \"pager\"], [\"role\", \"button\", \"aria-label\", \"go to first page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", \"aria-label\", \"go to previous page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", \"class\", \"pages\", 3, \"active\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"button\", \"aria-label\", \"go to next page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", \"aria-label\", \"go to last page\", \"href\", \"javascript:void(0)\", 3, \"click\"], [\"role\", \"button\", 1, \"pages\"], [\"href\", \"javascript:void(0)\", 3, \"click\"]], template: function DataTablePagerComponent_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"cc\" /* ɵɵelementStart */](0, \"ul\", 0);\n                core[\"cc\" /* ɵɵelementStart */](1, \"li\");\n                core[\"cc\" /* ɵɵelementStart */](2, \"a\", 1);\n                core[\"mc\" /* ɵɵlistener */](\"click\", function DataTablePagerComponent_Template_a_click_2_listener() { return ctx.selectPage(1); });\n                core[\"Xb\" /* ɵɵelement */](3, \"i\");\n                core[\"bc\" /* ɵɵelementEnd */]();\n                core[\"bc\" /* ɵɵelementEnd */]();\n                core[\"cc\" /* ɵɵelementStart */](4, \"li\");\n                core[\"cc\" /* ɵɵelementStart */](5, \"a\", 2);\n                core[\"mc\" /* ɵɵlistener */](\"click\", function DataTablePagerComponent_Template_a_click_5_listener() { return ctx.prevPage(); });\n                core[\"Xb\" /* ɵɵelement */](6, \"i\");\n                core[\"bc\" /* ɵɵelementEnd */]();\n                core[\"bc\" /* ɵɵelementEnd */]();\n                core[\"Sc\" /* ɵɵtemplate */](7, DataTablePagerComponent_li_7_Template, 3, 4, \"li\", 3);\n                core[\"cc\" /* ɵɵelementStart */](8, \"li\");\n                core[\"cc\" /* ɵɵelementStart */](9, \"a\", 4);\n                core[\"mc\" /* ɵɵlistener */](\"click\", function DataTablePagerComponent_Template_a_click_9_listener() { return ctx.nextPage(); });\n                core[\"Xb\" /* ɵɵelement */](10, \"i\");\n                core[\"bc\" /* ɵɵelementEnd */]();\n                core[\"bc\" /* ɵɵelementEnd */]();\n                core[\"cc\" /* ɵɵelementStart */](11, \"li\");\n                core[\"cc\" /* ɵɵelementStart */](12, \"a\", 5);\n                core[\"mc\" /* ɵɵlistener */](\"click\", function DataTablePagerComponent_Template_a_click_12_listener() { return ctx.selectPage(ctx.totalPages); });\n                core[\"Xb\" /* ɵɵelement */](13, \"i\");\n                core[\"bc\" /* ɵɵelementEnd */]();\n                core[\"bc\" /* ɵɵelementEnd */]();\n                core[\"bc\" /* ɵɵelementEnd */]();\n            }\n            if (rf & 2) {\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"Ob\" /* ɵɵclassProp */](\"disabled\", !ctx.canPrevious());\n                core[\"Ib\" /* ɵɵadvance */](2);\n                core[\"Kb\" /* ɵɵclassMap */](ctx.pagerPreviousIcon);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"Ob\" /* ɵɵclassProp */](\"disabled\", !ctx.canPrevious());\n                core[\"Ib\" /* ɵɵadvance */](2);\n                core[\"Kb\" /* ɵɵclassMap */](ctx.pagerLeftArrowIcon);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngForOf\", ctx.pages);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"Ob\" /* ɵɵclassProp */](\"disabled\", !ctx.canNext());\n                core[\"Ib\" /* ɵɵadvance */](2);\n                core[\"Kb\" /* ɵɵclassMap */](ctx.pagerRightArrowIcon);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"Ob\" /* ɵɵclassProp */](\"disabled\", !ctx.canNext());\n                core[\"Ib\" /* ɵɵadvance */](2);\n                core[\"Kb\" /* ɵɵclassMap */](ctx.pagerNextIcon);\n            }\n        }, directives: [common[\"m\" /* NgForOf */]], encapsulation: 2, changeDetection: 0 });\n    return DataTablePagerComponent;\n})();\nlet swimlane_ngx_datatable_ProgressBarComponent = /*@__PURE__*/ (() => {\n    class ProgressBarComponent {\n    }\n    ProgressBarComponent.ɵfac = function ProgressBarComponent_Factory(t) { return new (t || ProgressBarComponent)(); };\n    ProgressBarComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: ProgressBarComponent, selectors: [[\"datatable-progress\"]], decls: 3, vars: 0, consts: [[\"role\", \"progressbar\", 1, \"progress-linear\"], [1, \"container\"], [1, \"bar\"]], template: function ProgressBarComponent_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"cc\" /* ɵɵelementStart */](0, \"div\", 0);\n                core[\"cc\" /* ɵɵelementStart */](1, \"div\", 1);\n                core[\"Xb\" /* ɵɵelement */](2, \"div\", 2);\n                core[\"bc\" /* ɵɵelementEnd */]();\n                core[\"bc\" /* ɵɵelementEnd */]();\n            }\n        }, encapsulation: 2, changeDetection: 0 });\n    return ProgressBarComponent;\n})();\nvar Keys = /*@__PURE__*/ (function (Keys) {\n    Keys[Keys[\"up\"] = 38] = \"up\";\n    Keys[Keys[\"down\"] = 40] = \"down\";\n    Keys[Keys[\"return\"] = 13] = \"return\";\n    Keys[Keys[\"escape\"] = 27] = \"escape\";\n    Keys[Keys[\"left\"] = 37] = \"left\";\n    Keys[Keys[\"right\"] = 39] = \"right\";\n    return Keys;\n})({});\nlet swimlane_ngx_datatable_DataTableBodyRowComponent = /*@__PURE__*/ (() => {\n    class DataTableBodyRowComponent {\n        constructor(differs, scrollbarHelper, cd, element) {\n            this.differs = differs;\n            this.scrollbarHelper = scrollbarHelper;\n            this.cd = cd;\n            this.treeStatus = 'collapsed';\n            this.activate = new core[\"p\" /* EventEmitter */]();\n            this.treeAction = new core[\"p\" /* EventEmitter */]();\n            this._groupStyles = {\n                left: {},\n                center: {},\n                right: {}\n            };\n            this._element = element.nativeElement;\n            this._rowDiffer = differs.find({}).create();\n        }\n        set columns(val) {\n            this._columns = val;\n            this.recalculateColumns(val);\n            this.buildStylesByGroup();\n        }\n        get columns() {\n            return this._columns;\n        }\n        set innerWidth(val) {\n            if (this._columns) {\n                const colByPin = columnsByPin(this._columns);\n                this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n            }\n            this._innerWidth = val;\n            this.recalculateColumns();\n            this.buildStylesByGroup();\n        }\n        get innerWidth() {\n            return this._innerWidth;\n        }\n        set offsetX(val) {\n            this._offsetX = val;\n            this.buildStylesByGroup();\n        }\n        get offsetX() {\n            return this._offsetX;\n        }\n        get cssClass() {\n            let cls = 'datatable-body-row';\n            if (this.isSelected) {\n                cls += ' active';\n            }\n            if (this.rowIndex % 2 !== 0) {\n                cls += ' datatable-row-odd';\n            }\n            if (this.rowIndex % 2 === 0) {\n                cls += ' datatable-row-even';\n            }\n            if (this.rowClass) {\n                const res = this.rowClass(this.row);\n                if (typeof res === 'string') {\n                    cls += ` ${res}`;\n                }\n                else if (typeof res === 'object') {\n                    const keys = Object.keys(res);\n                    for (const k of keys) {\n                        if (res[k] === true) {\n                            cls += ` ${k}`;\n                        }\n                    }\n                }\n            }\n            return cls;\n        }\n        get columnsTotalWidths() {\n            return this._columnGroupWidths.total;\n        }\n        ngDoCheck() {\n            if (this._rowDiffer.diff(this.row)) {\n                this.cd.markForCheck();\n            }\n        }\n        trackByGroups(index, colGroup) {\n            return colGroup.type;\n        }\n        columnTrackingFn(index, column) {\n            return column.$$id;\n        }\n        buildStylesByGroup() {\n            this._groupStyles.left = this.calcStylesByGroup('left');\n            this._groupStyles.center = this.calcStylesByGroup('center');\n            this._groupStyles.right = this.calcStylesByGroup('right');\n            this.cd.markForCheck();\n        }\n        calcStylesByGroup(group) {\n            const widths = this._columnGroupWidths;\n            const offsetX = this.offsetX;\n            const styles = {\n                width: `${widths[group]}px`\n            };\n            if (group === 'left') {\n                translateXY(styles, offsetX, 0);\n            }\n            else if (group === 'right') {\n                const bodyWidth = parseInt(this.innerWidth + '', 0);\n                const totalDiff = widths.total - bodyWidth;\n                const offsetDiff = totalDiff - offsetX;\n                const offset = (offsetDiff + this.scrollbarHelper.width) * -1;\n                translateXY(styles, offset, 0);\n            }\n            return styles;\n        }\n        onActivate(event, index) {\n            event.cellIndex = index;\n            event.rowElement = this._element;\n            this.activate.emit(event);\n        }\n        onKeyDown(event) {\n            const keyCode = event.keyCode;\n            const isTargetRow = event.target === this._element;\n            const isAction = keyCode === Keys.return ||\n                keyCode === Keys.down ||\n                keyCode === Keys.up ||\n                keyCode === Keys.left ||\n                keyCode === Keys.right;\n            if (isAction && isTargetRow) {\n                event.preventDefault();\n                event.stopPropagation();\n                this.activate.emit({\n                    type: 'keydown',\n                    event,\n                    row: this.row,\n                    rowElement: this._element\n                });\n            }\n        }\n        onMouseenter(event) {\n            this.activate.emit({\n                type: 'mouseenter',\n                event,\n                row: this.row,\n                rowElement: this._element\n            });\n        }\n        recalculateColumns(val = this.columns) {\n            this._columns = val;\n            const colsByPin = columnsByPin(this._columns);\n            this._columnsByPin = columnsByPinArr(this._columns);\n            this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);\n        }\n        onTreeAction() {\n            this.treeAction.emit();\n        }\n    }\n    DataTableBodyRowComponent.ɵfac = function DataTableBodyRowComponent_Factory(t) { return new (t || DataTableBodyRowComponent)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"x\" /* KeyValueDiffers */]), core[\"Wb\" /* ɵɵdirectiveInject */](swimlane_ngx_datatable_ScrollbarHelper, 4), core[\"Wb\" /* ɵɵdirectiveInject */](core[\"i\" /* ChangeDetectorRef */]), core[\"Wb\" /* ɵɵdirectiveInject */](core[\"n\" /* ElementRef */])); };\n    DataTableBodyRowComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: DataTableBodyRowComponent, selectors: [[\"datatable-body-row\"]], hostVars: 6, hostBindings: function DataTableBodyRowComponent_HostBindings(rf, ctx) {\n            if (rf & 1) {\n                core[\"mc\" /* ɵɵlistener */](\"keydown\", function DataTableBodyRowComponent_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); })(\"mouseenter\", function DataTableBodyRowComponent_mouseenter_HostBindingHandler($event) { return ctx.onMouseenter($event); });\n            }\n            if (rf & 2) {\n                core[\"Kb\" /* ɵɵclassMap */](ctx.cssClass);\n                core[\"Qc\" /* ɵɵstyleProp */](\"width\", ctx.columnsTotalWidths, \"px\")(\"height\", ctx.rowHeight, \"px\");\n            }\n        }, inputs: { treeStatus: \"treeStatus\", columns: \"columns\", innerWidth: \"innerWidth\", offsetX: \"offsetX\", expanded: \"expanded\", rowClass: \"rowClass\", row: \"row\", group: \"group\", isSelected: \"isSelected\", rowIndex: \"rowIndex\", displayCheck: \"displayCheck\", rowHeight: \"rowHeight\" }, outputs: { activate: \"activate\", treeAction: \"treeAction\" }, decls: 1, vars: 2, consts: [[3, \"class\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"ngStyle\"], [\"tabindex\", \"-1\", 3, \"row\", \"group\", \"expanded\", \"isSelected\", \"rowIndex\", \"column\", \"rowHeight\", \"displayCheck\", \"treeStatus\", \"activate\", \"treeAction\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"tabindex\", \"-1\", 3, \"row\", \"group\", \"expanded\", \"isSelected\", \"rowIndex\", \"column\", \"rowHeight\", \"displayCheck\", \"treeStatus\", \"activate\", \"treeAction\"]], template: function DataTableBodyRowComponent_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"Sc\" /* ɵɵtemplate */](0, DataTableBodyRowComponent_div_0_Template, 2, 6, \"div\", 0);\n            }\n            if (rf & 2) {\n                core[\"vc\" /* ɵɵproperty */](\"ngForOf\", ctx._columnsByPin)(\"ngForTrackBy\", ctx.trackByGroups);\n            }\n        }, directives: function () { return [common[\"m\" /* NgForOf */], common[\"o\" /* NgStyle */], swimlane_ngx_datatable_DataTableBodyCellComponent]; }, encapsulation: 2, changeDetection: 0 });\n    return DataTableBodyRowComponent;\n})();\nlet swimlane_ngx_datatable_DataTableRowWrapperComponent = /*@__PURE__*/ (() => {\n    class DataTableRowWrapperComponent {\n        constructor(cd, differs) {\n            this.cd = cd;\n            this.differs = differs;\n            this.rowContextmenu = new core[\"p\" /* EventEmitter */](false);\n            this._expanded = false;\n            this.groupContext = {\n                group: this.row,\n                expanded: this.expanded,\n                rowIndex: this.rowIndex\n            };\n            this.rowContext = {\n                row: this.row,\n                expanded: this.expanded,\n                rowIndex: this.rowIndex\n            };\n            this.rowDiffer = differs.find({}).create();\n        }\n        set rowIndex(val) {\n            this._rowIndex = val;\n            this.rowContext.rowIndex = val;\n            this.groupContext.rowIndex = val;\n            this.cd.markForCheck();\n        }\n        get rowIndex() {\n            return this._rowIndex;\n        }\n        set expanded(val) {\n            this._expanded = val;\n            this.groupContext.expanded = val;\n            this.rowContext.expanded = val;\n            this.cd.markForCheck();\n        }\n        get expanded() {\n            return this._expanded;\n        }\n        ngDoCheck() {\n            if (this.rowDiffer.diff(this.row)) {\n                this.rowContext.row = this.row;\n                this.groupContext.group = this.row;\n                this.cd.markForCheck();\n            }\n        }\n        onContextmenu($event) {\n            this.rowContextmenu.emit({ event: $event, row: this.row });\n        }\n        getGroupHeaderStyle() {\n            const styles = {};\n            styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';\n            styles['backface-visibility'] = 'hidden';\n            styles['width'] = this.innerWidth;\n            return styles;\n        }\n    }\n    DataTableRowWrapperComponent.ɵfac = function DataTableRowWrapperComponent_Factory(t) { return new (t || DataTableRowWrapperComponent)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"i\" /* ChangeDetectorRef */]), core[\"Wb\" /* ɵɵdirectiveInject */](core[\"x\" /* KeyValueDiffers */])); };\n    DataTableRowWrapperComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: DataTableRowWrapperComponent, selectors: [[\"datatable-row-wrapper\"]], hostAttrs: [1, \"datatable-row-wrapper\"], hostBindings: function DataTableRowWrapperComponent_HostBindings(rf, ctx) {\n            if (rf & 1) {\n                core[\"mc\" /* ɵɵlistener */](\"contextmenu\", function DataTableRowWrapperComponent_contextmenu_HostBindingHandler($event) { return ctx.onContextmenu($event); });\n            }\n        }, inputs: { rowIndex: \"rowIndex\", expanded: \"expanded\", innerWidth: \"innerWidth\", rowDetail: \"rowDetail\", groupHeader: \"groupHeader\", offsetX: \"offsetX\", detailRowHeight: \"detailRowHeight\", row: \"row\", groupedRows: \"groupedRows\" }, outputs: { rowContextmenu: \"rowContextmenu\" }, ngContentSelectors: _c0, decls: 3, vars: 3, consts: [[\"class\", \"datatable-group-header\", 3, \"ngStyle\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"datatable-row-detail\", 3, \"height\", 4, \"ngIf\"], [1, \"datatable-group-header\", 3, \"ngStyle\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"datatable-row-detail\"]], template: function DataTableRowWrapperComponent_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"uc\" /* ɵɵprojectionDef */]();\n                core[\"Sc\" /* ɵɵtemplate */](0, DataTableRowWrapperComponent_div_0_Template, 2, 2, \"div\", 0);\n                core[\"Sc\" /* ɵɵtemplate */](1, DataTableRowWrapperComponent_ng_content_1_Template, 1, 0, \"ng-content\", 1);\n                core[\"Sc\" /* ɵɵtemplate */](2, DataTableRowWrapperComponent_div_2_Template, 2, 3, \"div\", 2);\n            }\n            if (rf & 2) {\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.groupHeader && ctx.groupHeader.template);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.groupHeader && ctx.groupHeader.template && ctx.expanded || !ctx.groupHeader || !ctx.groupHeader.template);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.rowDetail && ctx.rowDetail.template && ctx.expanded);\n            }\n        }, directives: [common[\"n\" /* NgIf */], common[\"o\" /* NgStyle */], common[\"p\" /* NgTemplateOutlet */]], encapsulation: 2, changeDetection: 0 });\n    return DataTableRowWrapperComponent;\n})();\nlet swimlane_ngx_datatable_DataTableBodyCellComponent = /*@__PURE__*/ (() => {\n    class DataTableBodyCellComponent {\n        constructor(element, cd) {\n            this.cd = cd;\n            this.activate = new core[\"p\" /* EventEmitter */]();\n            this.treeAction = new core[\"p\" /* EventEmitter */]();\n            this.isFocused = false;\n            this.onCheckboxChangeFn = this.onCheckboxChange.bind(this);\n            this.activateFn = this.activate.emit.bind(this.activate);\n            this.cellContext = {\n                onCheckboxChangeFn: this.onCheckboxChangeFn,\n                activateFn: this.activateFn,\n                row: this.row,\n                group: this.group,\n                value: this.value,\n                column: this.column,\n                rowHeight: this.rowHeight,\n                isSelected: this.isSelected,\n                rowIndex: this.rowIndex,\n                treeStatus: this.treeStatus,\n                onTreeAction: this.onTreeAction.bind(this)\n            };\n            this._element = element.nativeElement;\n        }\n        set group(group) {\n            this._group = group;\n            this.cellContext.group = group;\n            this.checkValueUpdates();\n            this.cd.markForCheck();\n        }\n        get group() {\n            return this._group;\n        }\n        set rowHeight(val) {\n            this._rowHeight = val;\n            this.cellContext.rowHeight = val;\n            this.checkValueUpdates();\n            this.cd.markForCheck();\n        }\n        get rowHeight() {\n            return this._rowHeight;\n        }\n        set isSelected(val) {\n            this._isSelected = val;\n            this.cellContext.isSelected = val;\n            this.cd.markForCheck();\n        }\n        get isSelected() {\n            return this._isSelected;\n        }\n        set expanded(val) {\n            this._expanded = val;\n            this.cellContext.expanded = val;\n            this.cd.markForCheck();\n        }\n        get expanded() {\n            return this._expanded;\n        }\n        set rowIndex(val) {\n            this._rowIndex = val;\n            this.cellContext.rowIndex = val;\n            this.checkValueUpdates();\n            this.cd.markForCheck();\n        }\n        get rowIndex() {\n            return this._rowIndex;\n        }\n        set column(column) {\n            this._column = column;\n            this.cellContext.column = column;\n            this.checkValueUpdates();\n            this.cd.markForCheck();\n        }\n        get column() {\n            return this._column;\n        }\n        set row(row) {\n            this._row = row;\n            this.cellContext.row = row;\n            this.checkValueUpdates();\n            this.cd.markForCheck();\n        }\n        get row() {\n            return this._row;\n        }\n        set sorts(val) {\n            this._sorts = val;\n            this.calcSortDir = this.calcSortDir(val);\n        }\n        get sorts() {\n            return this._sorts;\n        }\n        set treeStatus(status) {\n            if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {\n                this._treeStatus = 'collapsed';\n            }\n            else {\n                this._treeStatus = status;\n            }\n            this.cellContext.treeStatus = this._treeStatus;\n            this.checkValueUpdates();\n            this.cd.markForCheck();\n        }\n        get treeStatus() {\n            return this._treeStatus;\n        }\n        get columnCssClasses() {\n            let cls = 'datatable-body-cell';\n            if (this.column.cellClass) {\n                if (typeof this.column.cellClass === 'string') {\n                    cls += ' ' + this.column.cellClass;\n                }\n                else if (typeof this.column.cellClass === 'function') {\n                    const res = this.column.cellClass({\n                        row: this.row,\n                        group: this.group,\n                        column: this.column,\n                        value: this.value,\n                        rowHeight: this.rowHeight\n                    });\n                    if (typeof res === 'string') {\n                        cls += ' ' + res;\n                    }\n                    else if (typeof res === 'object') {\n                        const keys = Object.keys(res);\n                        for (const k of keys) {\n                            if (res[k] === true) {\n                                cls += ` ${k}`;\n                            }\n                        }\n                    }\n                }\n            }\n            if (!this.sortDir) {\n                cls += ' sort-active';\n            }\n            if (this.isFocused) {\n                cls += ' active';\n            }\n            if (this.sortDir === SortDirection.asc) {\n                cls += ' sort-asc';\n            }\n            if (this.sortDir === SortDirection.desc) {\n                cls += ' sort-desc';\n            }\n            return cls;\n        }\n        get width() {\n            return this.column.width;\n        }\n        get minWidth() {\n            return this.column.minWidth;\n        }\n        get maxWidth() {\n            return this.column.maxWidth;\n        }\n        get height() {\n            const height = this.rowHeight;\n            if (isNaN(height)) {\n                return height;\n            }\n            return height + 'px';\n        }\n        ngDoCheck() {\n            this.checkValueUpdates();\n        }\n        ngOnDestroy() {\n            if (this.cellTemplate) {\n                this.cellTemplate.clear();\n            }\n        }\n        checkValueUpdates() {\n            let value = '';\n            if (!this.row || !this.column) {\n                value = '';\n            }\n            else {\n                const val = this.column.$$valueGetter(this.row, this.column.prop);\n                const userPipe = this.column.pipe;\n                if (userPipe) {\n                    value = userPipe.transform(val);\n                }\n                else if (value !== undefined) {\n                    value = val;\n                }\n            }\n            if (this.value !== value) {\n                this.value = value;\n                this.cellContext.value = value;\n                this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;\n                this.cd.markForCheck();\n            }\n        }\n        onFocus() {\n            this.isFocused = true;\n        }\n        onBlur() {\n            this.isFocused = false;\n        }\n        onClick(event) {\n            this.activate.emit({\n                type: 'click',\n                event,\n                row: this.row,\n                group: this.group,\n                rowHeight: this.rowHeight,\n                column: this.column,\n                value: this.value,\n                cellElement: this._element\n            });\n        }\n        onDblClick(event) {\n            this.activate.emit({\n                type: 'dblclick',\n                event,\n                row: this.row,\n                group: this.group,\n                rowHeight: this.rowHeight,\n                column: this.column,\n                value: this.value,\n                cellElement: this._element\n            });\n        }\n        onKeyDown(event) {\n            const keyCode = event.keyCode;\n            const isTargetCell = event.target === this._element;\n            const isAction = keyCode === Keys.return ||\n                keyCode === Keys.down ||\n                keyCode === Keys.up ||\n                keyCode === Keys.left ||\n                keyCode === Keys.right;\n            if (isAction && isTargetCell) {\n                event.preventDefault();\n                event.stopPropagation();\n                this.activate.emit({\n                    type: 'keydown',\n                    event,\n                    row: this.row,\n                    group: this.group,\n                    rowHeight: this.rowHeight,\n                    column: this.column,\n                    value: this.value,\n                    cellElement: this._element\n                });\n            }\n        }\n        onCheckboxChange(event) {\n            this.activate.emit({\n                type: 'checkbox',\n                event,\n                row: this.row,\n                group: this.group,\n                rowHeight: this.rowHeight,\n                column: this.column,\n                value: this.value,\n                cellElement: this._element,\n                treeStatus: 'collapsed'\n            });\n        }\n        calcSortDir(sorts) {\n            if (!sorts) {\n                return;\n            }\n            const sort = sorts.find((s) => {\n                return s.prop === this.column.prop;\n            });\n            if (sort) {\n                return sort.dir;\n            }\n        }\n        stripHtml(html) {\n            if (!html.replace) {\n                return html;\n            }\n            return html.replace(/<\\/?[^>]+(>|$)/g, '');\n        }\n        onTreeAction() {\n            this.treeAction.emit(this.row);\n        }\n        calcLeftMargin(column, row) {\n            const levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;\n            return column.isTreeColumn ? row.level * levelIndent : 0;\n        }\n    }\n    DataTableBodyCellComponent.ɵfac = function DataTableBodyCellComponent_Factory(t) { return new (t || DataTableBodyCellComponent)(core[\"Wb\" /* ɵɵdirectiveInject */](core[\"n\" /* ElementRef */]), core[\"Wb\" /* ɵɵdirectiveInject */](core[\"i\" /* ChangeDetectorRef */])); };\n    DataTableBodyCellComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: DataTableBodyCellComponent, selectors: [[\"datatable-body-cell\"]], viewQuery: function DataTableBodyCellComponent_Query(rf, ctx) {\n            if (rf & 1) {\n                core[\"Zc\" /* ɵɵviewQuery */](_c3, 3, core[\"X\" /* ViewContainerRef */]);\n            }\n            if (rf & 2) {\n                let _t;\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.cellTemplate = _t.first);\n            }\n        }, hostVars: 10, hostBindings: function DataTableBodyCellComponent_HostBindings(rf, ctx) {\n            if (rf & 1) {\n                core[\"mc\" /* ɵɵlistener */](\"focus\", function DataTableBodyCellComponent_focus_HostBindingHandler() { return ctx.onFocus(); })(\"blur\", function DataTableBodyCellComponent_blur_HostBindingHandler() { return ctx.onBlur(); })(\"click\", function DataTableBodyCellComponent_click_HostBindingHandler($event) { return ctx.onClick($event); })(\"dblclick\", function DataTableBodyCellComponent_dblclick_HostBindingHandler($event) { return ctx.onDblClick($event); })(\"keydown\", function DataTableBodyCellComponent_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });\n            }\n            if (rf & 2) {\n                core[\"Kb\" /* ɵɵclassMap */](ctx.columnCssClasses);\n                core[\"Qc\" /* ɵɵstyleProp */](\"width\", ctx.width, \"px\")(\"min-width\", ctx.minWidth, \"px\")(\"max-width\", ctx.maxWidth, \"px\")(\"height\", ctx.height);\n            }\n        }, inputs: { group: \"group\", rowHeight: \"rowHeight\", isSelected: \"isSelected\", expanded: \"expanded\", rowIndex: \"rowIndex\", column: \"column\", row: \"row\", sorts: \"sorts\", treeStatus: \"treeStatus\", displayCheck: \"displayCheck\" }, outputs: { activate: \"activate\", treeAction: \"treeAction\" }, decls: 5, vars: 6, consts: [[1, \"datatable-body-cell-label\"], [\"class\", \"datatable-checkbox\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"title\", \"innerHTML\", 4, \"ngIf\"], [1, \"datatable-checkbox\"], [\"type\", \"checkbox\", 3, \"checked\", \"click\"], [\"class\", \"datatable-tree-button\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [1, \"datatable-tree-button\", 3, \"disabled\", \"click\"], [\"class\", \"icon datatable-icon-collapse\", 4, \"ngIf\"], [\"class\", \"icon datatable-icon-up\", 4, \"ngIf\"], [\"class\", \"icon datatable-icon-down\", 4, \"ngIf\"], [1, \"icon\", \"datatable-icon-collapse\"], [1, \"icon\", \"datatable-icon-up\"], [1, \"icon\", \"datatable-icon-down\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"title\", \"innerHTML\"], [\"cellTemplate\", \"\"]], template: function DataTableBodyCellComponent_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"cc\" /* ɵɵelementStart */](0, \"div\", 0);\n                core[\"Sc\" /* ɵɵtemplate */](1, DataTableBodyCellComponent_label_1_Template, 2, 1, \"label\", 1);\n                core[\"Sc\" /* ɵɵtemplate */](2, DataTableBodyCellComponent_ng_container_2_Template, 3, 2, \"ng-container\", 2);\n                core[\"Sc\" /* ɵɵtemplate */](3, DataTableBodyCellComponent_span_3_Template, 1, 2, \"span\", 3);\n                core[\"Sc\" /* ɵɵtemplate */](4, DataTableBodyCellComponent_4_Template, 2, 2, undefined, 2);\n                core[\"bc\" /* ɵɵelementEnd */]();\n            }\n            if (rf & 2) {\n                core[\"Qc\" /* ɵɵstyleProp */](\"margin-left\", ctx.calcLeftMargin(ctx.column, ctx.row), \"px\");\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.column.checkboxable && (!ctx.displayCheck || ctx.displayCheck(ctx.row, ctx.column, ctx.value)));\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.column.isTreeColumn);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", !ctx.column.cellTemplate);\n                core[\"Ib\" /* ɵɵadvance */](1);\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.column.cellTemplate);\n            }\n        }, directives: [common[\"n\" /* NgIf */], common[\"p\" /* NgTemplateOutlet */]], encapsulation: 2, changeDetection: 0 });\n    return DataTableBodyCellComponent;\n})();\nfunction selectRows(selected, row, comparefn) {\n    const selectedIndex = comparefn(row, selected);\n    if (selectedIndex > -1) {\n        selected.splice(selectedIndex, 1);\n    }\n    else {\n        selected.push(row);\n    }\n    return selected;\n}\nfunction selectRowsBetween(selected, rows, index, prevIndex, comparefn) {\n    const reverse = index < prevIndex;\n    for (let i = 0; i < rows.length; i++) {\n        const row = rows[i];\n        const greater = i >= prevIndex && i <= index;\n        const lesser = i <= prevIndex && i >= index;\n        let range = { start: 0, end: 0 };\n        if (reverse) {\n            range = {\n                start: index,\n                end: prevIndex\n            };\n        }\n        else {\n            range = {\n                start: prevIndex,\n                end: index + 1\n            };\n        }\n        if ((reverse && lesser) || (!reverse && greater)) {\n            // if in the positive range to be added to `selected`, and\n            // not already in the selected array, add it\n            if (i >= range.start && i <= range.end) {\n                selected.push(row);\n            }\n        }\n    }\n    return selected;\n}\nlet swimlane_ngx_datatable_DataTableSelectionComponent = /*@__PURE__*/ (() => {\n    class DataTableSelectionComponent {\n        constructor() {\n            this.activate = new core[\"p\" /* EventEmitter */]();\n            this.select = new core[\"p\" /* EventEmitter */]();\n        }\n        selectRow(event, index, row) {\n            if (!this.selectEnabled)\n                return;\n            const chkbox = this.selectionType === SelectionType.checkbox;\n            const multi = this.selectionType === SelectionType.multi;\n            const multiClick = this.selectionType === SelectionType.multiClick;\n            let selected = [];\n            if (multi || chkbox || multiClick) {\n                if (event.shiftKey) {\n                    selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\n                }\n                else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\n                    selected = selectRows([...this.selected], row, this.getRowSelectedIdx.bind(this));\n                }\n                else {\n                    selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n                }\n            }\n            else {\n                selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n            }\n            if (typeof this.selectCheck === 'function') {\n                selected = selected.filter(this.selectCheck.bind(this));\n            }\n            this.selected.splice(0, this.selected.length);\n            this.selected.push(...selected);\n            this.prevIndex = index;\n            this.select.emit({\n                selected\n            });\n        }\n        onActivate(model, index) {\n            const { type, event, row } = model;\n            const chkbox = this.selectionType === SelectionType.checkbox;\n            const select = (!chkbox && (type === 'click' || type === 'dblclick')) || (chkbox && type === 'checkbox');\n            if (select) {\n                this.selectRow(event, index, row);\n            }\n            else if (type === 'keydown') {\n                if (event.keyCode === Keys.return) {\n                    this.selectRow(event, index, row);\n                }\n                else {\n                    this.onKeyboardFocus(model);\n                }\n            }\n            this.activate.emit(model);\n        }\n        onKeyboardFocus(model) {\n            const { keyCode } = model.event;\n            const shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;\n            if (shouldFocus) {\n                const isCellSelection = this.selectionType === SelectionType.cell;\n                if (!model.cellElement || !isCellSelection) {\n                    this.focusRow(model.rowElement, keyCode);\n                }\n                else if (isCellSelection) {\n                    this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\n                }\n            }\n        }\n        focusRow(rowElement, keyCode) {\n            const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n            if (nextRowElement)\n                nextRowElement.focus();\n        }\n        getPrevNextRow(rowElement, keyCode) {\n            const parentElement = rowElement.parentElement;\n            if (parentElement) {\n                let focusElement;\n                if (keyCode === Keys.up) {\n                    focusElement = parentElement.previousElementSibling;\n                }\n                else if (keyCode === Keys.down) {\n                    focusElement = parentElement.nextElementSibling;\n                }\n                if (focusElement && focusElement.children.length) {\n                    return focusElement.children[0];\n                }\n            }\n        }\n        focusCell(cellElement, rowElement, keyCode, cellIndex) {\n            let nextCellElement;\n            if (keyCode === Keys.left) {\n                nextCellElement = cellElement.previousElementSibling;\n            }\n            else if (keyCode === Keys.right) {\n                nextCellElement = cellElement.nextElementSibling;\n            }\n            else if (keyCode === Keys.up || keyCode === Keys.down) {\n                const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n                if (nextRowElement) {\n                    const children = nextRowElement.getElementsByClassName('datatable-body-cell');\n                    if (children.length)\n                        nextCellElement = children[cellIndex];\n                }\n            }\n            if (nextCellElement)\n                nextCellElement.focus();\n        }\n        getRowSelected(row) {\n            return this.getRowSelectedIdx(row, this.selected) > -1;\n        }\n        getRowSelectedIdx(row, selected) {\n            if (!selected || !selected.length)\n                return -1;\n            const rowId = this.rowIdentity(row);\n            return selected.findIndex(r => {\n                const id = this.rowIdentity(r);\n                return id === rowId;\n            });\n        }\n    }\n    DataTableSelectionComponent.ɵfac = function DataTableSelectionComponent_Factory(t) { return new (t || DataTableSelectionComponent)(); };\n    DataTableSelectionComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: DataTableSelectionComponent, selectors: [[\"datatable-selection\"]], inputs: { rows: \"rows\", selected: \"selected\", selectEnabled: \"selectEnabled\", selectionType: \"selectionType\", rowIdentity: \"rowIdentity\", selectCheck: \"selectCheck\" }, outputs: { activate: \"activate\", select: \"select\" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function DataTableSelectionComponent_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"uc\" /* ɵɵprojectionDef */]();\n                core[\"tc\" /* ɵɵprojection */](0);\n            }\n        }, encapsulation: 2, changeDetection: 0 });\n    return DataTableSelectionComponent;\n})();\nfunction defaultSumFunc(cells) {\n    const cellsWithValues = cells.filter(cell => !!cell);\n    if (!cellsWithValues.length) {\n        return null;\n    }\n    if (cellsWithValues.some(cell => typeof cell !== 'number')) {\n        return null;\n    }\n    return cellsWithValues.reduce((res, cell) => res + cell);\n}\nfunction noopSumFunc(cells) {\n    return null;\n}\nlet swimlane_ngx_datatable_DataTableSummaryRowComponent = /*@__PURE__*/ (() => {\n    class DataTableSummaryRowComponent {\n        constructor() {\n            this.summaryRow = {};\n        }\n        ngOnChanges() {\n            if (!this.columns || !this.rows) {\n                return;\n            }\n            this.updateInternalColumns();\n            this.updateValues();\n        }\n        updateInternalColumns() {\n            this._internalColumns = this.columns.map(col => (Object.assign(Object.assign({}, col), { cellTemplate: col.summaryTemplate })));\n        }\n        updateValues() {\n            this.summaryRow = {};\n            this.columns\n                .filter(col => !col.summaryTemplate)\n                .forEach(col => {\n                const cellsFromSingleColumn = this.rows.map(row => row[col.prop]);\n                const sumFunc = this.getSummaryFunction(col);\n                this.summaryRow[col.prop] = col.pipe\n                    ? col.pipe.transform(sumFunc(cellsFromSingleColumn))\n                    : sumFunc(cellsFromSingleColumn);\n            });\n        }\n        getSummaryFunction(column) {\n            if (column.summaryFunc === undefined) {\n                return defaultSumFunc;\n            }\n            else if (column.summaryFunc === null) {\n                return noopSumFunc;\n            }\n            else {\n                return column.summaryFunc;\n            }\n        }\n    }\n    DataTableSummaryRowComponent.ɵfac = function DataTableSummaryRowComponent_Factory(t) { return new (t || DataTableSummaryRowComponent)(); };\n    DataTableSummaryRowComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: DataTableSummaryRowComponent, selectors: [[\"datatable-summary-row\"]], hostAttrs: [1, \"datatable-summary-row\"], inputs: { rows: \"rows\", columns: \"columns\", rowHeight: \"rowHeight\", offsetX: \"offsetX\", innerWidth: \"innerWidth\" }, features: [core[\"Gb\" /* ɵɵNgOnChangesFeature */]], decls: 1, vars: 1, consts: [[\"tabindex\", \"-1\", 3, \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\", 4, \"ngIf\"], [\"tabindex\", \"-1\", 3, \"innerWidth\", \"offsetX\", \"columns\", \"rowHeight\", \"row\", \"rowIndex\"]], template: function DataTableSummaryRowComponent_Template(rf, ctx) {\n            if (rf & 1) {\n                core[\"Sc\" /* ɵɵtemplate */](0, DataTableSummaryRowComponent_datatable_body_row_0_Template, 1, 6, \"datatable-body-row\", 0);\n            }\n            if (rf & 2) {\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.summaryRow && ctx._internalColumns);\n            }\n        }, directives: [common[\"n\" /* NgIf */], swimlane_ngx_datatable_DataTableBodyRowComponent], encapsulation: 2 });\n    return DataTableSummaryRowComponent;\n})();\nlet swimlane_ngx_datatable_NgxDatatableModule = /*@__PURE__*/ (() => {\n    class NgxDatatableModule {\n        /**\n         * Configure global configuration via INgxDatatableConfig\n         * @param configuration\n         */\n        static forRoot(configuration) {\n            return {\n                ngModule: NgxDatatableModule,\n                providers: [{ provide: 'configuration', useValue: configuration }]\n            };\n        }\n    }\n    NgxDatatableModule.ɵfac = function NgxDatatableModule_Factory(t) { return new (t || NgxDatatableModule)(); };\n    NgxDatatableModule.ɵmod = core[\"Ub\" /* ɵɵdefineNgModule */]({ type: NgxDatatableModule });\n    NgxDatatableModule.ɵinj = core[\"Tb\" /* ɵɵdefineInjector */]({ providers: [swimlane_ngx_datatable_ScrollbarHelper, swimlane_ngx_datatable_DimensionsHelper, swimlane_ngx_datatable_ColumnChangesService], imports: [[common[\"c\" /* CommonModule */]]] });\n    return NgxDatatableModule;\n})();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && core[\"Pc\" /* ɵɵsetNgModuleScope */](swimlane_ngx_datatable_NgxDatatableModule, { declarations: function () { return [swimlane_ngx_datatable_DataTableFooterTemplateDirective, swimlane_ngx_datatable_VisibilityDirective, swimlane_ngx_datatable_DraggableDirective, swimlane_ngx_datatable_ResizeableDirective, swimlane_ngx_datatable_OrderableDirective, swimlane_ngx_datatable_LongPressDirective, swimlane_ngx_datatable_ScrollerComponent, swimlane_ngx_datatable_DatatableComponent, swimlane_ngx_datatable_DataTableColumnDirective, swimlane_ngx_datatable_DataTableHeaderComponent, swimlane_ngx_datatable_DataTableHeaderCellComponent, swimlane_ngx_datatable_DataTableBodyComponent, swimlane_ngx_datatable_DataTableFooterComponent, swimlane_ngx_datatable_DataTablePagerComponent, swimlane_ngx_datatable_ProgressBarComponent, swimlane_ngx_datatable_DataTableBodyRowComponent, swimlane_ngx_datatable_DataTableRowWrapperComponent, swimlane_ngx_datatable_DatatableRowDetailDirective, swimlane_ngx_datatable_DatatableGroupHeaderDirective, swimlane_ngx_datatable_DatatableRowDetailTemplateDirective, swimlane_ngx_datatable_DataTableBodyCellComponent, swimlane_ngx_datatable_DataTableSelectionComponent, swimlane_ngx_datatable_DataTableColumnHeaderDirective, swimlane_ngx_datatable_DataTableColumnCellDirective, swimlane_ngx_datatable_DataTableColumnCellTreeToggle, swimlane_ngx_datatable_DatatableFooterDirective, swimlane_ngx_datatable_DatatableGroupHeaderTemplateDirective, swimlane_ngx_datatable_DataTableSummaryRowComponent]; }, imports: function () { return [common[\"c\" /* CommonModule */]]; }, exports: function () { return [swimlane_ngx_datatable_DatatableComponent, swimlane_ngx_datatable_DatatableRowDetailDirective, swimlane_ngx_datatable_DatatableGroupHeaderDirective, swimlane_ngx_datatable_DatatableRowDetailTemplateDirective, swimlane_ngx_datatable_DataTableColumnDirective, swimlane_ngx_datatable_DataTableColumnHeaderDirective, swimlane_ngx_datatable_DataTableColumnCellDirective, swimlane_ngx_datatable_DataTableColumnCellTreeToggle, swimlane_ngx_datatable_DataTableFooterTemplateDirective, swimlane_ngx_datatable_DatatableFooterDirective, swimlane_ngx_datatable_DataTablePagerComponent, swimlane_ngx_datatable_DatatableGroupHeaderTemplateDirective]; } }); })();\nvar ClickType = /*@__PURE__*/ (function (ClickType) {\n    ClickType[\"single\"] = \"single\";\n    ClickType[\"double\"] = \"double\";\n    return ClickType;\n})({});\nif (typeof document !== 'undefined' && !document.elementsFromPoint) {\n    document.elementsFromPoint = elementsFromPoint;\n}\n/*tslint:disable*/\n/**\n * Polyfill for `elementsFromPoint`\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint\n * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380\n * https://gist.github.com/oslego/7265412\n */\nfunction elementsFromPoint(x, y) {\n    const elements = [];\n    const previousPointerEvents = [];\n    let current; // TODO: window.getComputedStyle should be used with inferred type (Element)\n    let i;\n    let d;\n    //if (document === undefined) return elements;\n    // get all elements via elementFromPoint, and remove them from hit-testing in order\n    while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {\n        // push the element and its current style\n        elements.push(current);\n        previousPointerEvents.push({\n            value: current.style.getPropertyValue('pointer-events'),\n            priority: current.style.getPropertyPriority('pointer-events')\n        });\n        // add \"pointer-events: none\", to get to the underlying element\n        current.style.setProperty('pointer-events', 'none', 'important');\n    }\n    // restore the previous pointer-events values\n    for (i = previousPointerEvents.length; (d = previousPointerEvents[--i]);) {\n        elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\n    }\n    // return our results\n    return elements;\n}\n/*tslint:enable*/\n/*\n * Public API Surface of ngx-datatable\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=swimlane-ngx-datatable.js.map\n\n// EXTERNAL MODULE: ./node_modules/@angular/forms/__ivy_ngcc__/fesm2015/forms.js\nvar fesm2015_forms = __webpack_require__(\"3Pt+\");\n\n// EXTERNAL MODULE: ./node_modules/@ng-select/ng-select/__ivy_ngcc__/fesm2015/ng-select-ng-select.js + 6 modules\nvar ng_select_ng_select = __webpack_require__(\"ZOsW\");\n\n// EXTERNAL MODULE: ./node_modules/jqwidgets-ng/__ivy_ngcc__/fesm2015/jqwidgets-ng-jqxgrid.js\nvar jqwidgets_ng_jqxgrid = __webpack_require__(\"aSZe\");\n\n// EXTERNAL MODULE: ./node_modules/jqwidgets-ng/__ivy_ngcc__/fesm2015/jqwidgets-ng-jqxmenu.js\nvar jqwidgets_ng_jqxmenu = __webpack_require__(\"7M0M\");\n\n// EXTERNAL MODULE: ./node_modules/ng-fallimg/__ivy_ngcc__/fesm2015/ng-fallimg.js\nvar ng_fallimg = __webpack_require__(\"wjyA\");\n\n// EXTERNAL MODULE: ./node_modules/@ng-bootstrap/ng-bootstrap/__ivy_ngcc__/fesm2015/ng-bootstrap.js + 5 modules\nvar ng_bootstrap = __webpack_require__(\"1kSV\");\n\n// EXTERNAL MODULE: ./node_modules/ngx-currency/__ivy_ngcc__/fesm2015/ngx-currency.js\nvar ngx_currency = __webpack_require__(\"TT0I\");\n\n// EXTERNAL MODULE: ./node_modules/ngx-spinner/__ivy_ngcc__/fesm2015/ngx-spinner.js\nvar ngx_spinner = __webpack_require__(\"JqCM\");\n\n// EXTERNAL MODULE: ./src/app/core/core.module.ts\nvar core_module = __webpack_require__(\"pKmL\");\n\n// EXTERNAL MODULE: ./node_modules/@ngx-translate/core/__ivy_ngcc__/fesm2015/ngx-translate-core.js\nvar ngx_translate_core = __webpack_require__(\"sYmb\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js\nvar fesm2015_http = __webpack_require__(\"tk/3\");\n\n// EXTERNAL MODULE: ./node_modules/@ngx-translate/http-loader/__ivy_ngcc__/fesm2015/ngx-translate-http-loader.js\nvar ngx_translate_http_loader = __webpack_require__(\"mqiu\");\n\n// EXTERNAL MODULE: ./node_modules/ngx-ui-switch/__ivy_ngcc__/ui-switch.es2015.js\nvar ui_switch_es2015 = __webpack_require__(\"S2BM\");\n\n// EXTERNAL MODULE: ./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js + 4 modules\nvar fesm2015_router = __webpack_require__(\"tyNb\");\n\n// CONCATENATED MODULE: ./src/app/users/users.component.ts\n\r\n\r\nlet users_component_UsersComponent = /*@__PURE__*/ (() => {\r\n    class UsersComponent {\r\n    }\r\n    UsersComponent.ɵfac = function UsersComponent_Factory(t) { return new (t || UsersComponent)(); };\r\n    UsersComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: UsersComponent, selectors: [[\"app-users\"]], decls: 1, vars: 0, template: function UsersComponent_Template(rf, ctx) {\r\n            if (rf & 1) {\r\n                core[\"Xb\" /* ɵɵelement */](0, \"router-outlet\");\r\n            }\r\n        }, directives: [fesm2015_router[\"g\" /* RouterOutlet */]], encapsulation: 2 });\r\n    return UsersComponent;\r\n})();\r\n\n// EXTERNAL MODULE: ./src/app/core/data/custom-grid/jqx-custom-grid.component.ts\nvar jqx_custom_grid_component = __webpack_require__(\"py8Q\");\n\n// EXTERNAL MODULE: ./src/app/utils/index.ts + 2 modules\nvar utils = __webpack_require__(\"YMfE\");\n\n// CONCATENATED MODULE: ./src/app/users/users-list/users-list.component.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst users_list_component_c0 = [\"customGrid\"];\r\nconst users_list_component_c1 = [\"searchField\"];\r\nfunction UsersListComponent_div_66_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        const _r5 = core[\"dc\" /* ɵɵgetCurrentView */]();\r\n        core[\"cc\" /* ɵɵelementStart */](0, \"div\");\r\n        core[\"cc\" /* ɵɵelementStart */](1, \"button\", 21);\r\n        core[\"mc\" /* ɵɵlistener */](\"click\", function UsersListComponent_div_66_Template_button_click_1_listener() { core[\"Lc\" /* ɵɵrestoreView */](_r5); const ctx_r4 = core[\"oc\" /* ɵɵnextContext */](); return ctx_r4.importData(); });\r\n        core[\"Xb\" /* ɵɵelement */](2, \"i\", 33);\r\n        core[\"Uc\" /* ɵɵtext */](3);\r\n        core[\"pc\" /* ɵɵpipe */](4, \"translate\");\r\n        core[\"bc\" /* ɵɵelementEnd */]();\r\n        core[\"bc\" /* ɵɵelementEnd */]();\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r1 = core[\"oc\" /* ɵɵnextContext */]();\r\n        core[\"Ib\" /* ɵɵadvance */](1);\r\n        core[\"vc\" /* ɵɵproperty */](\"disabled\", ctx_r1.loading);\r\n        core[\"Ib\" /* ɵɵadvance */](2);\r\n        core[\"Wc\" /* ɵɵtextInterpolate1 */](\" \", core[\"qc\" /* ɵɵpipeBind1 */](4, 2, \"buttons.import\"), \" \");\r\n    }\r\n}\r\nlet users_list_component_UsersListComponent = /*@__PURE__*/ (() => {\r\n    class UsersListComponent extends jqx_custom_grid_component[\"a\" /* JqxCustomGridComponent */] {\r\n        constructor(msg, api, router, translate, aRouter) {\r\n            super(msg, api, router, translate, aRouter);\r\n            this.msg = msg;\r\n            this.api = api;\r\n            this.router = router;\r\n            this.translate = translate;\r\n            this.aRouter = aRouter;\r\n            this.title = 'Lista de usuarios';\r\n        }\r\n        ngOnInit() {\r\n            this.changeLanguage(this.activeLang);\r\n        }\r\n        ngAfterViewInit() {\r\n            const ts = this;\r\n            ts.crudApi = {\r\n                create: '/users/create',\r\n                read: '/users/read',\r\n                update: '/users/update/',\r\n                delete: '/users/delete/'\r\n            };\r\n            ts.showActions = true;\r\n            ts.showRowNumber = true;\r\n            ts.pagesize = 10;\r\n            ts.datafields = [\r\n                { name: 'active', type: 'bool' },\r\n                { name: 'logo', type: 'string' },\r\n                { name: 'email', type: 'string' },\r\n                { name: 'first_name', type: 'string' },\r\n                { name: 'last_name', type: 'string' },\r\n                { name: 'user_type', type: 'string' },\r\n                { name: 'type_id', type: 'number' },\r\n                { name: 'id', type: 'number' },\r\n            ];\r\n            ts.sourceColumns =\r\n                [\r\n                    { text: 'Nombre', datafield: 'first_name', align: 'center', cellsalign: 'left', minWidth: 200 },\r\n                    { text: 'Apeillido', datafield: 'last_name', align: 'center', cellsalign: 'left', minWidth: 200 },\r\n                    { text: 'Usuario', align: 'center', datafield: 'email', minWidth: 150, width: 200 },\r\n                    { text: 'Tipo', align: 'center', datafield: 'user_type', minWidth: 100, width: 150 },\r\n                    { text: 'Activo', align: 'center', datafield: 'active', minWidth: 50, width: 90, columntype: 'checkbox', threestatecheckbox: true },\r\n                ];\r\n            this.prepareGrid();\r\n        }\r\n        createData() {\r\n            const ts = this;\r\n            super.createData();\r\n            ts.goRoute('users/create');\r\n        }\r\n        editData(data) {\r\n            super.editData(data);\r\n            this.goRoute(`users/edit/${data.id}`);\r\n        }\r\n    }\r\n    UsersListComponent.ɵfac = function UsersListComponent_Factory(t) { return new (t || UsersListComponent)(core[\"Wb\" /* ɵɵdirectiveInject */](utils[\"b\" /* MessagesService */]), core[\"Wb\" /* ɵɵdirectiveInject */](utils[\"a\" /* ApiServerService */]), core[\"Wb\" /* ɵɵdirectiveInject */](fesm2015_router[\"c\" /* Router */]), core[\"Wb\" /* ɵɵdirectiveInject */](ngx_translate_core[\"d\" /* TranslateService */]), core[\"Wb\" /* ɵɵdirectiveInject */](fesm2015_router[\"a\" /* ActivatedRoute */])); };\r\n    UsersListComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: UsersListComponent, selectors: [[\"app-users-list\"]], viewQuery: function UsersListComponent_Query(rf, ctx) {\r\n            if (rf & 1) {\r\n                core[\"Zc\" /* ɵɵviewQuery */](users_list_component_c0, 1);\r\n                core[\"Zc\" /* ɵɵviewQuery */](users_list_component_c1, 1);\r\n            }\r\n            if (rf & 2) {\r\n                let _t;\r\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.customGrid = _t.first);\r\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.searchField = _t.first);\r\n            }\r\n        }, features: [core[\"Fb\" /* ɵɵInheritDefinitionFeature */]], decls: 77, vars: 38, consts: [[1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"menuExport\"], [1, \"space-right\"], [1, \"btn\", \"btn-danger\", \"round\", \"mr-1\", \"mb-1\", 3, \"disabled\", \"click\"], [1, \"fa\", \"fa-sync\", \"mr-1\", \"fas-fa-22\"], [1, \"myMenu\", \"space-right\"], [1, \"clearColor\", 3, \"height\", \"onItemclick\"], [\"myMenu\", \"\"], [\"id\", \"Exports\"], [1, \"fas\", \"fa-cog\", \"fas-fa-22\", \"fas-fa-red\"], [\"href\", \"javascript:void(0)\"], [2, \"width\", \"200px\"], [1, \"fas\", \"fa-file-excel\", \"fas-fa-xls\"], [1, \"fas\", \"fa-file-csv\", \"fas-fa-xls\"], [\"type\", \"separator\"], [1, \"fas\", \"fa-file-pdf\", \"fas-fa-pdf\"], [1, \"fas\", \"fa-file-code\", \"fas-fa-code\"], [1, \"fas\", \"fa-print\", \"fas-fa-print\"], [1, \"margin-left\", \"space-right\"], [1, \"btn\", \"btn-success\", \"round\", \"mr-1\", \"mb-1\", 3, \"disabled\", \"click\"], [1, \"fa\", \"fa-plus\", \"mr-1\", \"fas-fa-22\"], [4, \"ngIf\"], [1, \"container-fluid\"], [1, \"input-group\"], [\"type\", \"text\", \"autofocus\", \"\", 1, \"form-control\", 3, \"placeholder\", \"keyup\"], [\"searchField\", \"\"], [1, \"input-group-append\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\", \"click\"], [1, \"fa\", \"fa-search\"], [\"width\", \"100%\", 3, \"disabled\", \"auto-create\", \"onCellselect\", \"onBindingcomplete\"], [\"customGrid\", \"\"], [1, \"fa\", \"fa-upload\", \"mr-1\", \"fas-fa-22\"]], template: function UsersListComponent_Template(rf, ctx) {\r\n            if (rf & 1) {\r\n                core[\"cc\" /* ɵɵelementStart */](0, \"div\", 0);\r\n                core[\"cc\" /* ɵɵelementStart */](1, \"div\", 1);\r\n                core[\"cc\" /* ɵɵelementStart */](2, \"h4\", 2);\r\n                core[\"Uc\" /* ɵɵtext */](3);\r\n                core[\"pc\" /* ɵɵpipe */](4, \"uppercase\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](5, \"div\", 0);\r\n                core[\"cc\" /* ɵɵelementStart */](6, \"div\", 3);\r\n                core[\"cc\" /* ɵɵelementStart */](7, \"div\", 4);\r\n                core[\"cc\" /* ɵɵelementStart */](8, \"button\", 5);\r\n                core[\"mc\" /* ɵɵlistener */](\"click\", function UsersListComponent_Template_button_click_8_listener() { return ctx.searchQuery(); });\r\n                core[\"Xb\" /* ɵɵelement */](9, \"i\", 6);\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](10, \"div\", 7);\r\n                core[\"cc\" /* ɵɵelementStart */](11, \"jqxMenu\", 8, 9);\r\n                core[\"mc\" /* ɵɵlistener */](\"onItemclick\", function UsersListComponent_Template_jqxMenu_onItemclick_11_listener($event) { return ctx.itemclick($event); });\r\n                core[\"cc\" /* ɵɵelementStart */](13, \"ul\");\r\n                core[\"cc\" /* ɵɵelementStart */](14, \"li\", 10);\r\n                core[\"Xb\" /* ɵɵelement */](15, \"i\", 11);\r\n                core[\"Xb\" /* ɵɵelement */](16, \"a\", 12);\r\n                core[\"cc\" /* ɵɵelementStart */](17, \"ul\", 13);\r\n                core[\"cc\" /* ɵɵelementStart */](18, \"li\");\r\n                core[\"cc\" /* ɵɵelementStart */](19, \"a\", 12);\r\n                core[\"Xb\" /* ɵɵelement */](20, \"i\", 14);\r\n                core[\"Uc\" /* ɵɵtext */](21);\r\n                core[\"pc\" /* ɵɵpipe */](22, \"translate\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](23, \"li\");\r\n                core[\"cc\" /* ɵɵelementStart */](24, \"a\", 12);\r\n                core[\"Xb\" /* ɵɵelement */](25, \"i\", 15);\r\n                core[\"Uc\" /* ɵɵtext */](26);\r\n                core[\"pc\" /* ɵɵpipe */](27, \"translate\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](28, \"li\");\r\n                core[\"cc\" /* ɵɵelementStart */](29, \"a\", 12);\r\n                core[\"Xb\" /* ɵɵelement */](30, \"i\", 14);\r\n                core[\"Uc\" /* ɵɵtext */](31);\r\n                core[\"pc\" /* ɵɵpipe */](32, \"translate\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"Xb\" /* ɵɵelement */](33, \"li\", 16);\r\n                core[\"cc\" /* ɵɵelementStart */](34, \"li\");\r\n                core[\"cc\" /* ɵɵelementStart */](35, \"a\", 12);\r\n                core[\"Xb\" /* ɵɵelement */](36, \"i\", 17);\r\n                core[\"Uc\" /* ɵɵtext */](37);\r\n                core[\"pc\" /* ɵɵpipe */](38, \"translate\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"Xb\" /* ɵɵelement */](39, \"li\", 16);\r\n                core[\"cc\" /* ɵɵelementStart */](40, \"li\");\r\n                core[\"cc\" /* ɵɵelementStart */](41, \"a\", 12);\r\n                core[\"Xb\" /* ɵɵelement */](42, \"i\", 18);\r\n                core[\"Uc\" /* ɵɵtext */](43);\r\n                core[\"pc\" /* ɵɵpipe */](44, \"translate\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](45, \"li\");\r\n                core[\"cc\" /* ɵɵelementStart */](46, \"a\", 12);\r\n                core[\"Xb\" /* ɵɵelement */](47, \"i\", 18);\r\n                core[\"Uc\" /* ɵɵtext */](48);\r\n                core[\"pc\" /* ɵɵpipe */](49, \"translate\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](50, \"li\");\r\n                core[\"cc\" /* ɵɵelementStart */](51, \"a\", 12);\r\n                core[\"Xb\" /* ɵɵelement */](52, \"i\", 18);\r\n                core[\"Uc\" /* ɵɵtext */](53);\r\n                core[\"pc\" /* ɵɵpipe */](54, \"translate\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"Xb\" /* ɵɵelement */](55, \"li\", 16);\r\n                core[\"cc\" /* ɵɵelementStart */](56, \"li\");\r\n                core[\"cc\" /* ɵɵelementStart */](57, \"a\", 12);\r\n                core[\"Xb\" /* ɵɵelement */](58, \"i\", 19);\r\n                core[\"Uc\" /* ɵɵtext */](59);\r\n                core[\"pc\" /* ɵɵpipe */](60, \"translate\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](61, \"div\", 20);\r\n                core[\"cc\" /* ɵɵelementStart */](62, \"button\", 21);\r\n                core[\"mc\" /* ɵɵlistener */](\"click\", function UsersListComponent_Template_button_click_62_listener() { return ctx.createData(); });\r\n                core[\"Xb\" /* ɵɵelement */](63, \"i\", 22);\r\n                core[\"Uc\" /* ɵɵtext */](64);\r\n                core[\"pc\" /* ɵɵpipe */](65, \"translate\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"Sc\" /* ɵɵtemplate */](66, UsersListComponent_div_66_Template, 5, 4, \"div\", 23);\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](67, \"div\", 24);\r\n                core[\"cc\" /* ɵɵelementStart */](68, \"fieldset\");\r\n                core[\"cc\" /* ɵɵelementStart */](69, \"div\", 25);\r\n                core[\"cc\" /* ɵɵelementStart */](70, \"input\", 26, 27);\r\n                core[\"mc\" /* ɵɵlistener */](\"keyup\", function UsersListComponent_Template_input_keyup_70_listener($event) { return ctx.inputKey($event); });\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](72, \"div\", 28);\r\n                core[\"cc\" /* ɵɵelementStart */](73, \"button\", 29);\r\n                core[\"mc\" /* ɵɵlistener */](\"click\", function UsersListComponent_Template_button_click_73_listener() { return ctx.searchQuery(); });\r\n                core[\"Xb\" /* ɵɵelement */](74, \"i\", 30);\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](75, \"jqxGrid\", 31, 32);\r\n                core[\"mc\" /* ɵɵlistener */](\"onCellselect\", function UsersListComponent_Template_jqxGrid_onCellselect_75_listener($event) { return ctx.cellClick($event); })(\"onBindingcomplete\", function UsersListComponent_Template_jqxGrid_onBindingcomplete_75_listener($event) { return ctx.Bindingcomplete($event); });\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n            }\r\n            if (rf & 2) {\r\n                core[\"Ib\" /* ɵɵadvance */](3);\r\n                core[\"Vc\" /* ɵɵtextInterpolate */](core[\"qc\" /* ɵɵpipeBind1 */](4, 18, ctx.title));\r\n                core[\"Ib\" /* ɵɵadvance */](5);\r\n                core[\"vc\" /* ɵɵproperty */](\"disabled\", ctx.loading);\r\n                core[\"Ib\" /* ɵɵadvance */](3);\r\n                core[\"vc\" /* ɵɵproperty */](\"height\", 36);\r\n                core[\"Ib\" /* ɵɵadvance */](10);\r\n                core[\"Vc\" /* ɵɵtextInterpolate */](core[\"qc\" /* ɵɵpipeBind1 */](22, 20, \"export.excel\"));\r\n                core[\"Ib\" /* ɵɵadvance */](5);\r\n                core[\"Vc\" /* ɵɵtextInterpolate */](core[\"qc\" /* ɵɵpipeBind1 */](27, 22, \"export.csv\"));\r\n                core[\"Ib\" /* ɵɵadvance */](5);\r\n                core[\"Vc\" /* ɵɵtextInterpolate */](core[\"qc\" /* ɵɵpipeBind1 */](32, 24, \"export.xml\"));\r\n                core[\"Ib\" /* ɵɵadvance */](6);\r\n                core[\"Vc\" /* ɵɵtextInterpolate */](core[\"qc\" /* ɵɵpipeBind1 */](38, 26, \"export.pdf\"));\r\n                core[\"Ib\" /* ɵɵadvance */](6);\r\n                core[\"Vc\" /* ɵɵtextInterpolate */](core[\"qc\" /* ɵɵpipeBind1 */](44, 28, \"export.html\"));\r\n                core[\"Ib\" /* ɵɵadvance */](5);\r\n                core[\"Vc\" /* ɵɵtextInterpolate */](core[\"qc\" /* ɵɵpipeBind1 */](49, 30, \"export.json\"));\r\n                core[\"Ib\" /* ɵɵadvance */](5);\r\n                core[\"Vc\" /* ɵɵtextInterpolate */](core[\"qc\" /* ɵɵpipeBind1 */](54, 32, \"export.tsv\"));\r\n                core[\"Ib\" /* ɵɵadvance */](6);\r\n                core[\"Vc\" /* ɵɵtextInterpolate */](core[\"qc\" /* ɵɵpipeBind1 */](60, 34, \"export.print\"));\r\n                core[\"Ib\" /* ɵɵadvance */](3);\r\n                core[\"vc\" /* ɵɵproperty */](\"disabled\", ctx.loading);\r\n                core[\"Ib\" /* ɵɵadvance */](2);\r\n                core[\"Wc\" /* ɵɵtextInterpolate1 */](\" \", core[\"qc\" /* ɵɵpipeBind1 */](65, 36, \"buttons.new\"), \" \");\r\n                core[\"Ib\" /* ɵɵadvance */](2);\r\n                core[\"vc\" /* ɵɵproperty */](\"ngIf\", ctx.useImport);\r\n                core[\"Ib\" /* ɵɵadvance */](4);\r\n                core[\"vc\" /* ɵɵproperty */](\"placeholder\", ctx.placeholderSearch);\r\n                core[\"Ib\" /* ɵɵadvance */](3);\r\n                core[\"vc\" /* ɵɵproperty */](\"disabled\", ctx.loading);\r\n                core[\"Ib\" /* ɵɵadvance */](2);\r\n                core[\"vc\" /* ɵɵproperty */](\"disabled\", ctx.loading)(\"auto-create\", false);\r\n            }\r\n        }, directives: [jqwidgets_ng_jqxmenu[\"a\" /* jqxMenuComponent */], common[\"n\" /* NgIf */], jqwidgets_ng_jqxgrid[\"a\" /* jqxGridComponent */]], pipes: [common[\"v\" /* UpperCasePipe */], ngx_translate_core[\"c\" /* TranslatePipe */]], encapsulation: 2 });\r\n    return UsersListComponent;\r\n})();\r\n\n// EXTERNAL MODULE: ./src/app/core/components/forms/form.component.ts\nvar form_component = __webpack_require__(\"TK7J\");\n\n// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/map.js\nvar map = __webpack_require__(\"rdQv\");\n\n// EXTERNAL MODULE: ./src/app/utils/api-server.service.ts\nvar api_server_service = __webpack_require__(\"C6Ca\");\n\n// CONCATENATED MODULE: ./src/app/services/users/users.service.ts\n\r\n\r\n\r\nlet users_service_UsersService = /*@__PURE__*/ (() => {\r\n    class UsersService {\r\n        constructor(api) {\r\n            this.api = api;\r\n        }\r\n        getUserTpes() {\r\n            const ts = this;\r\n            return ts.api.get(`/users/types`)\r\n                .pipe(Object(map[\"a\" /* map */])((resp) => {\r\n                return resp.records;\r\n            }));\r\n        }\r\n        getProfile() {\r\n            const ts = this;\r\n            return ts.api.get(`/users/profile`)\r\n                .pipe(Object(map[\"a\" /* map */])((resp) => {\r\n                return resp.records;\r\n            }));\r\n        }\r\n        getData(params) {\r\n            const ts = this;\r\n            return ts.api.get(`/users/read`, params)\r\n                .pipe(Object(map[\"a\" /* map */])((resp) => {\r\n                return resp.records;\r\n            }));\r\n        }\r\n    }\r\n    UsersService.ɵfac = function UsersService_Factory(t) { return new (t || UsersService)(core[\"jc\" /* ɵɵinject */](api_server_service[\"a\" /* ApiServerService */])); };\r\n    UsersService.ɵprov = core[\"Sb\" /* ɵɵdefineInjectable */]({ token: UsersService, factory: UsersService.ɵfac, providedIn: 'root' });\r\n    return UsersService;\r\n})();\r\n\n// EXTERNAL MODULE: ./src/app/core/components/forms/footer-form/footer-form.component.ts\nvar footer_form_component = __webpack_require__(\"uHPU\");\n\n// CONCATENATED MODULE: ./src/app/users/users-edit/users-edit.component.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst users_edit_component_c0 = [\"uploadFile\"];\r\nconst users_edit_component_c1 = [\"imgUp\"];\r\nconst users_edit_component_c2 = [\"focusElement\"];\r\nfunction UsersEditComponent_ng_option_44_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        core[\"cc\" /* ɵɵelementStart */](0, \"ng-option\", 35);\r\n        core[\"Uc\" /* ɵɵtext */](1);\r\n        core[\"bc\" /* ɵɵelementEnd */]();\r\n    }\r\n    if (rf & 2) {\r\n        const item_r3 = ctx.$implicit;\r\n        core[\"vc\" /* ɵɵproperty */](\"value\", item_r3.id);\r\n        core[\"Ib\" /* ɵɵadvance */](1);\r\n        core[\"Wc\" /* ɵɵtextInterpolate1 */](\" \", item_r3.user_type_name, \" \");\r\n    }\r\n}\r\nlet users_edit_component_UsersEditComponent = /*@__PURE__*/ (() => {\r\n    class UsersEditComponent extends form_component[\"a\" /* FormComponent */] {\r\n        constructor(fb, api, msg, router, translate, aRouter, spinner, usersSer) {\r\n            super(fb, msg, api, router, translate, aRouter, spinner);\r\n            this.fb = fb;\r\n            this.api = api;\r\n            this.msg = msg;\r\n            this.router = router;\r\n            this.translate = translate;\r\n            this.aRouter = aRouter;\r\n            this.spinner = spinner;\r\n            this.usersSer = usersSer;\r\n            this.userTypes = [];\r\n            this.title = 'Editar usuario';\r\n            this.customForm = this.fb.group({\r\n                type_id: [1, [fesm2015_forms[\"y\" /* Validators */].required]],\r\n                first_name: ['', [fesm2015_forms[\"y\" /* Validators */].required]],\r\n                last_name: ['', [fesm2015_forms[\"y\" /* Validators */].required]],\r\n                active: [true, [fesm2015_forms[\"y\" /* Validators */].required]],\r\n                email: ['', [fesm2015_forms[\"y\" /* Validators */].pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')]]\r\n            });\r\n        }\r\n        // VALIDATION\r\n        get invalidEmail() {\r\n            return this.isInvalid('email');\r\n        }\r\n        get invalidLastName() {\r\n            return this.isInvalid('last_name');\r\n        }\r\n        get invalidFirstName() {\r\n            return this.isInvalid('first_name');\r\n        }\r\n        ngOnInit() {\r\n            super.ngOnInit();\r\n            const ts = this;\r\n            ts.PutURL = '/users/update/';\r\n            ts.PostURL = '/users/create';\r\n            ts.showSpinner();\r\n            ts.usersSer.getUserTpes().subscribe((resp) => {\r\n                ts.userTypes = resp;\r\n            });\r\n        }\r\n        ngAfterViewInit() {\r\n            super.ngAfterViewInit();\r\n            this.hideSpinner();\r\n        }\r\n        loadData(id = 0) {\r\n            super.loadData(id);\r\n            const ts = this;\r\n            const frm = ts.customForm;\r\n            ts.editing = true;\r\n            ts.usersSer.getData({ uid: id }).subscribe((resp) => {\r\n                ts.hideSpinner();\r\n                frm.setValue({\r\n                    type_id: resp[0].type_id,\r\n                    last_name: resp[0].last_name,\r\n                    first_name: resp[0].first_name,\r\n                    active: resp[0].active,\r\n                    email: resp[0].email,\r\n                });\r\n                ts.imgData = resp[0].avatar ? resp[0].avatar : '';\r\n            }, () => ts.hideSpinner());\r\n        }\r\n        onResetForm() {\r\n            const ts = this;\r\n            let frm = ts.customForm;\r\n            super.onResetForm(frm);\r\n            frm.setValue({\r\n                type_id: 1,\r\n                first_name: '',\r\n                last_name: '',\r\n                active: true,\r\n                email: '',\r\n            });\r\n            ts.imgData = '';\r\n        }\r\n    }\r\n    UsersEditComponent.ɵfac = function UsersEditComponent_Factory(t) { return new (t || UsersEditComponent)(core[\"Wb\" /* ɵɵdirectiveInject */](fesm2015_forms[\"e\" /* FormBuilder */]), core[\"Wb\" /* ɵɵdirectiveInject */](utils[\"a\" /* ApiServerService */]), core[\"Wb\" /* ɵɵdirectiveInject */](utils[\"b\" /* MessagesService */]), core[\"Wb\" /* ɵɵdirectiveInject */](fesm2015_router[\"c\" /* Router */]), core[\"Wb\" /* ɵɵdirectiveInject */](ngx_translate_core[\"d\" /* TranslateService */]), core[\"Wb\" /* ɵɵdirectiveInject */](fesm2015_router[\"a\" /* ActivatedRoute */]), core[\"Wb\" /* ɵɵdirectiveInject */](ngx_spinner[\"c\" /* NgxSpinnerService */]), core[\"Wb\" /* ɵɵdirectiveInject */](users_service_UsersService)); };\r\n    UsersEditComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: UsersEditComponent, selectors: [[\"app-users-edit\"]], viewQuery: function UsersEditComponent_Query(rf, ctx) {\r\n            if (rf & 1) {\r\n                core[\"Zc\" /* ɵɵviewQuery */](users_edit_component_c0, 1);\r\n                core[\"Zc\" /* ɵɵviewQuery */](users_edit_component_c1, 1);\r\n                core[\"Zc\" /* ɵɵviewQuery */](users_edit_component_c2, 1);\r\n            }\r\n            if (rf & 2) {\r\n                let _t;\r\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.uploadFile = _t.first);\r\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.imgUp = _t.first);\r\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.focusElement = _t.first);\r\n            }\r\n        }, features: [core[\"Fb\" /* ɵɵInheritDefinitionFeature */]], decls: 52, vars: 14, consts: [[1, \"users-edit\"], [1, \"row\"], [1, \"col-12\"], [1, \"card\"], [1, \"card-content\"], [1, \"card-header\"], [1, \"card-body\"], [\"id\", \"account\", 1, \"mt-2\"], [1, \"media\"], [\"alt\", \"Avatar\", \"height\", \"64\", \"width\", \"64\", \"fallimg\", \"\", 1, \"users-avatar-shadow\", \"avatar\", \"mr-3\", \"rounded-circle\", 3, \"src\"], [1, \"media-body\"], [1, \"d-flex\", \"flex-sm-row\", \"flex-column\", \"justify-content-start\", \"px-0\", \"mb-sm-2\"], [1, \"form-group\"], [\"type\", \"file\", \"id\", \"file\", 1, \"form-control-file\", 3, \"change\"], [\"uploadFile\", \"\"], [3, \"formGroup\"], [1, \"col-12\", \"col-md-6\"], [1, \"controls\"], [\"for\", \"users-edit-username\"], [\"type\", \"email\", \"id\", \"users-edit-username\", \"required\", \"\", \"aria-invalid\", \"false\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"readOnly\"], [\"focusElement\", \"\"], [1, \"col-12\", \"col-md-3\"], [\"for\", \"first-name\"], [\"type\", \"text\", \"id\", \"first-name\", \"required\", \"\", \"aria-invalid\", \"false\", \"formControlName\", \"first_name\", 1, \"form-control\"], [\"for\", \"last-name\"], [\"type\", \"text\", \"id\", \"last-name\", \"required\", \"\", \"aria-invalid\", \"false\", \"formControlName\", \"last_name\", 1, \"form-control\"], [1, \"col-12\", \"col-md-8\"], [\"formControlName\", \"type_id\", 3, \"readonly\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-12\", \"col-md-4\"], [1, \"form-group\", \"custom-control-inline\", \"mb-1\", \"mb-xl-0\", \"switchery-success\", \"align-items-center\"], [\"checked\", \"\", \"size\", \"large\", \"formControlName\", \"active\", 1, \"switchery\"], [\"for\", \"switchery\", 1, \"ml-2\"], [1, \"card-footer\"], [3, \"saveAClose\", \"closeEvent\", \"saveAndCreateEvent\", \"saveAndCloseEvent\"], [3, \"value\"]], template: function UsersEditComponent_Template(rf, ctx) {\r\n            if (rf & 1) {\r\n                core[\"cc\" /* ɵɵelementStart */](0, \"section\", 0);\r\n                core[\"cc\" /* ɵɵelementStart */](1, \"div\", 1);\r\n                core[\"cc\" /* ɵɵelementStart */](2, \"div\", 2);\r\n                core[\"cc\" /* ɵɵelementStart */](3, \"div\", 3);\r\n                core[\"cc\" /* ɵɵelementStart */](4, \"div\", 4);\r\n                core[\"cc\" /* ɵɵelementStart */](5, \"div\", 5);\r\n                core[\"cc\" /* ɵɵelementStart */](6, \"h4\");\r\n                core[\"cc\" /* ɵɵelementStart */](7, \"strong\");\r\n                core[\"Uc\" /* ɵɵtext */](8);\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](9, \"div\", 6);\r\n                core[\"cc\" /* ɵɵelementStart */](10, \"div\", 7);\r\n                core[\"cc\" /* ɵɵelementStart */](11, \"div\", 8);\r\n                core[\"Xb\" /* ɵɵelement */](12, \"img\", 9);\r\n                core[\"cc\" /* ɵɵelementStart */](13, \"div\", 10);\r\n                core[\"cc\" /* ɵɵelementStart */](14, \"h4\");\r\n                core[\"Uc\" /* ɵɵtext */](15, \"Avatar\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](16, \"div\", 11);\r\n                core[\"cc\" /* ɵɵelementStart */](17, \"div\", 12);\r\n                core[\"cc\" /* ɵɵelementStart */](18, \"input\", 13, 14);\r\n                core[\"mc\" /* ɵɵlistener */](\"change\", function UsersEditComponent_Template_input_change_18_listener($event) { return ctx.uploadImage($event); });\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](20, \"form\", 15);\r\n                core[\"cc\" /* ɵɵelementStart */](21, \"div\", 1);\r\n                core[\"cc\" /* ɵɵelementStart */](22, \"div\", 16);\r\n                core[\"cc\" /* ɵɵelementStart */](23, \"div\", 12);\r\n                core[\"cc\" /* ɵɵelementStart */](24, \"div\", 17);\r\n                core[\"cc\" /* ɵɵelementStart */](25, \"label\", 18);\r\n                core[\"Uc\" /* ɵɵtext */](26, \"Nombre de usuario\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"Xb\" /* ɵɵelement */](27, \"input\", 19, 20);\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](29, \"div\", 21);\r\n                core[\"cc\" /* ɵɵelementStart */](30, \"div\", 12);\r\n                core[\"cc\" /* ɵɵelementStart */](31, \"div\", 17);\r\n                core[\"cc\" /* ɵɵelementStart */](32, \"label\", 22);\r\n                core[\"Uc\" /* ɵɵtext */](33, \"Nombre\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"Xb\" /* ɵɵelement */](34, \"input\", 23);\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](35, \"div\", 21);\r\n                core[\"cc\" /* ɵɵelementStart */](36, \"div\", 12);\r\n                core[\"cc\" /* ɵɵelementStart */](37, \"div\", 17);\r\n                core[\"cc\" /* ɵɵelementStart */](38, \"label\", 24);\r\n                core[\"Uc\" /* ɵɵtext */](39, \"Apellido\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"Xb\" /* ɵɵelement */](40, \"input\", 25);\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](41, \"div\", 1);\r\n                core[\"cc\" /* ɵɵelementStart */](42, \"div\", 26);\r\n                core[\"cc\" /* ɵɵelementStart */](43, \"ng-select\", 27);\r\n                core[\"Sc\" /* ɵɵtemplate */](44, UsersEditComponent_ng_option_44_Template, 2, 2, \"ng-option\", 28);\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](45, \"div\", 29);\r\n                core[\"cc\" /* ɵɵelementStart */](46, \"div\", 30);\r\n                core[\"Xb\" /* ɵɵelement */](47, \"ui-switch\", 31);\r\n                core[\"cc\" /* ɵɵelementStart */](48, \"label\", 32);\r\n                core[\"Uc\" /* ɵɵtext */](49, \"Activo\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](50, \"div\", 33);\r\n                core[\"cc\" /* ɵɵelementStart */](51, \"app-footer-form\", 34);\r\n                core[\"mc\" /* ɵɵlistener */](\"closeEvent\", function UsersEditComponent_Template_app_footer_form_closeEvent_51_listener() { return ctx.cancel(); })(\"saveAndCreateEvent\", function UsersEditComponent_Template_app_footer_form_saveAndCreateEvent_51_listener() { return ctx.saveAndCreate(); })(\"saveAndCloseEvent\", function UsersEditComponent_Template_app_footer_form_saveAndCloseEvent_51_listener() { return ctx.saveAndClose(); });\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n            }\r\n            if (rf & 2) {\r\n                core[\"Ib\" /* ɵɵadvance */](8);\r\n                core[\"Wc\" /* ɵɵtextInterpolate1 */](\" \", ctx.title, \" \");\r\n                core[\"Ib\" /* ɵɵadvance */](4);\r\n                core[\"vc\" /* ɵɵproperty */](\"src\", ctx.imgData, core[\"Oc\" /* ɵɵsanitizeUrl */]);\r\n                core[\"Ib\" /* ɵɵadvance */](8);\r\n                core[\"vc\" /* ɵɵproperty */](\"formGroup\", ctx.customForm);\r\n                core[\"Ib\" /* ɵɵadvance */](7);\r\n                core[\"Ob\" /* ɵɵclassProp */](\"is-invalid\", ctx.invalidEmail);\r\n                core[\"vc\" /* ɵɵproperty */](\"readOnly\", ctx.editing);\r\n                core[\"Ib\" /* ɵɵadvance */](7);\r\n                core[\"Ob\" /* ɵɵclassProp */](\"is-invalid\", ctx.invalidFirstName);\r\n                core[\"Ib\" /* ɵɵadvance */](6);\r\n                core[\"Ob\" /* ɵɵclassProp */](\"is-invalid\", ctx.invalidLastName);\r\n                core[\"Ib\" /* ɵɵadvance */](3);\r\n                core[\"vc\" /* ɵɵproperty */](\"readonly\", ctx.editing);\r\n                core[\"Ib\" /* ɵɵadvance */](1);\r\n                core[\"vc\" /* ɵɵproperty */](\"ngForOf\", ctx.userTypes);\r\n                core[\"Ib\" /* ɵɵadvance */](7);\r\n                core[\"vc\" /* ɵɵproperty */](\"saveAClose\", ctx.saveAClose)(\"saveAClose\", ctx.saveAClose);\r\n            }\r\n        }, directives: [ng_fallimg[\"b\" /* ɵa */], fesm2015_forms[\"z\" /* ɵangular_packages_forms_forms_ba */], fesm2015_forms[\"q\" /* NgControlStatusGroup */], fesm2015_forms[\"h\" /* FormGroupDirective */], fesm2015_forms[\"c\" /* DefaultValueAccessor */], fesm2015_forms[\"w\" /* RequiredValidator */], fesm2015_forms[\"p\" /* NgControlStatus */], fesm2015_forms[\"g\" /* FormControlName */], ng_select_ng_select[\"a\" /* NgSelectComponent */], common[\"m\" /* NgForOf */], ui_switch_es2015[\"a\" /* UiSwitchComponent */], footer_form_component[\"a\" /* FooterFormComponent */], ng_select_ng_select[\"d\" /* ɵr */]], styles: [\"\"] });\r\n    return UsersEditComponent;\r\n})();\r\n\n// CONCATENATED MODULE: ./src/app/users/profile/profile.component.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst profile_component_c0 = [\"uploadFile\"];\r\nconst profile_component_c1 = [\"imgUp\"];\r\nconst profile_component_c2 = [\"focusElement\"];\r\nfunction ProfileComponent_ng_option_44_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        core[\"cc\" /* ɵɵelementStart */](0, \"ng-option\", 35);\r\n        core[\"Uc\" /* ɵɵtext */](1);\r\n        core[\"bc\" /* ɵɵelementEnd */]();\r\n    }\r\n    if (rf & 2) {\r\n        const item_r3 = ctx.$implicit;\r\n        core[\"vc\" /* ɵɵproperty */](\"value\", item_r3.id);\r\n        core[\"Ib\" /* ɵɵadvance */](1);\r\n        core[\"Wc\" /* ɵɵtextInterpolate1 */](\" \", item_r3.user_type_name, \" \");\r\n    }\r\n}\r\nlet profile_component_ProfileComponent = /*@__PURE__*/ (() => {\r\n    class ProfileComponent extends form_component[\"a\" /* FormComponent */] {\r\n        constructor(fb, api, msg, router, translate, aRouter, spinner, usersSer) {\r\n            super(fb, msg, api, router, translate, aRouter, spinner);\r\n            this.fb = fb;\r\n            this.api = api;\r\n            this.msg = msg;\r\n            this.router = router;\r\n            this.translate = translate;\r\n            this.aRouter = aRouter;\r\n            this.spinner = spinner;\r\n            this.usersSer = usersSer;\r\n            this.userTypes = [];\r\n            this.title = 'Perfil de usuario';\r\n            this.customForm = this.fb.group({\r\n                type_id: [1, [fesm2015_forms[\"y\" /* Validators */].required]],\r\n                first_name: ['', [fesm2015_forms[\"y\" /* Validators */].required]],\r\n                last_name: ['', [fesm2015_forms[\"y\" /* Validators */].required]],\r\n                active: new fesm2015_forms[\"f\" /* FormControl */]({ value: 'true', disabled: true }, fesm2015_forms[\"y\" /* Validators */].required),\r\n                email: ['', [fesm2015_forms[\"y\" /* Validators */].pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$')]]\r\n            });\r\n        }\r\n        // VALIDATION\r\n        get invalidEmail() {\r\n            return this.isInvalid('email');\r\n        }\r\n        get invalidLastName() {\r\n            return this.isInvalid('last_name');\r\n        }\r\n        get invalidFirstName() {\r\n            return this.isInvalid('first_name');\r\n        }\r\n        ngOnInit() {\r\n            super.ngOnInit();\r\n            const ts = this;\r\n            ts.PutURL = '/users/update/';\r\n            ts.PostURL = '/users/create';\r\n            ts.showSpinner();\r\n            ts.usersSer.getUserTpes().subscribe((resp) => {\r\n                ts.userTypes = resp;\r\n            });\r\n            ts.loadData();\r\n        }\r\n        loadData(id = 0) {\r\n            super.loadData(id);\r\n            const ts = this;\r\n            const frm = ts.customForm;\r\n            ts.usersSer.getProfile().subscribe((resp) => {\r\n                localStorage.setItem('oldRoute', '/');\r\n                ts.editing = true;\r\n                ts.hideSpinner();\r\n                ts.uid = resp[0].id;\r\n                frm.setValue({\r\n                    type_id: resp[0].type_id,\r\n                    last_name: resp[0].last_name,\r\n                    first_name: resp[0].first_name,\r\n                    active: resp[0].active,\r\n                    email: resp[0].email,\r\n                });\r\n                ts.imgData = resp[0].avatar ? resp[0].avatar : '';\r\n            });\r\n        }\r\n        onResetForm() {\r\n            const ts = this;\r\n            let frm = ts.customForm;\r\n            super.onResetForm(frm);\r\n            frm.setValue({\r\n                type_id: 1,\r\n                first_name: '',\r\n                last_name: '',\r\n                active: true,\r\n                email: '',\r\n            });\r\n            ts.imgData = '';\r\n        }\r\n    }\r\n    ProfileComponent.ɵfac = function ProfileComponent_Factory(t) { return new (t || ProfileComponent)(core[\"Wb\" /* ɵɵdirectiveInject */](fesm2015_forms[\"e\" /* FormBuilder */]), core[\"Wb\" /* ɵɵdirectiveInject */](utils[\"a\" /* ApiServerService */]), core[\"Wb\" /* ɵɵdirectiveInject */](utils[\"b\" /* MessagesService */]), core[\"Wb\" /* ɵɵdirectiveInject */](fesm2015_router[\"c\" /* Router */]), core[\"Wb\" /* ɵɵdirectiveInject */](ngx_translate_core[\"d\" /* TranslateService */]), core[\"Wb\" /* ɵɵdirectiveInject */](fesm2015_router[\"a\" /* ActivatedRoute */]), core[\"Wb\" /* ɵɵdirectiveInject */](ngx_spinner[\"c\" /* NgxSpinnerService */]), core[\"Wb\" /* ɵɵdirectiveInject */](users_service_UsersService)); };\r\n    ProfileComponent.ɵcmp = core[\"Qb\" /* ɵɵdefineComponent */]({ type: ProfileComponent, selectors: [[\"app-profile\"]], viewQuery: function ProfileComponent_Query(rf, ctx) {\r\n            if (rf & 1) {\r\n                core[\"Zc\" /* ɵɵviewQuery */](profile_component_c0, 1);\r\n                core[\"Zc\" /* ɵɵviewQuery */](profile_component_c1, 1);\r\n                core[\"Zc\" /* ɵɵviewQuery */](profile_component_c2, 1);\r\n            }\r\n            if (rf & 2) {\r\n                let _t;\r\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.uploadFile = _t.first);\r\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.imgUp = _t.first);\r\n                core[\"Hc\" /* ɵɵqueryRefresh */](_t = core[\"nc\" /* ɵɵloadQuery */]()) && (ctx.focusElement = _t.first);\r\n            }\r\n        }, features: [core[\"Fb\" /* ɵɵInheritDefinitionFeature */]], decls: 52, vars: 13, consts: [[1, \"users-edit\"], [1, \"row\"], [1, \"col-12\"], [1, \"card\"], [1, \"card-content\"], [1, \"card-header\"], [1, \"card-body\"], [\"id\", \"account\", 1, \"mt-2\"], [1, \"media\"], [\"alt\", \"Avatar\", \"height\", \"64\", \"width\", \"64\", \"fallimg\", \"\", 1, \"users-avatar-shadow\", \"avatar\", \"mr-3\", \"rounded-circle\", 3, \"src\"], [1, \"media-body\"], [1, \"d-flex\", \"flex-sm-row\", \"flex-column\", \"justify-content-start\", \"px-0\", \"mb-sm-2\"], [1, \"form-group\"], [\"type\", \"file\", \"id\", \"file\", 1, \"form-control-file\", 3, \"change\"], [\"uploadFile\", \"\"], [3, \"formGroup\"], [1, \"col-12\", \"col-md-6\"], [1, \"controls\"], [\"for\", \"users-edit-username\"], [\"type\", \"email\", \"id\", \"users-edit-username\", \"required\", \"\", \"aria-invalid\", \"false\", \"formControlName\", \"email\", 1, \"form-control\", 3, \"readOnly\"], [\"focusElement\", \"\"], [1, \"col-12\", \"col-md-3\"], [\"for\", \"users-edit-name\"], [\"type\", \"text\", \"id\", \"users-edit-name\", \"required\", \"\", \"aria-invalid\", \"false\", \"formControlName\", \"first_name\", 1, \"form-control\"], [\"for\", \"last-name\"], [\"type\", \"text\", \"id\", \"last-name\", \"required\", \"\", \"aria-invalid\", \"false\", \"formControlName\", \"last_name\", 1, \"form-control\"], [1, \"col-12\", \"col-md-8\"], [\"formControlName\", \"type_id\", 3, \"readonly\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-12\", \"col-md-4\"], [1, \"form-group\", \"custom-control-inline\", \"mb-1\", \"mb-xl-0\", \"switchery-success\", \"align-items-center\"], [\"checked\", \"\", \"size\", \"large\", \"formControlName\", \"active\", 1, \"switchery\"], [\"for\", \"switchery\", 1, \"ml-2\"], [1, \"card-footer\"], [3, \"showAaveACreate\", \"saveAClose\", \"closeEvent\", \"saveAndCreateEvent\", \"saveAndCloseEvent\"], [3, \"value\"]], template: function ProfileComponent_Template(rf, ctx) {\r\n            if (rf & 1) {\r\n                core[\"cc\" /* ɵɵelementStart */](0, \"section\", 0);\r\n                core[\"cc\" /* ɵɵelementStart */](1, \"div\", 1);\r\n                core[\"cc\" /* ɵɵelementStart */](2, \"div\", 2);\r\n                core[\"cc\" /* ɵɵelementStart */](3, \"div\", 3);\r\n                core[\"cc\" /* ɵɵelementStart */](4, \"div\", 4);\r\n                core[\"cc\" /* ɵɵelementStart */](5, \"div\", 5);\r\n                core[\"cc\" /* ɵɵelementStart */](6, \"h4\");\r\n                core[\"cc\" /* ɵɵelementStart */](7, \"strong\");\r\n                core[\"Uc\" /* ɵɵtext */](8);\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](9, \"div\", 6);\r\n                core[\"cc\" /* ɵɵelementStart */](10, \"div\", 7);\r\n                core[\"cc\" /* ɵɵelementStart */](11, \"div\", 8);\r\n                core[\"Xb\" /* ɵɵelement */](12, \"img\", 9);\r\n                core[\"cc\" /* ɵɵelementStart */](13, \"div\", 10);\r\n                core[\"cc\" /* ɵɵelementStart */](14, \"h4\");\r\n                core[\"Uc\" /* ɵɵtext */](15, \"Avatar\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](16, \"div\", 11);\r\n                core[\"cc\" /* ɵɵelementStart */](17, \"div\", 12);\r\n                core[\"cc\" /* ɵɵelementStart */](18, \"input\", 13, 14);\r\n                core[\"mc\" /* ɵɵlistener */](\"change\", function ProfileComponent_Template_input_change_18_listener($event) { return ctx.uploadImage($event); });\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](20, \"form\", 15);\r\n                core[\"cc\" /* ɵɵelementStart */](21, \"div\", 1);\r\n                core[\"cc\" /* ɵɵelementStart */](22, \"div\", 16);\r\n                core[\"cc\" /* ɵɵelementStart */](23, \"div\", 12);\r\n                core[\"cc\" /* ɵɵelementStart */](24, \"div\", 17);\r\n                core[\"cc\" /* ɵɵelementStart */](25, \"label\", 18);\r\n                core[\"Uc\" /* ɵɵtext */](26, \"Nombre de usuario\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"Xb\" /* ɵɵelement */](27, \"input\", 19, 20);\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](29, \"div\", 21);\r\n                core[\"cc\" /* ɵɵelementStart */](30, \"div\", 12);\r\n                core[\"cc\" /* ɵɵelementStart */](31, \"div\", 17);\r\n                core[\"cc\" /* ɵɵelementStart */](32, \"label\", 22);\r\n                core[\"Uc\" /* ɵɵtext */](33, \"Nombre\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"Xb\" /* ɵɵelement */](34, \"input\", 23);\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](35, \"div\", 21);\r\n                core[\"cc\" /* ɵɵelementStart */](36, \"div\", 12);\r\n                core[\"cc\" /* ɵɵelementStart */](37, \"div\", 17);\r\n                core[\"cc\" /* ɵɵelementStart */](38, \"label\", 24);\r\n                core[\"Uc\" /* ɵɵtext */](39, \"Apellido\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"Xb\" /* ɵɵelement */](40, \"input\", 25);\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](41, \"div\", 1);\r\n                core[\"cc\" /* ɵɵelementStart */](42, \"div\", 26);\r\n                core[\"cc\" /* ɵɵelementStart */](43, \"ng-select\", 27);\r\n                core[\"Sc\" /* ɵɵtemplate */](44, ProfileComponent_ng_option_44_Template, 2, 2, \"ng-option\", 28);\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](45, \"div\", 29);\r\n                core[\"cc\" /* ɵɵelementStart */](46, \"div\", 30);\r\n                core[\"Xb\" /* ɵɵelement */](47, \"ui-switch\", 31);\r\n                core[\"cc\" /* ɵɵelementStart */](48, \"label\", 32);\r\n                core[\"Uc\" /* ɵɵtext */](49, \"Activo\");\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"cc\" /* ɵɵelementStart */](50, \"div\", 33);\r\n                core[\"cc\" /* ɵɵelementStart */](51, \"app-footer-form\", 34);\r\n                core[\"mc\" /* ɵɵlistener */](\"closeEvent\", function ProfileComponent_Template_app_footer_form_closeEvent_51_listener() { return ctx.cancel(); })(\"saveAndCreateEvent\", function ProfileComponent_Template_app_footer_form_saveAndCreateEvent_51_listener() { return ctx.saveAndCreate(); })(\"saveAndCloseEvent\", function ProfileComponent_Template_app_footer_form_saveAndCloseEvent_51_listener() { return ctx.saveAndClose(); });\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n                core[\"bc\" /* ɵɵelementEnd */]();\r\n            }\r\n            if (rf & 2) {\r\n                core[\"Ib\" /* ɵɵadvance */](8);\r\n                core[\"Wc\" /* ɵɵtextInterpolate1 */](\" \", ctx.title, \" \");\r\n                core[\"Ib\" /* ɵɵadvance */](4);\r\n                core[\"vc\" /* ɵɵproperty */](\"src\", ctx.imgData, core[\"Oc\" /* ɵɵsanitizeUrl */]);\r\n                core[\"Ib\" /* ɵɵadvance */](8);\r\n                core[\"vc\" /* ɵɵproperty */](\"formGroup\", ctx.customForm);\r\n                core[\"Ib\" /* ɵɵadvance */](7);\r\n                core[\"vc\" /* ɵɵproperty */](\"readOnly\", ctx.editing);\r\n                core[\"Ib\" /* ɵɵadvance */](7);\r\n                core[\"Ob\" /* ɵɵclassProp */](\"is-invalid\", ctx.invalidFirstName);\r\n                core[\"Ib\" /* ɵɵadvance */](6);\r\n                core[\"Ob\" /* ɵɵclassProp */](\"is-invalid\", ctx.invalidLastName);\r\n                core[\"Ib\" /* ɵɵadvance */](3);\r\n                core[\"vc\" /* ɵɵproperty */](\"readonly\", ctx.editing);\r\n                core[\"Ib\" /* ɵɵadvance */](1);\r\n                core[\"vc\" /* ɵɵproperty */](\"ngForOf\", ctx.userTypes);\r\n                core[\"Ib\" /* ɵɵadvance */](7);\r\n                core[\"vc\" /* ɵɵproperty */](\"showAaveACreate\", false)(\"saveAClose\", ctx.saveAClose)(\"saveAClose\", ctx.saveAClose);\r\n            }\r\n        }, directives: [ng_fallimg[\"b\" /* ɵa */], fesm2015_forms[\"z\" /* ɵangular_packages_forms_forms_ba */], fesm2015_forms[\"q\" /* NgControlStatusGroup */], fesm2015_forms[\"h\" /* FormGroupDirective */], fesm2015_forms[\"c\" /* DefaultValueAccessor */], fesm2015_forms[\"w\" /* RequiredValidator */], fesm2015_forms[\"p\" /* NgControlStatus */], fesm2015_forms[\"g\" /* FormControlName */], ng_select_ng_select[\"a\" /* NgSelectComponent */], common[\"m\" /* NgForOf */], ui_switch_es2015[\"a\" /* UiSwitchComponent */], footer_form_component[\"a\" /* FooterFormComponent */], ng_select_ng_select[\"d\" /* ɵr */]], styles: [\"\"] });\r\n    return ProfileComponent;\r\n})();\r\n\n// CONCATENATED MODULE: ./src/app/users/index.ts\n\r\n\r\n\r\n\n// CONCATENATED MODULE: ./src/app/users/users-routing.module.ts\n\r\n\r\n\r\n\r\n\r\nconst routes = [{\r\n        path: '',\r\n        component: users_component_UsersComponent,\r\n        children: [\r\n            {\r\n                path: 'list',\r\n                component: users_list_component_UsersListComponent,\r\n            },\r\n            {\r\n                path: 'create',\r\n                component: users_edit_component_UsersEditComponent\r\n            },\r\n            {\r\n                path: 'edit/:id',\r\n                component: users_edit_component_UsersEditComponent\r\n            },\r\n            {\r\n                path: 'profile',\r\n                component: profile_component_ProfileComponent,\r\n            },\r\n        ],\r\n    }];\r\nlet users_routing_module_UsersRoutingModule = /*@__PURE__*/ (() => {\r\n    class UsersRoutingModule {\r\n    }\r\n    UsersRoutingModule.ɵfac = function UsersRoutingModule_Factory(t) { return new (t || UsersRoutingModule)(); };\r\n    UsersRoutingModule.ɵmod = core[\"Ub\" /* ɵɵdefineNgModule */]({ type: UsersRoutingModule });\r\n    UsersRoutingModule.ɵinj = core[\"Tb\" /* ɵɵdefineInjector */]({ imports: [[fesm2015_router[\"f\" /* RouterModule */].forChild(routes)], fesm2015_router[\"f\" /* RouterModule */]] });\r\n    return UsersRoutingModule;\r\n})();\r\n\n// CONCATENATED MODULE: ./src/app/users/users.module.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n* Translation\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst customCurrencyMaskConfig = {\r\n    align: \"right\",\r\n    allowNegative: true,\r\n    allowZero: true,\r\n    decimal: \".\",\r\n    precision: 2,\r\n    prefix: \"$ \",\r\n    suffix: \"\",\r\n    thousands: \",\",\r\n    nullable: true\r\n};\r\nlet users_module_UsersModule = /*@__PURE__*/ (() => {\r\n    class UsersModule {\r\n    }\r\n    UsersModule.ɵfac = function UsersModule_Factory(t) { return new (t || UsersModule)(); };\r\n    UsersModule.ɵmod = core[\"Ub\" /* ɵɵdefineNgModule */]({ type: UsersModule });\r\n    UsersModule.ɵinj = core[\"Tb\" /* ɵɵdefineInjector */]({ imports: [[\r\n                common[\"c\" /* CommonModule */],\r\n                core_module[\"a\" /* CoreModule */],\r\n                swimlane_ngx_datatable_NgxDatatableModule,\r\n                ui_switch_es2015[\"b\" /* UiSwitchModule */],\r\n                ng_bootstrap[\"t\" /* NgbModule */],\r\n                ng_bootstrap[\"C\" /* NgbPaginationModule */],\r\n                ngx_currency[\"b\" /* NgxCurrencyModule */].forRoot(customCurrencyMaskConfig),\r\n                ngx_spinner[\"b\" /* NgxSpinnerModule */],\r\n                jqwidgets_ng_jqxmenu[\"b\" /* jqxMenuModule */],\r\n                users_routing_module_UsersRoutingModule,\r\n                jqwidgets_ng_jqxgrid[\"b\" /* jqxGridModule */],\r\n                fesm2015_forms[\"v\" /* ReactiveFormsModule */],\r\n                ng_fallimg[\"a\" /* NgFallimgModule */],\r\n                ng_select_ng_select[\"c\" /* NgSelectModule */],\r\n                ngx_translate_core[\"b\" /* TranslateModule */].forRoot({\r\n                    loader: {\r\n                        provide: ngx_translate_core[\"a\" /* TranslateLoader */],\r\n                        useFactory: (http) => {\r\n                            return new ngx_translate_http_loader[\"a\" /* TranslateHttpLoader */](http);\r\n                        },\r\n                        deps: [fesm2015_http[\"b\" /* HttpClient */]]\r\n                    }\r\n                }),\r\n            ]] });\r\n    return UsersModule;\r\n})();\r\n\n\n/***/ })\n\n}]);","inputSourceMap":null}